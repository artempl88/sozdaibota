// server.js - –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const axios = require('axios');
const mongoose = require('mongoose');
const TelegramBot = require('node-telegram-bot-api');
const NodeCache = require('node-cache');
const crypto = require('crypto');
const { HttpsProxyAgent } = require('https-proxy-agent');
require('dotenv').config();

const app = express();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ (10 –º–∏–Ω—É—Ç TTL)
const cache = new NodeCache({ stdTTL: 600 });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
let bot;
if (process.env.TELEGRAM_BOT_TOKEN) {
    bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN);
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
if (process.env.MONGODB_URI) {
    mongoose.connect(process.env.MONGODB_URI)
        .then(() => console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
        .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB:', err));
}

// –°—Ö–µ–º—ã MongoDB
const ConversationSchema = new mongoose.Schema({
    sessionId: String,
    messages: [{
        role: String,
        content: String,
        timestamp: { type: Date, default: Date.now }
    }],
    specification: Object,
    createdAt: { type: Date, default: Date.now }
});

const AnalyticsSchema = new mongoose.Schema({
    event: String,
    data: Object,
    timestamp: { type: Date, default: Date.now },
    ip: String,
    userAgent: String
});

const Conversation = mongoose.model('Conversation', ConversationSchema);
const Analytics = mongoose.model('Analytics', AnalyticsSchema);

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å Helmet
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            scriptSrc: ["'self'", "'unsafe-inline'", "https://cdnjs.cloudflare.com"],
            styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
            fontSrc: ["'self'", "https://fonts.gstatic.com"],
            imgSrc: ["'self'", "data:", "https:"],
        },
    },
}));

// Middleware
app.use(express.json({ limit: '10mb' }));

// –£–ª—É—á—à–µ–Ω–Ω—ã–π CORS
const allowedOrigins = process.env.ALLOWED_ORIGINS 
    ? process.env.ALLOWED_ORIGINS.split(',')
    : ['https://sozdaibota.ru', 'https://www.sozdaibota.ru', 'http://localhost:3000'];

app.use(cors({
    origin: allowedOrigins,
    credentials: true
}));

// Rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    max: 50, // –º–∞–∫—Å–∏–º—É–º 50 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
    message: {
        error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
    }
});

app.use('/api/', limiter);

// –§—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
const encryptData = (text) => {
    if (!process.env.ENCRYPTION_KEY) return text;
    const cipher = crypto.createCipher('aes-256-cbc', process.env.ENCRYPTION_KEY);
    let encrypted = cipher.update(text, 'utf8', 'hex');
    encrypted += cipher.final('hex');
    return encrypted;
};

const decryptData = (encryptedText) => {
    if (!process.env.ENCRYPTION_KEY) return encryptedText;
    try {
        const decipher = crypto.createDecipher('aes-256-cbc', process.env.ENCRYPTION_KEY);
        let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
        decrypted += decipher.final('utf8');
        return decrypted;
    } catch (e) {
        return encryptedText;
    }
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI
const OPENAI_CONFIG = {
    apiKey: process.env.OPENAI_API_KEY,
    model: 'gpt-4o-mini',
    endpoint: 'https://api.openai.com/v1/chat/completions'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const PROXY_CONFIG = {
    host: process.env.PROXY_HOST || '141.98.187.117',
    port: process.env.PROXY_PORT || '8000',
    username: process.env.PROXY_USERNAME || 'qr4NBX',
    password: process.env.PROXY_PASSWORD || 'mFmLGN'
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏-–∞–≥–µ–Ω—Ç–∞
let proxyAgent = null;
if (PROXY_CONFIG.host && PROXY_CONFIG.port && PROXY_CONFIG.username && PROXY_CONFIG.password) {
    proxyAgent = new HttpsProxyAgent(
        `http://${PROXY_CONFIG.username}:${PROXY_CONFIG.password}@${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`
    );
    console.log(`üîó –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`);
} else {
    console.warn('‚ö†Ô∏è  –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
const ENHANCED_SYSTEM_PROMPT = `–¢—ã - —Å—Ç–∞—Ä—à–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ "–°–æ–∑–¥–∞—Ç—å –ë–æ—Ç–∞" —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.

–¢–≤–æ–π –ø–æ–¥—Ö–æ–¥:
1. –ù–∞—á–Ω–∏ —Å –ø–æ–Ω–∏–º–∞–Ω–∏—è –ë–ò–ó–ù–ï–°-–ó–ê–î–ê–ß–ò, –∞ –Ω–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
2. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ Jobs To Be Done
3. –ü—Ä–µ–¥–ª–∞–≥–∞–π —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω—ã—Ö –∫–µ–π—Å–æ–≤

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏–∞–ª–æ–≥–∞:
- –≠—Ç–∞–ø 1: –í—ã—è—Å–Ω–∏ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –∏ –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É
- –≠—Ç–∞–ø 2: –û–ø—Ä–µ–¥–µ–ª–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ –∏—Ö –±–æ–ª–∏
- –≠—Ç–∞–ø 3: –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
- –≠—Ç–∞–ø 4: –û–±—Å—É–¥–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
- –≠—Ç–∞–ø 5: –°—Ñ–æ—Ä–º–∏—Ä—É–π —á–µ—Ç–∫–æ–µ –¢–ó —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ —É—Å–ø–µ—Ö–∞

–ü—Ä–∏–º–µ—Ä—ã —É–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:
- "–ö–∞–∫—É—é –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É —Ä–µ—à–∞—é—Ç –≤–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã?"
- "–ß—Ç–æ —Å–µ–π—á–∞—Å –æ—Ç–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏?"
- "–ö–∞–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–∫–∞–∂—É—Ç —É—Å–ø–µ—Ö –±–æ—Ç–∞?"

–°—Ç–∏–ª—å: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç, –º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.`;

// A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
const PROMPT_VARIANTS = {
    A: "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –±–∏–∑–Ω–µ—Å–µ?",
    B: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞ 5 –º–∏–Ω—É—Ç —Å–æ–∑–¥–∞–º –¢–ó –Ω–∞ –±–æ—Ç–∞. –ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ä–µ—à–∞–µ–º?"
};

const getRandomPrompt = () => {
    return Math.random() > 0.5 ? PROMPT_VARIANTS.A : PROMPT_VARIANTS.B;
};

// –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
app.post('/api/analytics', async (req, res) => {
    try {
        const { event, data } = req.body;
        
        if (Analytics) {
            await Analytics.create({
                event,
                data,
                timestamp: new Date(),
                ip: req.ip,
                userAgent: req.get('User-Agent')
            });
        }
        
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏' });
    }
});

// –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è GPT-–ø–æ–º–æ—â–Ω–∏–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
app.post('/api/gpt-assistant', async (req, res) => {
    try {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ GPT:', req.body);

        const { message, conversation = [], sessionId } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!message || typeof message !== 'string') {
            return res.status(400).json({
                error: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
                success: false
            });
        }

        if (message.length > 1000) {
            return res.status(400).json({
                error: '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                success: false
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        const messageHash = crypto.createHash('md5').update(message + JSON.stringify(conversation)).digest('hex');
        const cachedResponse = cache.get(messageHash);
        if (cachedResponse) {
            console.log('üì¶ –û—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞');
            return res.json(cachedResponse);
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ MongoDB
        if (sessionId && Conversation) {
            try {
                await Conversation.findOneAndUpdate(
                    { sessionId },
                    {
                        $push: {
                            messages: { role: 'user', content: message }
                        }
                    },
                    { upsert: true }
                );
            } catch (dbError) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', dbError);
            }
        }

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è OpenAI
        const messages = [
            { role: 'system', content: ENHANCED_SYSTEM_PROMPT },
            ...conversation.slice(-10), // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            { role: 'user', content: message }
        ];

        console.log('üß† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI...');

        // –ó–∞–ø—Ä–æ—Å –∫ OpenAI —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        const axiosConfig = {
            headers: {
                'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': 'CreateBot-Assistant/2.0'
            },
            timeout: 30000
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if (proxyAgent) {
            axiosConfig.httpsAgent = proxyAgent;
            console.log('üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI');
        }

        const response = await axios.post(
            OPENAI_CONFIG.endpoint,
            {
                model: OPENAI_CONFIG.model,
                messages: messages,
                max_tokens: 300,
                temperature: 0.7,
                presence_penalty: 0.1,
                frequency_penalty: 0.1
            },
            axiosConfig
        );

        console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω');

        const assistantMessage = response.data.choices[0]?.message?.content;

        if (!assistantMessage) {
            throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI');
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ MongoDB
        if (sessionId && Conversation) {
            try {
                await Conversation.findOneAndUpdate(
                    { sessionId },
                    {
                        $push: {
                            messages: { role: 'assistant', content: assistantMessage }
                        }
                    }
                );
            } catch (dbError) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î:', dbError);
            }
        }

        // –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
        const quickReplies = generateQuickReplies(assistantMessage, message);

        const result = {
            success: true,
            message: assistantMessage,
            quickReplies: quickReplies,
            usage: response.data.usage
        };

        // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        cache.set(messageHash, result);

        res.json(result);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ GPT API:', error.message);

        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—Ç OpenAI, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback
        if (error.response?.status === 429) {
            return res.status(429).json({
                error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É',
                fallback: true,
                message: getFallbackResponse(req.body.message)
            });
        }

        // –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        res.status(500).json({
            error: '–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞',
            fallback: true,
            message: getFallbackResponse(req.body.message)
        });
    }
});

// Webhook –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–æ–≤ –≤ Telegram
app.post('/api/lead-notification', async (req, res) => {
    try {
        const { name, telegram, message, specification } = req.body;
        
        if (!bot || !process.env.ADMIN_CHAT_ID) {
            return res.json({ success: false, error: 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
        }
        
        const text = `üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n` +
                    `üë§ –ò–º—è: ${name}\n` +
                    `üí¨ Telegram: ${telegram}\n` +
                    `üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}\n` +
                    `üìã –¢–ó —Å–æ–∑–¥–∞–Ω–æ: ${specification ? '–î–∞' : '–ù–µ—Ç'}`;
        
        await bot.sendMessage(process.env.ADMIN_CHAT_ID, text);
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        if (Analytics) {
            await Analytics.create({
                event: 'lead_submitted',
                data: { name, telegram, hasSpecification: !!specification },
                ip: req.ip
            });
        }
        
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
    }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function generateQuickReplies(assistantMessage, userMessage) {
    const lowerMessage = assistantMessage.toLowerCase();
    const lowerUser = userMessage.toLowerCase();

    if (lowerMessage.includes('–±–∏–∑–Ω–µ—Å') || lowerMessage.includes('–∫–æ–º–ø–∞–Ω')) {
        return [
            "üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω",
            "üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", 
            "üîß –£—Å–ª—É–≥–∏",
            "üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
            "üíº –î—Ä—É–≥–æ–µ"
        ];
    }

    if (lowerMessage.includes('–∑–∞–¥–∞—á') || lowerMessage.includes('—Ñ—É–Ω–∫—Ü')) {
        return [
            "üìû –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã",
            "üõí –ü—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã", 
            "üìù –°–æ–±–∏—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏",
            "üìÖ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞ —É—Å–ª—É–≥–∏",
            "üí∞ –ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã"
        ];
    }

    if (lowerMessage.includes('–∏–Ω—Ç–µ–≥—Ä–∞—Ü') || lowerMessage.includes('–ø–æ–¥–∫–ª—é—á')) {
        return [
            "‚úÖ –ù—É–∂–Ω–∞ CRM",
            "üí≥ –ù—É–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞",
            "üìß –ù—É–∂–Ω–∞ –ø–æ—á—Ç–∞", 
            "‚ùå –ü–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ"
        ];
    }

    if (lowerMessage.includes('–≥–æ—Ç–æ–≤') || lowerMessage.includes('—Å—Ñ–æ—Ä–º–∏—Ä')) {
        return [
            "üìã –°–æ–∑–¥–∞—Ç—å –¢–ó —Å–µ–π—á–∞—Å",
            "üí° –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏",
            "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"
        ];
    }

    return [];
}

// Fallback –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI
function getFallbackResponse(userMessage) {
    const lowerInput = userMessage.toLowerCase();

    const responses = {
        '–º–∞–≥–∞–∑–∏–Ω': '–ü–æ–Ω—è–ª! –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω. –ö–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–µ—Ç–µ? –ù—É–∂–Ω—ã –ª–∏ –∫–∞—Ç–∞–ª–æ–≥, –∫–æ—Ä–∑–∏–Ω–∞ –∏ –æ–ø–ª–∞—Ç–∞?',
        '–æ–±—Ä–∞–∑–æ–≤–∞–Ω': '–û—Ç–ª–∏—á–Ω–æ! –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ñ–µ—Ä–∞. –û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã –∏–ª–∏ —à–∫–æ–ª–∞? –ù—É–∂–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏?',
        '—É—Å–ª—É–≥': '–Ø—Å–Ω–æ! –°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥. –ö–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ —É—Å–ª—É–≥–∏? –ù—É–∂–Ω–∞ –ª–∏ –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤?',
        '–Ω–µ–¥–≤–∏–∂–∏–º': '–ü–æ–Ω—è—Ç–Ω–æ! –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å. –ü—Ä–æ–¥–∞–∂–∞ –∏–ª–∏ –∞—Ä–µ–Ω–¥–∞? –ù—É–∂–µ–Ω –ª–∏ –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏?',
        '–∑–∞–∫–∞–∑': '–•–æ—Ä–æ—à–æ! –ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤. –ù—É–∂–Ω—ã –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏?',
        '–≤–æ–ø—Ä–æ—Å': '–Ø—Å–Ω–æ! FAQ-–±–æ—Ç. –ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —á–∞—â–µ –∑–∞–¥–∞—é—Ç? –ù—É–∂–Ω–∞ –ª–∏ —Å–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º?'
    };

    for (let key in responses) {
        if (lowerInput.includes(key)) {
            return responses[key];
        }
    }

    return getRandomPrompt();
}

// Endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¢–ó
app.post('/api/generate-specification', async (req, res) => {
    try {
        const { conversation, sessionId } = req.body;

        if (!conversation || conversation.length < 3) {
            return res.status(400).json({
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó'
            });
        }

        const specPrompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è Telegram-–±–æ—Ç–∞.

–î–∏–∞–ª–æ–≥: ${conversation.map(msg => `${msg.role}: ${msg.content}`).join('\n')}

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
    "business_type": "–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞",
    "main_tasks": ["–ó–∞–¥–∞—á–∞ 1", "–ó–∞–¥–∞—á–∞ 2"],
    "target_audience": "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è", 
    "key_features": ["–§—É–Ω–∫—Ü–∏—è 1", "–§—É–Ω–∫—Ü–∏—è 2", "–§—É–Ω–∫—Ü–∏—è 3"],
    "integrations": ["–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è 1"],
    "ai_level": "–£—Ä–æ–≤–µ–Ω—å –ò–ò",
    "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
    "success_metrics": ["–ú–µ—Ç—Ä–∏–∫–∞ 1", "–ú–µ—Ç—Ä–∏–∫–∞ 2"]
}

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

        const axiosConfigSpec = {
            headers: {
                'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                'Content-Type': 'application/json'
            },
            timeout: 30000
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if (proxyAgent) {
            axiosConfigSpec.httpsAgent = proxyAgent;
            console.log('üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó');
        }

        const response = await axios.post(
            OPENAI_CONFIG.endpoint,
            {
                model: OPENAI_CONFIG.model,
                messages: [
                    { role: 'system', content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON.' },
                    { role: 'user', content: specPrompt }
                ],
                max_tokens: 500,
                temperature: 0.3
            },
            axiosConfigSpec
        );

        const specText = response.data.choices[0]?.message?.content;
        
        try {
            const specification = JSON.parse(specText);
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¢–ó –≤ MongoDB
            if (sessionId && Conversation) {
                await Conversation.findOneAndUpdate(
                    { sessionId },
                    { specification: specification }
                );
            }
            
            // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó
            if (Analytics) {
                await Analytics.create({
                    event: 'specification_created',
                    data: { sessionId, businessType: specification.business_type },
                    ip: req.ip
                });
            }
            
            res.json({
                success: true,
                specification: specification
            });
        } catch (e) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, —Å–æ–∑–¥–∞–µ–º fallback
            const fallbackSpec = createFallbackSpec(conversation);
            res.json({
                success: true,
                specification: fallbackSpec
            });
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó:', error.message);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¢–ó',
            specification: createFallbackSpec(req.body.conversation)
        });
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –¢–ó
function createFallbackSpec(conversation) {
    const text = conversation.map(msg => msg.content).join(' ').toLowerCase();
    
    return {
        title: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π Telegram-–±–æ—Ç",
        business_type: "–ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫–ª–∏–µ–Ω—Ç–∞",
        main_tasks: ["–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ–±—â–µ–Ω–∏—è", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"],
        target_audience: "–ö–ª–∏–µ–Ω—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏",
        key_features: [
            "–£–º–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏",
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥", 
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏"
        ],
        integrations: ["–ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é"],
        ai_level: "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π",
        description: "–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞ –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞",
        success_metrics: ["–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏", "–°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É"]
    };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
app.get('/api/analytics/summary', async (req, res) => {
    try {
        if (!Analytics) {
            return res.json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' });
        }
        
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const [totalConversations, todayConversations, specificationsCreated] = await Promise.all([
            Analytics.countDocuments({ event: 'conversation_started' }),
            Analytics.countDocuments({ 
                event: 'conversation_started',
                timestamp: { $gte: today }
            }),
            Analytics.countDocuments({ event: 'specification_created' })
        ]);
        
        res.json({
            totalConversations,
            todayConversations,
            specificationsCreated,
            conversionRate: totalConversations > 0 ? (specificationsCreated / totalConversations * 100).toFixed(1) : 0
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏' });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
app.get('/api/health', (req, res) => {
    res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        service: 'CreateBot GPT Assistant v2.0',
        features: {
            mongodb: !!mongoose.connection.readyState,
            telegram: !!bot,
            cache: cache.getStats(),
            encryption: !!process.env.ENCRYPTION_KEY,
            proxy: !!proxyAgent ? `${PROXY_CONFIG.host}:${PROXY_CONFIG.port}` : 'disabled'
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
    res.status(500).json({
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        success: false
    });
});

const PORT = process.env.PORT || 3001;

app.listen(PORT, () => {
    console.log(`üöÄ GPT Assistant Server v2.0 –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üîó Health check: http://localhost:${PORT}/api/health`);
    
    if (!process.env.OPENAI_API_KEY) {
        console.warn('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENAI_API_KEY!');
    }
    
    if (!process.env.MONGODB_URI) {
        console.warn('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω MONGODB_URI!');
    }
    
    if (!process.env.TELEGRAM_BOT_TOKEN) {
        console.warn('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN!');
    }
});

module.exports = app;
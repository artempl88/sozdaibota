// server.js - –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const axios = require('axios');
const mongoose = require('mongoose');
const TelegramBot = require('node-telegram-bot-api');
const NodeCache = require('node-cache');
const crypto = require('crypto');
const { HttpsProxyAgent } = require('https-proxy-agent');
require('dotenv').config();

const PRICING_SYSTEM = {
    hourlyRate: 3000,
    minProjectCost: 15000, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞

    // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç–∏–ø–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–≤ —á–∞—Å–∞—Ö)
    baseComponents: {
        '–±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–æ—Ç–∞': 8,
        '—Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–∞–Ω–¥ –∏ –º–µ–Ω—é': 4,
        '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API Telegram': 2,
        '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π': 6,
        '–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å': 12,
        '—Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è': 3,
        '–¥–µ–ø–ª–æ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞': 4
    },
    
    // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏
    features: {
        // E-commerce
        '–∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤': 12,
        '–∫–æ—Ä–∑–∏–Ω–∞': 8,
        '–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞': 6,
        '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π': 10,
        '—Å–∏—Å—Ç–µ–º–∞ —Å–∫–∏–¥–æ–∫': 6,
        '–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏': 8,
        
        // –ó–∞–ø–∏—Å–∏ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        '–∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–ø–∏—Å–∏': 10,
        '–≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞': 6,
        '–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è': 4,
        '–æ—Ç–º–µ–Ω–∞/–ø–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏': 4,
        '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM': 12,
        
        // AI –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è GPT': 8,
        '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π': 10,
        '—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞': 12,
        '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤': 8,
        '–¥–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏': 16,
        
        // –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        '—Ä–∞—Å—Å—ã–ª–∫–∏': 6,
        '–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è': 8,
        '–º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å': 10,
        '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è': 4,
        
        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ
        '–Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞': 20,
        '—Ä–∞—Å—á–µ—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞': 16,
        '–∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏': 12,
        '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ñ–æ—Ç–æ': 24
    },
    
    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    complexity: {
        '–ø—Ä–æ—Å—Ç–æ–π': 1.0,
        '—Å—Ä–µ–¥–Ω–∏–π': 1.3,
        '—Å–ª–æ–∂–Ω—ã–π': 1.6,
        '–æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π': 2.0
    },
    
    // –°—Ä–æ—á–Ω–æ—Å—Ç—å
    urgency: {
        '—Å—Ç–∞–Ω–¥–∞—Ä—Ç': 1.0,
        '—Å—Ä–æ—á–Ω–æ': 1.3,
        '–æ—á–µ–Ω—å —Å—Ä–æ—á–Ω–æ': 1.5
    }
};

const multer = require('multer');
const fs = require('fs').promises;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
const upload = multer({ 
    dest: 'uploads/',
    limits: { fileSize: 10 * 1024 * 1024 }, // 10MB –º–∞–∫—Å–∏–º—É–º
    fileFilter: (req, file, cb) => {
        // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
        const allowedTypes = ['audio/webm', 'audio/ogg', 'audio/wav', 'audio/mp3'];
        if (allowedTypes.includes(file.mimetype)) {
            cb(null, true);
        } else {
            cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ'));
        }
    }
});

// –ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
const QUICK_TEMPLATES = {
    '–º–∞–≥–∞–∑–∏–Ω': {
        title: 'E-commerce –±–æ—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞',
        features: [
            '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–∏—Å–∫–æ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏',
            '–ö–æ—Ä–∑–∏–Ω–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤',
            '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏',
            '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏',
            '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò'
        ],
        businessValue: [
            {
                title: 'üöÄ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –Ω–∞ 40%',
                description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –±—Ä–æ—à–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω–∞—Ö —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∫–∏–¥–∫–∞–º–∏'
            },
            {
                title: 'üìä –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
                description: '–ò–ò –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —Å–ø—Ä–æ—Å –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Å–∫–ª–∞–¥—Å–∫–∏–µ –∑–∞–ø–∞—Å—ã'
            },
            {
                title: 'üéØ –£–º–Ω—ã–π —Ä–µ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥',
                description: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è'
            }
        ],
        estimatedPrice: '–æ—Ç 35,000‚ÇΩ',
        estimatedTime: '5-7 –¥–Ω–µ–π'
    },
    '–∑–∞–ø–∏—Å—å': {
        title: '–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏',
        features: [
            '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏',
            '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            '–£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø–æ–≥–æ–¥—ã –∏ –ø—Ä–æ–±–æ–∫',
            '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞',
            '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'
        ],
        businessValue: [
            {
                title: '‚è∞ –≠–∫–æ–Ω–æ–º–∏—è 4 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å',
                description: '–ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –±–µ–∑ —É—á–∞—Å—Ç–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
            },
            {
                title: 'üí∞ –°–Ω–∏–∂–µ–Ω–∏–µ no-show –Ω–∞ 60%',
                description: '–£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–µ–π'
            },
            {
                title: 'üìà –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏',
                description: '–ò–ò —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Ä—É—á–∫–∏'
            }
        ],
        estimatedPrice: '–æ—Ç 25,000‚ÇΩ',
        estimatedTime: '3-5 –¥–Ω–µ–π'
    },
    '–¥–æ—Å—Ç–∞–≤–∫': {
        title: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏',
        features: [
            '–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ 24/7 —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –≤–≤–æ–¥–æ–º',
            '–£–º–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏',
            'Live-—Ç—Ä–µ–∫–∏–Ω–≥ –∫—É—Ä—å–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ',
            '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤',
            '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'
        ],
        businessValue: [
            {
                title: 'üèÉ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ 70%',
                description: '–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –º–µ–∂–¥—É –∫—É—Ä—å–µ—Ä–∞–º–∏'
            },
            {
                title: 'üìç –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ 30%',
                description: '–ò–ò —Å—Ç—Ä–æ–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–æ–∫'
            },
            {
                title: '‚≠ê –†–µ–π—Ç–∏–Ω–≥ 4.8+',
                description: '–ê–≤—Ç–æ—Å–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–≤—ã—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞'
            }
        ],
        estimatedPrice: '–æ—Ç 45,000‚ÇΩ',
        estimatedTime: '7-10 –¥–Ω–µ–π'
    }
};

// –§—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
function analyzeQuickTask(input) {
    const lowerInput = input.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    for (let key in QUICK_TEMPLATES) {
        if (lowerInput.includes(key)) {
            return QUICK_TEMPLATES[key];
        }
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const patterns = {
        '–º–∞–≥–∞–∑–∏–Ω': /–ø—Ä–æ–¥–∞–∂|—Ç–æ–≤–∞—Ä|–ø–æ–∫—É–ø|–∫–æ—Ä–∑–∏–Ω|–∫–∞—Ç–∞–ª–æ–≥|shop|store/i,
        '–∑–∞–ø–∏—Å—å': /–∑–∞–ø–∏—Å|–±—Ä–æ–Ω|—Ä–∞—Å–ø–∏—Å–∞–Ω|–≤—Ä–µ–º—è|—Å–ª–æ—Ç|–ø—Ä–∏–µ–º|—É—Å–ª—É–≥|—Å–∞–ª–æ–Ω/i,
        '–¥–æ—Å—Ç–∞–≤–∫': /–¥–æ—Å—Ç–∞–≤–∫|–∫—É—Ä—å–µ—Ä|–ø—Ä–∏–≤–µ–∑|–æ—Ç–ø—Ä–∞–≤|–µ–¥–∞|delivery/i
    };
    
    for (let key in patterns) {
        if (patterns[key].test(lowerInput)) {
            return QUICK_TEMPLATES[key];
        }
    }
    
    return null;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
function generateQuickResponse(task) {
    return `üéØ –û—Ç–ª–∏—á–Ω–æ! –ó–∞ ${task.estimatedTime} —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å: **${task.title}**\n\n` +
           `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${task.estimatedPrice}\n\n` +
           `üîß **–ß—Ç–æ –±—É–¥–µ—Ç –≤ –±–æ—Ç–µ:**\n` +
           task.features.map((f, i) => `${i + 1}. ${f}`).join('\n') + '\n\n' +
           `üöÄ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏—à–∫–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞:**\n` +
           task.businessValue.map(v => `\n${v.title}\n${v.description}`).join('\n') + '\n\n' +
           `–≠—Ç–æ —Ä–µ—à–µ–Ω–∏–µ —É–≤–µ–ª–∏—á–∏—Ç –≤–∞—à—É –ø—Ä–∏–±—ã–ª—å –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —Ä—É—Ç–∏–Ω—É.\n` +
           `–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?`;
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT-4
async function calculateProjectEstimate(requirements, conversation) {
    try {
        // –ü—Ä–æ–º–ø—Ç –¥–ª—è GPT-4 –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
        const estimationPrompt = `–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Ç–µ—Ö–ª–∏–¥ —Å 10+ –ª–µ—Ç –æ–ø—ã—Ç–∞ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ Telegram-–±–æ—Ç–æ–≤.

–ó–ê–î–ê–ß–ê: –û—Ü–µ–Ω–∏ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ —á–∞—Å–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.

–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê:
${requirements}

–ë–ê–ó–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ (—á–∞—Å—ã):
${JSON.stringify(PRICING_SYSTEM.baseComponents, null, 2)}

–¢–ò–ü–û–í–´–ï –§–£–ù–ö–¶–ò–ò (—á–∞—Å—ã):
${JSON.stringify(PRICING_SYSTEM.features, null, 2)}

–ü–†–ê–í–ò–õ–ê –û–¶–ï–ù–ö–ò:
1. –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ - –∏—Å–ø–æ–ª—å–∑—É–π –≥–æ—Ç–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
2. –î–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π - –æ—Ü–µ–Ω–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
3. –£—á—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏
4. –î–æ–±–∞–≤—å 20% –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫—É
5. –î–æ–±–∞–≤—å 10% –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{
    "projectName": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
    "components": [
        {"name": "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", "hours": 10, "description": "–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç"}
    ],
    "totalHours": 100,
    "complexity": "—Å—Ä–µ–¥–Ω–∏–π",
    "risks": ["—Ä–∏—Å–∫ 1", "—Ä–∏—Å–∫ 2"],
    "timeline": "2-3 –Ω–µ–¥–µ–ª–∏",
    "recommendations": ["—Å–æ–≤–µ—Ç 1", "—Å–æ–≤–µ—Ç 2"]
}`;

        const response = await axios.post(
            'https://api.openai.com/v1/chat/completions',
            {
                model: 'gpt-4-0125-preview', // GPT-4 –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
                messages: [
                    { role: 'system', content: estimationPrompt },
                    { role: 'user', content: `–û—Ü–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç: ${requirements}` }
                ],
                response_format: { type: "json_object" },
                max_tokens: 1000,
                temperature: 0.3 // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            },
            {
                headers: {
                    'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                    'Content-Type': 'application/json'
                },
                httpsAgent: proxyAgent
            }
        );

        const estimate = JSON.parse(response.data.choices[0].message.content);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        const detectedFeatures = parseRequirements(requirements);
        
        // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        const cost = estimate.totalHours * PRICING_SYSTEM.hourlyRate;
        
        return {
            ...estimate,
            hourlyRate: PRICING_SYSTEM.hourlyRate,
            totalCost: cost,
            detectedFeatures: detectedFeatures, // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º
            costBreakdown: estimate.components.map(c => ({
                ...c,
                cost: c.hours * PRICING_SYSTEM.hourlyRate
            }))
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ GPT-4:', error);
        // Fallback –Ω–∞ –±–∞–∑–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
        return fallbackEstimate(requirements);
    }
}

// –†–µ–∑–µ—Ä–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑ GPT-4
function fallbackEstimate(requirements) {
    const lower = requirements.toLowerCase();
    let totalHours = 0;
    let components = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    Object.entries(PRICING_SYSTEM.baseComponents).forEach(([name, hours]) => {
        totalHours += hours;
        components.push({ name, hours, cost: hours * PRICING_SYSTEM.hourlyRate });
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    const detectedFeatures = [];
    Object.entries(PRICING_SYSTEM.features).forEach(([feature, hours]) => {
        if (lower.includes(feature.split(' ')[0])) {
            totalHours += hours;
            detectedFeatures.push(feature);
            components.push({ 
                name: feature, 
                hours, 
                cost: hours * PRICING_SYSTEM.hourlyRate 
            });
        }
    });
    
    // –ú–∏–Ω–∏–º—É–º 40 —á–∞—Å–æ–≤ –Ω–∞ –ª—é–±–æ–π –ø—Ä–æ–µ–∫—Ç
    totalHours = Math.max(totalHours, 40);
    
    return {
        projectName: 'Telegram-–±–æ—Ç',
        components,
        totalHours,
        totalCost: totalHours * PRICING_SYSTEM.hourlyRate,
        complexity: '—Å—Ä–µ–¥–Ω–∏–π',
        timeline: `${Math.ceil(totalHours / 40)} –Ω–µ–¥–µ–ª—å`,
        detectedFeatures: detectedFeatures // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    };
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã
function formatEstimateMessage(estimate) {
    return `üí∞ **–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞**

üìã **${estimate.projectName}**

‚è±Ô∏è **–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:** ${estimate.totalHours} —á–∞—Å–æ–≤ (${estimate.timeline})

üíµ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** ${estimate.totalCost.toLocaleString('ru-RU')} —Ä—É–±.
*–ò–∑ —Ä–∞—Å—á–µ—Ç–∞ ${PRICING_SYSTEM.hourlyRate} —Ä—É–±/—á–∞—Å*

üìä **–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º:**
${estimate.costBreakdown.map(c => 
    `‚Ä¢ ${c.name}: ${c.hours}—á = ${c.cost.toLocaleString('ru-RU')} —Ä—É–±.`
).join('\n')}

‚ö° **–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞:** ${estimate.complexity}

${estimate.risks && estimate.risks.length > 0 ? 
`‚ö†Ô∏è **–†–∏—Å–∫–∏:**
${estimate.risks.map(r => `‚Ä¢ ${r}`).join('\n')}` : ''}

${estimate.recommendations && estimate.recommendations.length > 0 ?
`üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
${estimate.recommendations.map(r => `‚Ä¢ ${r}`).join('\n')}` : ''}

---
‚úÖ –≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –Ω–∞ ¬±15% –ø–æ—Å–ª–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¢–ó.`;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –¥–∏–∞–ª–æ–≥–∞
function extractRequirements(conversation) {
    return conversation
        .filter(msg => msg.role === 'user' || msg.role === 'assistant')
        .map(msg => msg.content)
        .join('\n');
}

const app = express();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ (10 –º–∏–Ω—É—Ç TTL)
const cache = new NodeCache({ stdTTL: 600 });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
let bot;
if (process.env.TELEGRAM_BOT_TOKEN) {
    bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
    console.log('üì± Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    setupTelegramHandlers();
} else {
    console.log('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
if (process.env.MONGODB_URI) {
    mongoose.connect(process.env.MONGODB_URI)
        .then(() => console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
        .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB:', err));
} else {
    console.log('‚ö†Ô∏è MONGODB_URI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

// –°—Ö–µ–º—ã MongoDB
const ConversationSchema = new mongoose.Schema({
    sessionId: String,
    messages: [{
        role: String,
        content: String,
        timestamp: { type: Date, default: Date.now }
    }],
    specification: Object,
    createdAt: { type: Date, default: Date.now }
});

const AnalyticsSchema = new mongoose.Schema({
    event: String,
    data: Object,
    timestamp: { type: Date, default: Date.now },
    ip: String,
    userAgent: String
});

const Conversation = mongoose.model('Conversation', ConversationSchema);
const Analytics = mongoose.model('Analytics', AnalyticsSchema);

// ===== –°–•–ï–ú–ê –î–õ–Ø –°–ú–ï–¢ =====
const EstimateSchema = new mongoose.Schema({
    sessionId: String,
    projectName: String,
    components: Array,
    totalHours: Number,
    totalCost: Number,
    status: {
        type: String,
        enum: ['pending', 'approved', 'rejected'],
        default: 'pending'
    },
    clientInfo: Object,
    detectedFeatures: Array,
    timeline: String,
    createdAt: { type: Date, default: Date.now }
});

const Estimate = mongoose.model('Estimate', EstimateSchema);

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å Helmet (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'", "https://cdnjs.cloudflare.com"],
            scriptSrcAttr: ["'unsafe-inline'"],  // ‚Üê –≠–¢–û –í–ê–ñ–ù–û –î–õ–Ø ONCLICK
            styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
            fontSrc: ["'self'", "https://fonts.gstatic.com"],
            imgSrc: ["'self'", "data:", "https:", "blob:"],
            connectSrc: ["'self'", "https://api.openai.com", "ws:", "wss:"],
            mediaSrc: ["'self'", "blob:"],  // –î–ª—è –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏
        },
    },
    crossOriginEmbedderPolicy: false
}));

// Middleware
app.use(express.json({ limit: '10mb' }));

// –£–ª—É—á—à–µ–Ω–Ω—ã–π CORS
const allowedOrigins = process.env.ALLOWED_ORIGINS 
    ? process.env.ALLOWED_ORIGINS.split(',')
    : ['https://sozdaibota.ru', 'https://www.sozdaibota.ru', 'http://localhost:3000'];

app.use(cors({
    origin: allowedOrigins,
    credentials: true
}));

// ===== –î–û–ë–ê–í–ò–¢–¨ –î–õ–Ø –û–¢–î–ê–ß–ò HTML =====
const path = require('path');

// –û—Ç–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(__dirname));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});
// ===== –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø =====

// Rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    max: 50, // –º–∞–∫—Å–∏–º—É–º 50 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
    message: {
        error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
    }
});

app.use('/api/', limiter);

// –§—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
const encryptData = (text) => {
    if (!process.env.ENCRYPTION_KEY) return text;
    const cipher = crypto.createCipher('aes-256-cbc', process.env.ENCRYPTION_KEY);
    let encrypted = cipher.update(text, 'utf8', 'hex');
    encrypted += cipher.final('hex');
    return encrypted;
};

const decryptData = (encryptedText) => {
    if (!process.env.ENCRYPTION_KEY) return encryptedText;
    try {
        const decipher = crypto.createDecipher('aes-256-cbc', process.env.ENCRYPTION_KEY);
        let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
        decrypted += decipher.final('utf8');
        return decrypted;
    } catch (e) {
        return encryptedText;
    }
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI
const OPENAI_CONFIG = {
    apiKey: process.env.OPENAI_API_KEY,
    model: 'gpt-4o-mini',
    endpoint: 'https://api.openai.com/v1/chat/completions'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const PROXY_CONFIG = {
    host: process.env.PROXY_HOST || '141.98.187.117',
    port: process.env.PROXY_PORT || '8000',
    username: process.env.PROXY_USERNAME || 'qr4NBX',
    password: process.env.PROXY_PASSWORD || 'mFmLGN'
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏-–∞–≥–µ–Ω—Ç–∞
let proxyAgent = null;
if (PROXY_CONFIG.host && PROXY_CONFIG.port && PROXY_CONFIG.username && PROXY_CONFIG.password) {
    proxyAgent = new HttpsProxyAgent(
        `http://${PROXY_CONFIG.username}:${PROXY_CONFIG.password}@${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`
    );
    console.log(`üîó –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`);
} else {
    console.warn('‚ö†Ô∏è  –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
const ENHANCED_SYSTEM_PROMPT = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é Telegram-–±–æ—Ç–æ–≤ –¥–ª—è –õ–Æ–ë–´–• –Ω–∏—à.

–í–ê–ñ–ù–û: –ö–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑ –Ω–µ–æ–±—ã—á–Ω—ã—Ö —Å—Ñ–µ—Ä:
- –≠–∑–æ—Ç–µ—Ä–∏–∫–∞ (–≥–∞–¥–∞–Ω–∏–µ, —Ç–∞—Ä–æ, –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è, —Ö–∏—Ä–æ–º–∞–Ω—Ç–∏—è)
- –ö–æ—É—á–∏–Ω–≥ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è  
- –ò–Ω—Ñ–æ–±–∏–∑–Ω–µ—Å
- –ö—Ä–∏–ø—Ç–∞ –∏ —Ç—Ä–µ–π–¥–∏–Ω–≥
- –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞
- –ò –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ!

–¢–≤–æ–π –ø–æ–¥—Ö–æ–¥:
1. –ù–ï —É–¥–∏–≤–ª—è–π—Å—è –Ω–µ–æ–±—ã—á–Ω—ã–º –Ω–∏—à–∞–º - –¥–ª—è –∫–∞–∂–¥–æ–π –µ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–µ
2. –ë—ã—Å—Ç—Ä–æ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
3. –ù–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–π—Å—è –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö - –º–∞–∫—Å–∏–º—É–º 2-3
4. –ü–æ–∫–∞–∑—ã–≤–∞–π —á—Ç–æ –ø–æ–Ω–∏–º–∞–µ—à—å —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∏—Ö –±–∏–∑–Ω–µ—Å–∞

–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤:
"–≥–∞–¥–∞—é –ø–æ –ª–∞–¥–æ–Ω–∏" ‚Üí "–û—Ç–ª–∏—á–Ω–æ! –°–æ–∑–¥–∞–º –±–æ—Ç–∞ –¥–ª—è —Ö–∏—Ä–æ–º–∞–Ω—Ç–∏–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–µ–π –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏"
"–ø—Ä–æ–¥–∞—é –∫—É—Ä—Å—ã" ‚Üí "–ü–æ–Ω—è–ª! –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —É—Ä–æ–∫–∞–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–¥–∞–Ω–∏–π"`;

// A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
const PROMPT_VARIANTS = {
    A: "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –±–∏–∑–Ω–µ—Å–µ?",
    B: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞ 5 –º–∏–Ω—É—Ç —Å–æ–∑–¥–∞–º –¢–ó –Ω–∞ –±–æ—Ç–∞. –ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ä–µ—à–∞–µ–º?"
};

const getRandomPrompt = () => {
    return Math.random() > 0.5 ? PROMPT_VARIANTS.A : PROMPT_VARIANTS.B;
};

// –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
app.post('/api/analytics', async (req, res) => {
    try {
        const { event, data } = req.body;
        
        if (Analytics) {
            await Analytics.create({
                event,
                data,
                timestamp: new Date(),
                ip: req.ip,
                userAgent: req.get('User-Agent')
            });
        }
        
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏' });
    }
});

// ===== –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ê–°–ß–ï–¢–ê –°–ú–ï–¢ =====

// –ü–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
function parseRequirements(text) {
    const lower = text.toLowerCase();
    const detectedFeatures = [];
    
    // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    const improvedPatterns = {
        // E-commerce
        '–∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤': /–∫–∞—Ç–∞–ª–æ–≥[–∞-—è\s]*—Ç–æ–≤–∞—Ä|—Ç–æ–≤–∞—Ä[–∞-—è\s]*–∫–∞—Ç–∞–ª–æ–≥|—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤|–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç/i,
        '–∫–æ—Ä–∑–∏–Ω–∞': /–∫–æ—Ä–∑–∏–Ω[–∞–µ—É]|–¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑|–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑|cart/i,
        '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π': /(–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è[–∞-—è\s]*)?–ø–ª–∞—Ç[–µ—ë]–∂|–æ–ø–ª–∞—Ç[–∞–µ—É]|payment|pay|–∫–∞—Å—Å[–∞–µ—É]/i,
        '—Å–∏—Å—Ç–µ–º–∞ —Å–∫–∏–¥–æ–∫': /—Å–∫–∏–¥–∫[–∞–∏–µ—É]|–ø—Ä–æ–º–æ–∫–æ–¥|discount|–∞–∫—Ü–∏[—è–∏]/i,
        '–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏': /–æ—Ç—Å–ª–µ–∂–∏–≤[–∞-—è]*–¥–æ—Å—Ç–∞–≤–∫|—Ç—Ä–µ–∫[–∞-—è]*–¥–æ—Å—Ç–∞–≤–∫|—Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏/i,
        
        // –ó–∞–ø–∏—Å–∏ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ  
        '–∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–ø–∏—Å–∏': /–∫–∞–ª–µ–Ω–¥–∞—Ä[—å—è–∏][–∞-—è\s]*–∑–∞–ø–∏—Å|–∑–∞–ø–∏—Å[–∞–µ–∏—å][–∞-—è\s]*–∫–∞–ª–µ–Ω–¥–∞—Ä|—Ä–∞—Å–ø–∏—Å–∞–Ω–∏[–µ—è]/i,
        '–≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞': /–≤—ã–±–æ—Ä[–∞-—è\s]*—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç|—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç[–∞-—è\s]*–≤—ã–±–æ—Ä|–º–∞—Å—Ç–µ—Ä[–∞-—è\s]*–≤—ã–±–æ—Ä/i,
        '–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è': /–Ω–∞–ø–æ–º–∏–Ω[–∞-—è]*|—É–≤–µ–¥–æ–º–ª–µ–Ω–∏[—è–µ–∏]|notification|reminder/i,
        '–æ—Ç–º–µ–Ω–∞/–ø–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏': /–æ—Ç–º–µ–Ω[–∞–µ—É][–∞-—è\s]*–∑–∞–ø–∏—Å|–ø–µ—Ä–µ–Ω–æ—Å[–∞-—è\s]*–∑–∞–ø–∏—Å|–æ—Ç–ª–æ–∂–∏—Ç—å/i,
        '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM': /crm|–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è[–∞-—è\s]*crm|—Å–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞/i,
        
        // AI –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è GPT': /gpt|chatgpt|ai|–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç|—É–º–Ω[—ã–∞—è–æ–µ][–∞-—è\s]*–±–æ—Ç/i,
        '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π': /–æ–±—Ä–∞–±–æ—Ç–∫[–∞–µ—É][–∞-—è\s]*–∏–∑–æ–±—Ä–∞–∂–µ–Ω|—Ñ–æ—Ç–æ[–∞-—è\s]*–æ–±—Ä–∞–±–æ—Ç–∫|–∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ/i,
        '—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞': /—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω[–∞-—è]*–≥–æ–ª–æ—Å|–≥–æ–ª–æ—Å[–∞-—è\s]*—Ä–∞—Å–ø–æ–∑–Ω–∞–≤|voice recognition/i,
        '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤': /–≥–µ–Ω–µ—Ä–∞—Ü[–∞-—è]*–æ—Ç—á—ë—Ç|—Å–æ–∑–¥–∞–Ω[–∞-—è]*–æ—Ç—á—ë—Ç|–æ—Ç—á—ë—Ç–Ω–æ—Å—Ç/i,
        '–¥–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏': /–¥–∞—à–±–æ—Ä–¥|dashboard|–∞–Ω–∞–ª–∏—Ç–∏–∫[–∞–µ—É]|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫[–∞–µ—É]/i,
        
        // –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        '—Ä–∞—Å—Å—ã–ª–∫–∏': /—Ä–∞—Å—Å—ã–ª–∫[–∞–µ–∏—É]|–º–∞—Å—Å–æ–≤[–∞-—è]*–æ—Ç–ø—Ä–∞–≤–∫|newsletter|mailing/i,
        '–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è': /–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü[–∞-—è]*|–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω[–∞-—è]*–ø–æ–¥—Ö–æ–¥|personalization/i,
        '–º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å': /–º–Ω–æ–≥–æ—è–∑—ã—á–Ω[–∞-—è]*|–º—É–ª—å—Ç–∏—è–∑—ã—á–Ω[–∞-—è]*|–ø–µ—Ä–µ–≤–æ–¥|translation/i,
        '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è': /—É–≤–µ–¥–æ–º–ª–µ–Ω–∏[—è–µ–∏]|–ø—É—à[–∞-—è\s]*—É–≤–µ–¥–æ–º–ª–µ–Ω–∏/i,
        
        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        '–Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞': /–Ω–∞—Ç–∞–ª—å–Ω[–∞-—è]*–∫–∞—Ä—Ç|–∫–∞—Ä—Ç[–∞–µ—É][–∞-—è\s]*—Ä–æ–∂–¥–µ–Ω/i,
        '—Ä–∞—Å—á–µ—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞': /–≥–æ—Ä–æ—Å–∫–æ–ø|–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫[–∞-—è]*—Ä–∞—Å—á—ë—Ç|–ø—Ä–æ–≥–Ω–æ–∑[–∞-—è\s]*–∑–≤—ë–∑–¥/i,
        '–∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏': /—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç[—å–∏]|–ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫[–∞-—è]*–∞–Ω–∞–ª–∏–∑|compatibility/i,
        '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ñ–æ—Ç–æ': /–∞–Ω–∞–ª–∏–∑[–∞-—è\s]*–ø–æ —Ñ–æ—Ç–æ|—Ñ–æ—Ç–æ[–∞-—è\s]*–∞–Ω–∞–ª–∏–∑|–∑–∞–≥—Ä—É–∑[–∞-—è]*—Ñ–æ—Ç–æ/i
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    Object.entries(improvedPatterns).forEach(([feature, pattern]) => {
        if (pattern.test(text)) {
            detectedFeatures.push(feature);
        }
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ PRICING_SYSTEM
    Object.keys(PRICING_SYSTEM.features).forEach(feature => {
        if (!detectedFeatures.includes(feature)) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤ (–Ω–µ —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ)
            const featureWords = feature.toLowerCase().split(' ');
            const textWords = lower.split(/\s+/);
            
            // –§—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –µ—Å–ª–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–µ–∫—Å—Ç–µ
            const foundAllWords = featureWords.every(word => 
                textWords.some(textWord => textWord.includes(word) && word.length > 2)
            );
            
            if (foundAllWords) {
                detectedFeatures.push(feature);
            }
        }
    });
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    return [...new Set(detectedFeatures)];
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–º–µ—Ç—ã –≤ Telegram
async function sendEstimateToTelegram(estimate, sessionId) {
    if (!bot || !process.env.ADMIN_CHAT_ID) {
        console.log('‚ö†Ô∏è Telegram –±–æ—Ç –∏–ª–∏ ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        return;
    }
    
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        const saved = await Estimate.create({
            sessionId,
            ...estimate
        });
        
        // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ detectedFeatures
        const detectedFeatures = estimate.detectedFeatures || [];
        const components = estimate.components || [];
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = 
            `üìä **–ù–û–í–ê–Ø –°–ú–ï–¢–ê**\n\n` +
            `üÜî ID: ${saved._id}\n` +
            `üí∞ **–ò–¢–û–ì–û: ${estimate.totalCost.toLocaleString('ru-RU')} ‚ÇΩ**\n` +
            `‚è±Ô∏è –í—Ä–µ–º—è: ${estimate.totalHours} —á–∞—Å–æ–≤\n` +
            `üìÖ –°—Ä–æ–∫: ${estimate.timeline}\n\n` +
            (detectedFeatures.length > 0 ? 
                `üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n${detectedFeatures.map(f => `‚Ä¢ ${f}`).join('\n')}\n\n` : 
                'üìã –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞\n\n'
            ) +
            `üíº –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:\n` +
            components.slice(0, 5).map(c => `‚Ä¢ ${c.name}: ${c.hours}—á`).join('\n');
        
        // –ö–Ω–æ–ø–∫–∏
        const keyboard = {
            inline_keyboard: [[
                { text: '‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `approve:${saved._id}` },
                { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject:${saved._id}` }
            ]]
        };
        
        await bot.sendMessage(
            process.env.ADMIN_CHAT_ID,
            message,
            { 
                parse_mode: 'Markdown',
                reply_markup: keyboard
            }
        );
        
        console.log(`üìä –°–º–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram: ${saved._id}`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
function setupTelegramHandlers() {
    if (!bot) return;
    
    bot.on('callback_query', async (query) => {
        try {
            const [action, estimateId] = query.data.split(':');
            
            if (action === 'approve') {
                await Estimate.findByIdAndUpdate(estimateId, { status: 'approved' });
                bot.answerCallbackQuery(query.id, { text: '‚úÖ –°–º–µ—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!' });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                bot.editMessageText(
                    query.message.text + '\n\n‚úÖ **–°–ú–ï–¢–ê –£–¢–í–ï–†–ñ–î–ï–ù–ê**',
                    {
                        chat_id: query.message.chat.id,
                        message_id: query.message.message_id,
                        parse_mode: 'Markdown'
                    }
                );
                
            } else if (action === 'reject') {
                await Estimate.findByIdAndUpdate(estimateId, { status: 'rejected' });
                bot.answerCallbackQuery(query.id, { text: '‚ùå –°–º–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞' });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                bot.editMessageText(
                    query.message.text + '\n\n‚ùå **–°–ú–ï–¢–ê –û–¢–ö–õ–û–ù–ï–ù–ê**',
                    {
                        chat_id: query.message.chat.id,
                        message_id: query.message.message_id,
                        parse_mode: 'Markdown'
                    }
                );
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
            bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
        }
    });
    
    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è Telegram –±–æ—Ç–∞
    bot.onText(/\/stats/, async (msg) => {
        try {
            const chatId = msg.chat.id;
            
            const total = await Estimate.countDocuments();
            const approved = await Estimate.countDocuments({ status: 'approved' });
            const pending = await Estimate.countDocuments({ status: 'pending' });
            const rejected = await Estimate.countDocuments({ status: 'rejected' });
            
            const statsMessage = 
                `üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ú–ï–¢**\n\n` +
                `üìã –í—Å–µ–≥–æ: ${total}\n` +
                `‚úÖ –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: ${approved}\n` +
                `‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${pending}\n` +
                `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${rejected}\n\n` +
                `üíØ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${total > 0 ? (approved / total * 100).toFixed(1) : 0}%`;
            
            bot.sendMessage(chatId, statsMessage, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    });
}

// ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ê–°–ß–ï–¢–ê =====
app.post('/api/gpt-assistant', async (req, res) => {
    try {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ GPT:', req.body);

        const { message, conversation = [], sessionId, mode } = req.body;
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
        if (mode === 'formulation' || message === 'FORMULATION_MODE_START') {
            return handleFormulationMode(req, res);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –¥–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        const quickTask = analyzeQuickTask(message);
        
        if (quickTask) {
            console.log('‚ö° –ù–∞–π–¥–µ–Ω –±—ã—Å—Ç—Ä—ã–π —à–∞–±–ª–æ–Ω:', quickTask.title);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –µ—Å–ª–∏ –µ—Å—Ç—å MongoDB
            if (sessionId && Conversation) {
                try {
                    await Conversation.findOneAndUpdate(
                        { sessionId },
                        {
                            $push: {
                                messages: { 
                                    role: 'user', 
                                    content: message 
                                }
                            },
                            quickTask: quickTask
                        },
                        { upsert: true }
                    );
                } catch (dbError) {
                    console.error('DB Error:', dbError);
                }
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            return res.json({
                success: true,
                message: generateQuickResponse(quickTask),
                quickTask: quickTask,
                businessFeatures: quickTask.businessValue,
                quickReplies: [
                    '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
                    '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏',
                    'üí¨ –£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏',
                    'üîÑ –î—Ä—É–≥–∞—è –∑–∞–¥–∞—á–∞'
                ]
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!message || typeof message !== 'string') {
            return res.status(400).json({
                error: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
                success: false
            });
        }

        if (message.length > 1000) {
            return res.status(400).json({
                error: '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                success: false
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        const messageHash = crypto.createHash('md5').update(message + JSON.stringify(conversation)).digest('hex');
        const cachedResponse = cache.get(messageHash);
        if (cachedResponse) {
            console.log('üì¶ –û—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞');
            return res.json(cachedResponse);
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ MongoDB
        if (sessionId && Conversation) {
            try {
                await Conversation.findOneAndUpdate(
                    { sessionId },
                    {
                        $push: {
                            messages: { role: 'user', content: message }
                        }
                    },
                    { upsert: true }
                );
            } catch (dbError) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', dbError);
            }
        }

        // ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ê–°–ß–ï–¢–ê =====
        const allMessages = [...conversation, { role: 'user', content: message }];
        const fullText = allMessages.map(m => m.content).join(' ');
        
        // –£–ª—É—á—à–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        const shouldCalculate = 
            conversation.length >= 8 || // –ü–æ—Å–ª–µ 8 —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ 4)
            message.toLowerCase().includes('–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏') ||
            message.toLowerCase().includes('—Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å–º–µ—Ç—É') ||
            message.toLowerCase().includes('—Å–æ–∑–¥–∞–π—Ç–µ —Å–º–µ—Ç—É') ||
            message.toLowerCase().includes('—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å') ||
            message.toLowerCase().includes('–∫–∞–∫–∞—è —Ü–µ–Ω–∞') ||
            message.toLowerCase().includes('—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç') ||
            (parseRequirements(fullText).length >= 5 && conversation.length >= 6); // 5+ —Ñ—É–Ω–∫—Ü–∏–π –ò 6+ —Å–æ–æ–±—â–µ–Ω–∏–π

        if (shouldCalculate) {
            console.log('üí∞ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã...');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞
            const estimate = await calculateProjectEstimate(fullText, conversation);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            await sendEstimateToTelegram(estimate, sessionId);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ—Ç—É –≤ –±–∞–∑—É
            if (sessionId && Conversation) {
                try {
                    await Conversation.findOneAndUpdate(
                        { sessionId },
                        { 
                            estimate: estimate,
                            estimatedAt: new Date()
                        }
                    );
                } catch (dbError) {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã:', dbError);
                }
            }
            
            // –û—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É —Å–æ —Å–º–µ—Ç–æ–π
            const result = {
                success: true,
                message: formatEstimateMessage(estimate),
                estimate: estimate,
                quickReplies: ['üìû –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ', '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è', 'üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å']
            };
            
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            cache.set(messageHash, result);
            
            return res.json(result);
        }
        // ===== –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò =====

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è OpenAI
        const messages = [
            { role: 'system', content: ENHANCED_SYSTEM_PROMPT },
            ...conversation.slice(-10), // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            { role: 'user', content: message }
        ];

        console.log('üß† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI...');

        // –ó–∞–ø—Ä–æ—Å –∫ OpenAI —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        const axiosConfig = {
            headers: {
                'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': 'CreateBot-Assistant/2.0'
            },
            timeout: 30000
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if (proxyAgent) {
            axiosConfig.httpsAgent = proxyAgent;
            console.log('üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI');
        }

        const response = await axios.post(
            OPENAI_CONFIG.endpoint,
            {
                model: OPENAI_CONFIG.model,
                messages: messages,
                max_tokens: 300,
                temperature: 0.7,
                presence_penalty: 0.1,
                frequency_penalty: 0.1
            },
            axiosConfig
        );

        console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω');

        const assistantMessage = response.data.choices[0]?.message?.content;

        if (!assistantMessage) {
            throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI');
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ MongoDB
        if (sessionId && Conversation) {
            try {
                await Conversation.findOneAndUpdate(
                    { sessionId },
                    {
                        $push: {
                            messages: { role: 'assistant', content: assistantMessage }
                        }
                    }
                );
            } catch (dbError) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î:', dbError);
            }
        }

        // –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
        const quickReplies = generateQuickReplies(assistantMessage, message);

        const result = {
            success: true,
            message: assistantMessage,
            quickReplies: quickReplies,
            usage: response.data.usage
        };

        // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        cache.set(messageHash, result);

        res.json(result);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ GPT API:', error.message);

        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—Ç OpenAI, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback
        if (error.response?.status === 429) {
            return res.status(429).json({
                error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É',
                fallback: true,
                message: getFallbackResponse(req.body.message)
            });
        }

        // –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        res.status(500).json({
            error: '–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞',
            fallback: true,
            message: getFallbackResponse(req.body.message)
        });
    }
});

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
async function handleFormulationMode(req, res) {
    const { message, conversation = [], sessionId } = req.body;

    // ===== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ê–°–ß–ï–¢–ê =====
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å—á–∏—Ç–∞—Ç—å —Å–º–µ—Ç—É (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —É—Å–ª–æ–≤–∏—è)
    const shouldCalculate = 
        message.toLowerCase().includes('—Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ') ||
        message.toLowerCase().includes('–ø–æ—Å—á–∏—Ç–∞–π—Ç–µ') ||
        message.toLowerCase().includes('—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å') ||
        message.toLowerCase().includes('–∫–∞–∫–∞—è —Ü–µ–Ω–∞') ||
        message.toLowerCase().includes('—Å–æ–∑–¥–∞–π—Ç–µ —Å–º–µ—Ç—É') ||
        (conversation.length >= 10 && parseRequirements(conversation.map(m => m.content).join(' ')).length >= 4); // –ü–æ—Å–ª–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –ò 4+ —Ñ—É–Ω–∫—Ü–∏–π

    let estimate = null;
    let estimateMessage = '';

    if (shouldCalculate) {
        const requirements = extractRequirements(conversation);
        
        // –°—á–∏—Ç–∞–µ–º —Å–º–µ—Ç—É –∏—Å–ø–æ–ª—å–∑—É—è –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        estimate = await calculateProjectEstimate(requirements, conversation);
        estimateMessage = formatEstimateMessage(estimate);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        await sendEstimateToTelegram(estimate, sessionId);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        if (sessionId && Conversation) {
            await Conversation.findOneAndUpdate(
                { sessionId },
                { 
                    estimate: estimate,
                    estimatedAt: new Date()
                }
            );
        }
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
    const formulationPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è Telegram-–±–æ—Ç–æ–≤.

–†–ï–ñ–ò–ú: –ü–æ–º–æ—â—å —Å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–æ–π –∑–∞–¥–∞—á–∏

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ü–æ–Ω—è—Ç—å —á—Ç–æ —Ö–æ—á–µ—Ç –∫–ª–∏–µ–Ω—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (–≥–∞–¥–∞–Ω–∏–µ, –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è, –∫–æ—É—á–∏–Ω–≥ –∏ —Ç.–¥.)
2. –ù–ï –∑–∞—Ü–∏–∫–ª–∏–≤–∞—Ç—å—Å—è –Ω–∞ –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ –≤–æ–ø—Ä–æ—Å–∞—Ö
3. –ë—ã—Å—Ç—Ä–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–Ω—è—Ç–Ω–æ–µ –¢–ó
4. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –µ–≥–æ –Ω–∏—à–∏

–ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –æ–ø–∏—Å–∞—Ç—å –Ω–µ–æ–±—ã—á–Ω—ã–π –±–∏–∑–Ω–µ—Å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ü—Ä–∏–º–µ—Ä—ã:
- "–ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –ª–∞–¥–æ–Ω–∏" ‚Üí –±–æ—Ç –¥–ª—è —Ö–∏—Ä–æ–º–∞–Ω—Ç–∏–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–æ—Ç–æ
- "–ø–æ–º–æ–≥–∞—é –ª—é–¥—è–º" ‚Üí —É—Ç–æ—á–Ω–∏ –≤ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ (–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è, –∫–æ—É—á–∏–Ω–≥, –∏ —Ç.–¥.)
- "–ø—Ä–æ–¥–∞—é —ç–Ω–µ—Ä–≥–∏—é" ‚Üí –≤–æ–∑–º–æ–∂–Ω–æ —ç–∑–æ—Ç–µ—Ä–∏–∫–∞ –∏–ª–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏

–í–ê–ñ–ù–û: 
- –ú–∞–∫—Å–∏–º—É–º 2-3 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞
- –ó–∞—Ç–µ–º —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ä–µ—à–µ–Ω–∏–µ
- –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
- –ë—É–¥—å –≥–æ—Ç–æ–≤ –∫ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –Ω–∏—à–∞–º
- –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ä–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑ - —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∏–ª–∏ —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç`;

    let messages = [
        { role: 'system', content: formulationPrompt }
    ];
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª–æ —Ä–µ–∂–∏–º–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
    if (message === 'FORMULATION_MODE_START') {
        messages.push({
            role: 'user',
            content: '–ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–æ–π". –ù–∞—á–Ω–∏ –¥–∏–∞–ª–æ–≥.'
        });
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        messages = messages.concat(conversation.slice(-6));
        messages.push({ role: 'user', content: message });
    }
    
    try {
        // –í—ã–∑–æ–≤ OpenAI
        const response = await axios.post(
            OPENAI_CONFIG.endpoint,
            {
                model: OPENAI_CONFIG.model,
                messages: messages,
                max_tokens: 400,
                temperature: 0.8, // –ë–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –Ω–∏—à
                presence_penalty: 0.3, // –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            },
            {
                headers: {
                    'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                    'Content-Type': 'application/json'
                },
                httpsAgent: proxyAgent,
                timeout: 30000
            }
        );
        
        const assistantMessage = response.data.choices[0]?.message?.content;
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
        const quickReplies = generateFormulationButtons(assistantMessage, conversation);
        
        res.json({
            success: true,
            message: estimateMessage || assistantMessage, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–º–µ—Ç—É –µ—Å–ª–∏ –µ—Å—Ç—å
            quickReplies: estimate ? [
                '‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–º–µ—Ç—É',
                'üìù –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏',
                'üìû –û–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏',
                'üìÑ –ü–æ–ª—É—á–∏—Ç—å –≤ PDF'
            ] : quickReplies,
            estimate: estimate // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã
        });
        
    } catch (error) {
        console.error('OpenAI Error:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ AI',
            fallback: true,
            message: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π —É –≤–∞—Å –±–∏–∑–Ω–µ—Å –∏ —á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å –±–æ—Ç?'
        });
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function generateFormulationButtons(aiResponse, conversation) {
    const lower = aiResponse.toLowerCase();
    
    // –ï—Å–ª–∏ AI —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ç–∏–ø–µ –±–∏–∑–Ω–µ—Å–∞
    if (lower.includes('–±–∏–∑–Ω–µ—Å') || lower.includes('–∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å')) {
        return [];  // –ü—É—Å—Ç—å –ø–∏—à—É—Ç —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
    }
    
    // –ï—Å–ª–∏ AI –≥–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –¢–ó
    if (lower.includes('–≥–æ—Ç–æ–≤') || lower.includes('—Å–æ–∑–¥–∞–º') || lower.includes('–ø—Ä–µ–¥–ª–∞–≥–∞—é')) {
        return [
            '‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ',
            'üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏',
            'üìã –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ–µ –¢–ó',
            'üí∞ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å'
        ];
    }
    
    // –ï—Å–ª–∏ AI —É—Ç–æ—á–Ω—è–µ—Ç –¥–µ—Ç–∞–ª–∏
    if (lower.includes('—É—Ç–æ—á–Ω') || lower.includes('–∫–∞–∫–∏–µ')) {
        return [
            'üí¨ –û—Ç–≤–µ—á—É —Ç–µ–∫—Å—Ç–æ–º',
            'üé§ –ó–∞–ø–∏—à—É –≥–æ–ª–æ—Å–æ–º',
            'üìã –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ, —Å–æ–∑–¥–∞–π—Ç–µ –¢–ó'
        ];
    }
    
    return [];
}

// Webhook –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–æ–≤ –≤ Telegram
app.post('/api/lead-notification', async (req, res) => {
    try {
        const { name, telegram, message, specification } = req.body;
        
        if (!bot || !process.env.ADMIN_CHAT_ID) {
            return res.json({ success: false, error: 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
        }
        
        const text = `üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n` +
                    `üë§ –ò–º—è: ${name}\n` +
                    `üí¨ Telegram: ${telegram}\n` +
                    `üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}\n` +
                    `üìã –¢–ó —Å–æ–∑–¥–∞–Ω–æ: ${specification ? '–î–∞' : '–ù–µ—Ç'}`;
        
        await bot.sendMessage(process.env.ADMIN_CHAT_ID, text);
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        if (Analytics) {
            await Analytics.create({
                event: 'lead_submitted',
                data: { name, telegram, hasSpecification: !!specification },
                ip: req.ip
            });
        }
        
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
    }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function generateQuickReplies(assistantMessage, userMessage) {
    const lowerMessage = assistantMessage.toLowerCase();
    const lowerUser = userMessage.toLowerCase();

    if (lowerMessage.includes('–±–∏–∑–Ω–µ—Å') || lowerMessage.includes('–∫–æ–º–ø–∞–Ω')) {
        return [
            "üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω",
            "üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", 
            "üîß –£—Å–ª—É–≥–∏",
            "üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
            "üíº –î—Ä—É–≥–æ–µ"
        ];
    }

    if (lowerMessage.includes('–∑–∞–¥–∞—á') || lowerMessage.includes('—Ñ—É–Ω–∫—Ü')) {
        return [
            "üìû –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã",
            "üõí –ü—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã", 
            "üìù –°–æ–±–∏—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏",
            "üìÖ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞ —É—Å–ª—É–≥–∏",
            "üí∞ –ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã"
        ];
    }

    if (lowerMessage.includes('–∏–Ω—Ç–µ–≥—Ä–∞—Ü') || lowerMessage.includes('–ø–æ–¥–∫–ª—é—á')) {
        return [
            "‚úÖ –ù—É–∂–Ω–∞ CRM",
            "üí≥ –ù—É–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞",
            "üìß –ù—É–∂–Ω–∞ –ø–æ—á—Ç–∞", 
            "‚ùå –ü–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ"
        ];
    }

    if (lowerMessage.includes('–≥–æ—Ç–æ–≤') || lowerMessage.includes('—Å—Ñ–æ—Ä–º–∏—Ä')) {
        return [
            "üìã –°–æ–∑–¥–∞—Ç—å –¢–ó —Å–µ–π—á–∞—Å",
            "üí° –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏",
            "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"
        ];
    }

    return [];
}

// Fallback –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI
function getFallbackResponse(userMessage) {
    const lowerInput = userMessage.toLowerCase();

    const responses = {
        '–º–∞–≥–∞–∑–∏–Ω': '–ü–æ–Ω—è–ª! –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω. –ö–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–µ—Ç–µ? –ù—É–∂–Ω—ã –ª–∏ –∫–∞—Ç–∞–ª–æ–≥, –∫–æ—Ä–∑–∏–Ω–∞ –∏ –æ–ø–ª–∞—Ç–∞?',
        '–æ–±—Ä–∞–∑–æ–≤–∞–Ω': '–û—Ç–ª–∏—á–Ω–æ! –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ñ–µ—Ä–∞. –û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã –∏–ª–∏ —à–∫–æ–ª–∞? –ù—É–∂–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏?',
        '—É—Å–ª—É–≥': '–Ø—Å–Ω–æ! –°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥. –ö–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ —É—Å–ª—É–≥–∏? –ù—É–∂–Ω–∞ –ª–∏ –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤?',
        '–Ω–µ–¥–≤–∏–∂–∏–º': '–ü–æ–Ω—è—Ç–Ω–æ! –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å. –ü—Ä–æ–¥–∞–∂–∞ –∏–ª–∏ –∞—Ä–µ–Ω–¥–∞? –ù—É–∂–µ–Ω –ª–∏ –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏?',
        '–∑–∞–∫–∞–∑': '–•–æ—Ä–æ—à–æ! –ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤. –ù—É–∂–Ω—ã –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏?',
        '–≤–æ–ø—Ä–æ—Å': '–Ø—Å–Ω–æ! FAQ-–±–æ—Ç. –ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —á–∞—â–µ –∑–∞–¥–∞—é—Ç? –ù—É–∂–Ω–∞ –ª–∏ —Å–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º?'
    };

    for (let key in responses) {
        if (lowerInput.includes(key)) {
            return responses[key];
        }
    }

    return getRandomPrompt();
}

// Endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¢–ó
app.post('/api/generate-specification', async (req, res) => {
    try {
        const { conversation, sessionId } = req.body;

        if (!conversation || conversation.length < 3) {
            return res.status(400).json({
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó'
            });
        }

        const specPrompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è Telegram-–±–æ—Ç–∞.

–î–∏–∞–ª–æ–≥: ${conversation.map(msg => `${msg.role}: ${msg.content}`).join('\n')}

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
    "business_type": "–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞",
    "main_tasks": ["–ó–∞–¥–∞—á–∞ 1", "–ó–∞–¥–∞—á–∞ 2"],
    "target_audience": "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è", 
    "key_features": ["–§—É–Ω–∫—Ü–∏—è 1", "–§—É–Ω–∫—Ü–∏—è 2", "–§—É–Ω–∫—Ü–∏—è 3"],
    "integrations": ["–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è 1"],
    "ai_level": "–£—Ä–æ–≤–µ–Ω—å –ò–ò",
    "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
    "success_metrics": ["–ú–µ—Ç—Ä–∏–∫–∞ 1", "–ú–µ—Ç—Ä–∏–∫–∞ 2"]
}

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

        const axiosConfigSpec = {
            headers: {
                'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                'Content-Type': 'application/json'
            },
            timeout: 30000
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if (proxyAgent) {
            axiosConfigSpec.httpsAgent = proxyAgent;
            console.log('üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó');
        }

        const response = await axios.post(
            OPENAI_CONFIG.endpoint,
            {
                model: OPENAI_CONFIG.model,
                messages: [
                    { role: 'system', content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON.' },
                    { role: 'user', content: specPrompt }
                ],
                max_tokens: 500,
                temperature: 0.3
            },
            axiosConfigSpec
        );

        const specText = response.data.choices[0]?.message?.content;
        
        try {
            const specification = JSON.parse(specText);
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¢–ó –≤ MongoDB
            if (sessionId && Conversation) {
                await Conversation.findOneAndUpdate(
                    { sessionId },
                    { specification: specification }
                );
            }
            
            // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó
            if (Analytics) {
                await Analytics.create({
                    event: 'specification_created',
                    data: { sessionId, businessType: specification.business_type },
                    ip: req.ip
                });
            }
            
            res.json({
                success: true,
                specification: specification
            });
        } catch (e) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, —Å–æ–∑–¥–∞–µ–º fallback
            const fallbackSpec = createFallbackSpec(conversation);
            res.json({
                success: true,
                specification: fallbackSpec
            });
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó:', error.message);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¢–ó',
            specification: createFallbackSpec(req.body.conversation)
        });
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –¢–ó
function createFallbackSpec(conversation) {
    const text = conversation.map(msg => msg.content).join(' ').toLowerCase();
    
    return {
        title: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π Telegram-–±–æ—Ç",
        business_type: "–ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫–ª–∏–µ–Ω—Ç–∞",
        main_tasks: ["–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ–±—â–µ–Ω–∏—è", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"],
        target_audience: "–ö–ª–∏–µ–Ω—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏",
        key_features: [
            "–£–º–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏",
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥", 
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏"
        ],
        integrations: ["–ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é"],
        ai_level: "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π",
        description: "–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞ –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞",
        success_metrics: ["–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏", "–°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É"]
    };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
app.get('/api/analytics/summary', async (req, res) => {
    try {
        if (!Analytics) {
            return res.json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' });
        }
        
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const [totalConversations, todayConversations, specificationsCreated] = await Promise.all([
            Analytics.countDocuments({ event: 'conversation_started' }),
            Analytics.countDocuments({ 
                event: 'conversation_started',
                timestamp: { $gte: today }
            }),
            Analytics.countDocuments({ event: 'specification_created' })
        ]);
        
        res.json({
            totalConversations,
            todayConversations,
            specificationsCreated,
            conversionRate: totalConversations > 0 ? (specificationsCreated / totalConversations * 100).toFixed(1) : 0
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏' });
    }
});

// ===== ENDPOINT –î–õ–Ø –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô =====
app.post('/api/voice-message', upload.single('audio'), async (req, res) => {
    try {
        console.log('üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        
        if (!req.file) {
            return res.status(400).json({ 
                error: '–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }

        const { sessionId } = req.body;
        
        // –î–ª—è –¥–µ–º–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        // –í production –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ Whisper API
        const simulatedTexts = [
            '–Ω—É–∂–µ–Ω –±–æ—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞',
            '—Ö–æ—á—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤',
            '–Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º'
        ];
        
        const transcription = simulatedTexts[Math.floor(Math.random() * simulatedTexts.length)];
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try {
            await fs.unlink(req.file.path);
        } catch (e) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª:', e);
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        const quickTask = analyzeQuickTask(transcription);
        
        res.json({
            success: true,
            transcription: transcription,
            quickTask: quickTask,
            businessFeatures: quickTask?.businessValue,
            message: quickTask ? generateQuickResponse(quickTask) : null
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞:', error);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
            fallback: true 
        });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
app.get('/api/health', (req, res) => {
    res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        service: 'CreateBot GPT Assistant v2.0',
        features: {
            mongodb: !!mongoose.connection.readyState,
            telegram: !!bot,
            cache: cache.getStats(),
            encryption: !!process.env.ENCRYPTION_KEY,
            proxy: !!proxyAgent ? `${PROXY_CONFIG.host}:${PROXY_CONFIG.port}` : 'disabled'
        }
    });
});

// ===== ENDPOINT –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –°–ú–ï–¢ =====
app.get('/api/estimates/stats', async (req, res) => {
    try {
        if (!Estimate) {
            return res.json({
                total: 0,
                approved: 0,
                pending: 0,
                rejected: 0,
                approvalRate: '0%'
            });
        }

        const total = await Estimate.countDocuments();
        const approved = await Estimate.countDocuments({ status: 'approved' });
        const pending = await Estimate.countDocuments({ status: 'pending' });
        const rejected = await Estimate.countDocuments({ status: 'rejected' });
        
        res.json({
            total,
            approved,
            pending,
            rejected,
            approvalRate: total > 0 ? (approved / total * 100).toFixed(1) + '%' : '0%'
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
    }
});

// ===== ENDPOINT –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–ü–ò–°–ö–ê –°–ú–ï–¢ =====
app.get('/api/estimates', async (req, res) => {
    try {
        if (!Estimate) {
            return res.json([]);
        }

        const estimates = await Estimate.find()
            .sort({ createdAt: -1 })
            .limit(50);
        
        res.json(estimates);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ—Ç:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ—Ç' });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
    res.status(500).json({
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        success: false
    });
});

const PORT = process.env.PORT || 3001;

app.listen(PORT, () => {
    console.log(`üöÄ GPT Assistant Server v2.0 –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üîó Health check: http://localhost:${PORT}/api/health`);
    
    if (!process.env.OPENAI_API_KEY) {
        console.warn('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENAI_API_KEY!');
    }
    
    if (!process.env.MONGODB_URI) {
        console.warn('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω MONGODB_URI!');
    }
    
    if (!process.env.TELEGRAM_BOT_TOKEN) {
        console.warn('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN!');
    }
});

module.exports = app;
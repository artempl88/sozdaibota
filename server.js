// server.js - –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const axios = require('axios');
const mongoose = require('mongoose');
const TelegramBot = require('node-telegram-bot-api');
const NodeCache = require('node-cache');
const crypto = require('crypto');
const { HttpsProxyAgent } = require('https-proxy-agent');
const fetch = require('node-fetch');
const FormData = require('form-data');
const multer = require('multer');
const fs = require('fs').promises;
const fsSync = require('fs'); // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è createReadStream
require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –∞–Ω–∫–µ—Ç—ã
const PreChatForm = require('./models/PreChatForm');
const PreChatService = require('./services/PreChatService');

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–∫–µ—Ç–∞–º–∏
const preChatService = new PreChatService();

const PRICING_SYSTEM = {
    hourlyRate: 2000,
    minProjectCost: 15000, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞

    // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç–∏–ø–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–≤ —á–∞—Å–∞—Ö)
    baseComponents: {
        '–±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–æ—Ç–∞': 8,
        '—Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–∞–Ω–¥ –∏ –º–µ–Ω—é': 4,
        '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API Telegram': 2,
        '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π': 6,
        '–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å': 12,
        '—Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è': 3,
        '–¥–µ–ø–ª–æ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞': 4
    },
    
    // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏
    features: {
        // E-commerce
        '–∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤': 12,
        '–∫–æ—Ä–∑–∏–Ω–∞': 8,
        '–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞': 6,
        '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π': 10,
        '—Å–∏—Å—Ç–µ–º–∞ —Å–∫–∏–¥–æ–∫': 6,
        '–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏': 8,
        
        // –ó–∞–ø–∏—Å–∏ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        '–∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–ø–∏—Å–∏': 10,
        '–≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞': 6,
        '–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è': 4,
        '–æ—Ç–º–µ–Ω–∞/–ø–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏': 4,
        '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM': 12,
        
        // AI –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è GPT': 8,
        '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π': 10,
        '—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞': 12,
        '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤': 8,
        '–¥–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏': 16,
        
        // –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        '—Ä–∞—Å—Å—ã–ª–∫–∏': 6,
        '–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è': 8,
        '–º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å': 10,
        '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è': 4,
        
        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ
        '–Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞': 20,
        '—Ä–∞—Å—á–µ—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞': 16,
        '–∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏': 12,
        '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ñ–æ—Ç–æ': 24
    },
    
    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    complexity: {
        '–ø—Ä–æ—Å—Ç–æ–π': 1.0,
        '—Å—Ä–µ–¥–Ω–∏–π': 1.3,
        '—Å–ª–æ–∂–Ω—ã–π': 1.6,
        '–æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π': 2.0
    },
    
    // –°—Ä–æ—á–Ω–æ—Å—Ç—å
    urgency: {
        '—Å—Ç–∞–Ω–¥–∞—Ä—Ç': 1.0,
        '—Å—Ä–æ—á–Ω–æ': 1.3,
        '–æ—á–µ–Ω—å —Å—Ä–æ—á–Ω–æ': 1.5
    }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
const upload = multer({ 
    dest: 'uploads/',
    limits: { fileSize: 10 * 1024 * 1024 }, // 10MB –º–∞–∫—Å–∏–º—É–º
    fileFilter: (req, file, cb) => {
        // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
        const allowedTypes = ['audio/webm', 'audio/ogg', 'audio/wav', 'audio/mp3'];
        if (allowedTypes.includes(file.mimetype)) {
            cb(null, true);
        } else {
            cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ'));
        }
    }
});

// –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ GPT-4
async function calculateProjectEstimate(requirements, conversation) {
    try {
        // –ü—Ä–æ–º–ø—Ç –¥–ª—è GPT-4 –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
        const estimationPrompt = `–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Ç–µ—Ö–ª–∏–¥ —Å 10+ –ª–µ—Ç –æ–ø—ã—Ç–∞ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ Telegram-–±–æ—Ç–æ–≤.

–ó–ê–î–ê–ß–ê: –û—Ü–µ–Ω–∏ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ —á–∞—Å–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.

–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê:
${requirements}

–ë–ê–ó–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ (—á–∞—Å—ã):
${JSON.stringify(PRICING_SYSTEM.baseComponents, null, 2)}

–¢–ò–ü–û–í–´–ï –§–£–ù–ö–¶–ò–ò (—á–∞—Å—ã):
${JSON.stringify(PRICING_SYSTEM.features, null, 2)}

–ü–†–ê–í–ò–õ–ê –û–¶–ï–ù–ö–ò:
1. –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ - –∏—Å–ø–æ–ª—å–∑—É–π –≥–æ—Ç–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
2. –î–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π - –æ—Ü–µ–Ω–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
3. –£—á—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏
4. –î–æ–±–∞–≤—å 20% –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫—É
5. –î–æ–±–∞–≤—å 10% –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{
    "projectName": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
    "components": [
        {"name": "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", "hours": 10, "description": "–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç"}
    ],
    "totalHours": 100,
    "complexity": "—Å—Ä–µ–¥–Ω–∏–π",
    "risks": ["—Ä–∏—Å–∫ 1", "—Ä–∏—Å–∫ 2"],
    "timeline": "2-3 –Ω–µ–¥–µ–ª–∏",
    "recommendations": ["—Å–æ–≤–µ—Ç 1", "—Å–æ–≤–µ—Ç 2"]
}`;

        const response = await axios.post(
            'https://api.openai.com/v1/chat/completions',
            {
                model: 'gpt-4-0125-preview', // GPT-4 –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
                messages: [
                    { role: 'system', content: estimationPrompt },
                    { role: 'user', content: `–û—Ü–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç: ${requirements}` }
                ],
                response_format: { type: "json_object" },
                max_tokens: 1000,
                temperature: 0.3 // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            },
            {
                headers: {
                    'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                    'Content-Type': 'application/json'
                },
                httpsAgent: proxyAgent
            }
        );

        const estimate = JSON.parse(response.data.choices[0].message.content);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        const detectedFeatures = parseRequirements(requirements);
        
        // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        const cost = estimate.totalHours * PRICING_SYSTEM.hourlyRate;
        
        return {
            ...estimate,
            hourlyRate: PRICING_SYSTEM.hourlyRate,
            totalCost: cost,
            detectedFeatures: detectedFeatures, // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º
            costBreakdown: estimate.components.map(c => ({
                ...c,
                cost: c.hours * PRICING_SYSTEM.hourlyRate
            }))
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ GPT-4:', error);
        // Fallback –Ω–∞ –±–∞–∑–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
        return fallbackEstimate(requirements);
    }
}

// –†–µ–∑–µ—Ä–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑ GPT-4
function fallbackEstimate(requirements) {
    const lower = requirements.toLowerCase();
    let totalHours = 0;
    let components = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    Object.entries(PRICING_SYSTEM.baseComponents).forEach(([name, hours]) => {
        totalHours += hours;
        components.push({ name, hours, cost: hours * PRICING_SYSTEM.hourlyRate });
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    const detectedFeatures = [];
    Object.entries(PRICING_SYSTEM.features).forEach(([feature, hours]) => {
        if (lower.includes(feature.split(' ')[0])) {
            totalHours += hours;
            detectedFeatures.push(feature);
            components.push({ 
                name: feature, 
                hours, 
                cost: hours * PRICING_SYSTEM.hourlyRate 
            });
        }
    });
    
    // –ú–∏–Ω–∏–º—É–º 40 —á–∞—Å–æ–≤ –Ω–∞ –ª—é–±–æ–π –ø—Ä–æ–µ–∫—Ç
    totalHours = Math.max(totalHours, 40);
    
    return {
        projectName: 'Telegram-–±–æ—Ç',
        components,
        totalHours,
        totalCost: totalHours * PRICING_SYSTEM.hourlyRate,
        complexity: '—Å—Ä–µ–¥–Ω–∏–π',
        timeline: `${Math.ceil(totalHours / 40)} –Ω–µ–¥–µ–ª—å`,
        detectedFeatures: detectedFeatures // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    };
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã
function formatEstimateMessage(estimate) {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    const totalCost = Number(estimate.totalCost) || 0;
    const totalHours = Number(estimate.totalHours) || 0;
    
    return `üí∞ **–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞**

üìã **${estimate.projectName}**

‚è±Ô∏è **–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:** ${totalHours} —á–∞—Å–æ–≤ (${estimate.timeline})

üíµ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** ${totalCost.toLocaleString('ru-RU')} —Ä—É–±.
*–ò–∑ —Ä–∞—Å—á–µ—Ç–∞ ${PRICING_SYSTEM.hourlyRate} —Ä—É–±/—á–∞—Å*

üìä **–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º:**
${estimate.costBreakdown && estimate.costBreakdown.length > 0 ? 
    estimate.costBreakdown.map(c => {
        const hours = Number(c.hours) || 0;
        const cost = Number(c.cost) || 0;
        return `‚Ä¢ ${c.name}: ${hours}—á = ${cost.toLocaleString('ru-RU')} —Ä—É–±.`;
    }).join('\n') : '–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}

‚ö° **–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞:** ${estimate.complexity}

${estimate.risks && estimate.risks.length > 0 ? 
`‚ö†Ô∏è **–†–∏—Å–∫–∏:**
${estimate.risks.map(r => `‚Ä¢ ${r}`).join('\n')}` : ''}

${estimate.recommendations && estimate.recommendations.length > 0 ?
`üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
${estimate.recommendations.map(r => `‚Ä¢ ${r}`).join('\n')}` : ''}

---
‚úÖ –≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –Ω–∞ ¬±15% –ø–æ—Å–ª–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¢–ó.`;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –¥–∏–∞–ª–æ–≥–∞
function extractRequirements(conversation) {
    return conversation
        .filter(msg => msg.role === 'user' || msg.role === 'assistant')
        .map(msg => msg.content)
        .join('\n');
}

const app = express();
const PORT = process.env.PORT || 3001;

// –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
app.use((req, res, next) => {
    res.set({
        'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0',
        'Surrogate-Control': 'no-store'
    });
    next();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Express
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));
app.use(express.static(__dirname));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ (10 –º–∏–Ω—É—Ç TTL)
const cache = new NodeCache({ stdTTL: 600 });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
let bot;
if (process.env.TELEGRAM_BOT_TOKEN) {
    bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
    console.log('üì± Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    setupTelegramHandlers();
} else {
    console.log('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
if (process.env.MONGODB_URI) {
    mongoose.connect(process.env.MONGODB_URI)
        .then(() => console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
        .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB:', err));
} else {
    console.log('‚ö†Ô∏è MONGODB_URI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

// –°—Ö–µ–º—ã MongoDB
const ConversationSchema = new mongoose.Schema({
    sessionId: String,
    messages: [{
        role: String,
        content: String,
        timestamp: { type: Date, default: Date.now }
    }],
    specification: Object,
    createdAt: { type: Date, default: Date.now }
});

const AnalyticsSchema = new mongoose.Schema({
    event: String,
    data: Object,
    timestamp: { type: Date, default: Date.now },
    ip: String,
    userAgent: String
});

const Conversation = mongoose.model('Conversation', ConversationSchema);
const Analytics = mongoose.model('Analytics', AnalyticsSchema);

// ===== –°–•–ï–ú–ê –î–õ–Ø –°–ú–ï–¢ =====
const EstimateSchema = new mongoose.Schema({
    sessionId: String,
    projectName: String,
    components: Array,
    totalHours: Number,
    totalCost: Number,
    status: {
        type: String,
        enum: ['pending', 'approved', 'rejected'],
        default: 'pending'
    },
    clientInfo: Object,
    detectedFeatures: Array,
    timeline: String,
    createdAt: { type: Date, default: Date.now }
});

const Estimate = mongoose.model('Estimate', EstimateSchema);

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å Helmet (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'", "https://cdnjs.cloudflare.com"],
            scriptSrcAttr: ["'unsafe-inline'"],
            styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
            fontSrc: ["'self'", "https://fonts.gstatic.com"],
            imgSrc: ["'self'", "data:", "https:", "blob:"],
            connectSrc: ["'self'", "https://api.openai.com", "ws:", "wss:", "http://localhost:3001"],
            mediaSrc: ["'self'", "blob:"],
            objectSrc: ["'none'"],
            frameSrc: ["'self'"],
            upgradeInsecureRequests: [],
        },
    },
    crossOriginEmbedderPolicy: false,
    contentSecurityPolicy: process.env.NODE_ENV === 'production' ? undefined : false, // –û—Ç–∫–ª—é—á–∞–µ–º CSP –≤ development
}));

// –£–ª—É—á—à–µ–Ω–Ω—ã–π CORS
const allowedOrigins = process.env.ALLOWED_ORIGINS 
    ? process.env.ALLOWED_ORIGINS.split(',')
    : ['https://sozdaibota.ru', 'https://www.sozdaibota.ru', 'http://localhost:3000'];

app.use(cors({
    origin: allowedOrigins,
    credentials: true
}));

// ===== –î–û–ë–ê–í–ò–¢–¨ –î–õ–Ø –û–¢–î–ê–ß–ò HTML =====
const path = require('path');

// –û—Ç–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(__dirname));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});
// ===== –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø =====

// Rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    max: 50, // –º–∞–∫—Å–∏–º—É–º 50 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
    message: {
        error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
    }
});

app.use('/api/', limiter);

// –§—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
const encryptData = (text) => {
    if (!process.env.ENCRYPTION_KEY) return text;
    const cipher = crypto.createCipher('aes-256-cbc', process.env.ENCRYPTION_KEY);
    let encrypted = cipher.update(text, 'utf8', 'hex');
    encrypted += cipher.final('hex');
    return encrypted;
};

const decryptData = (encryptedText) => {
    if (!process.env.ENCRYPTION_KEY) return encryptedText;
    try {
        const decipher = crypto.createDecipher('aes-256-cbc', process.env.ENCRYPTION_KEY);
        let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
        decrypted += decipher.final('utf8');
        return decrypted;
    } catch (e) {
        return encryptedText;
    }
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI
const OPENAI_CONFIG = {
    apiKey: process.env.OPENAI_API_KEY,
    model: 'gpt-4o-mini',
    endpoint: 'https://api.openai.com/v1/chat/completions'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const PROXY_CONFIG = {
    host: process.env.PROXY_HOST || '141.98.187.117',
    port: process.env.PROXY_PORT || '8000',
    username: process.env.PROXY_USERNAME || 'qr4NBX',
    password: process.env.PROXY_PASSWORD || 'mFmLGN'
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏-–∞–≥–µ–Ω—Ç–∞
let proxyAgent = null;
if (PROXY_CONFIG.host && PROXY_CONFIG.port && PROXY_CONFIG.username && PROXY_CONFIG.password) {
    proxyAgent = new HttpsProxyAgent(
        `http://${PROXY_CONFIG.username}:${PROXY_CONFIG.password}@${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`
    );
    console.log(`üîó –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`);
} else {
    console.warn('‚ö†Ô∏è  –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä preChatService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞

// –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∞–∑–æ–≤—ã–π –∏–∑ PreChatService
const ENHANCED_SYSTEM_PROMPT = `${preChatService.baseSystemPrompt}

–ö–û–ù–¢–ï–ö–°–¢: –û–±—ã—á–Ω—ã–π —á–∞—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç (–±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∫–µ—Ç—ã)

–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è:
"–≥–∞–¥–∞—é –ø–æ –ª–∞–¥–æ–Ω–∏" ‚Üí "–ù–∞—á–Ω—ë–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ: –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–æ—Ç–æ –ª–∞–¥–æ–Ω–µ–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤?"
"–ø—Ä–æ–¥–∞—é –∫—É—Ä—Å—ã" ‚Üí "–ü–æ–Ω—è–ª! –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º: –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å—ã –∏–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º?"

–í–ê–ñ–ù–û:
- –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ–ø–∏—Å–∞–ª –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –Ω–∏—à—É - –Ω–µ —Ç–µ—Ä—è–π—Å—è, –∑–∞–¥–∞–π 1-2 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞
- –ü–æ—Å–ª–µ 3-4 —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º
- –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞—Å—á–µ—Ç–∞ –°–¢–†–û–ì–û —Å–ª–µ–¥—É–π –∞–ª–≥–æ—Ä–∏—Ç–º—É –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º—Ç–∞: –ø–æ–¥—ã—Ç–æ–∂—å ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ ‚Üí —Å–æ–æ–±—â–∏ –æ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
- –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π —Ü–µ–Ω—ã –∏–ª–∏ —Å—É–º–º—ã –∫–ª–∏–µ–Ω—Ç—É –Ω–∞–ø—Ä—è–º—É—é`;

// A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
const PROMPT_VARIANTS = {
    A: "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –±–∏–∑–Ω–µ—Å–µ?",
    B: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞ 5 –º–∏–Ω—É—Ç —Å–æ–∑–¥–∞–º –¢–ó –Ω–∞ –±–æ—Ç–∞. –ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ä–µ—à–∞–µ–º?"
};

const getRandomPrompt = () => {
    return Math.random() > 0.5 ? PROMPT_VARIANTS.A : PROMPT_VARIANTS.B;
};

// –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
app.post('/api/analytics', async (req, res) => {
    try {
        const { event, data } = req.body;
        
        if (Analytics) {
            await Analytics.create({
                event,
                data,
                timestamp: new Date(),
                ip: req.ip,
                userAgent: req.get('User-Agent')
            });
        }
        
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏' });
    }
});

// ===== –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ê–°–ß–ï–¢–ê –°–ú–ï–¢ =====

// –ü–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
function parseRequirements(text) {
    const lower = text.toLowerCase();
    const detectedFeatures = [];
    
    // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    const improvedPatterns = {
        // E-commerce
        '–∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤': /–∫–∞—Ç–∞–ª–æ–≥[–∞-—è\s]*—Ç–æ–≤–∞—Ä|—Ç–æ–≤–∞—Ä[–∞-—è\s]*–∫–∞—Ç–∞–ª–æ–≥|—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤|–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç/i,
        '–∫–æ—Ä–∑–∏–Ω–∞': /–∫–æ—Ä–∑–∏–Ω[–∞–µ—É]|–¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑|–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑|cart/i,
        '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π': /(–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è[–∞-—è\s]*)?–ø–ª–∞—Ç[–µ—ë]–∂|–æ–ø–ª–∞—Ç[–∞–µ—É]|payment|pay|–∫–∞—Å—Å[–∞–µ—É]/i,
        '—Å–∏—Å—Ç–µ–º–∞ —Å–∫–∏–¥–æ–∫': /—Å–∫–∏–¥–∫[–∞–∏–µ—É]|–ø—Ä–æ–º–æ–∫–æ–¥|discount|–∞–∫—Ü–∏[—è–∏]/i,
        '–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏': /–æ—Ç—Å–ª–µ–∂–∏–≤[–∞-—è]*–¥–æ—Å—Ç–∞–≤–∫|—Ç—Ä–µ–∫[–∞-—è]*–¥–æ—Å—Ç–∞–≤–∫|—Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏/i,
        
        // –ó–∞–ø–∏—Å–∏ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ  
        '–∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–ø–∏—Å–∏': /–∫–∞–ª–µ–Ω–¥–∞—Ä[—å—è–∏][–∞-—è\s]*–∑–∞–ø–∏—Å|–∑–∞–ø–∏—Å[–∞–µ–∏—å][–∞-—è\s]*–∫–∞–ª–µ–Ω–¥–∞—Ä|—Ä–∞—Å–ø–∏—Å–∞–Ω–∏[–µ—è]/i,
        '–≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞': /–≤—ã–±–æ—Ä[–∞-—è\s]*—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç|—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç[–∞-—è\s]*–≤—ã–±–æ—Ä|–º–∞—Å—Ç–µ—Ä[–∞-—è\s]*–≤—ã–±–æ—Ä/i,
        '–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è': /–Ω–∞–ø–æ–º–∏–Ω[–∞-—è]*|—É–≤–µ–¥–æ–º–ª–µ–Ω–∏[—è–µ–∏]|notification|reminder/i,
        '–æ—Ç–º–µ–Ω–∞/–ø–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏': /–æ—Ç–º–µ–Ω[–∞–µ—É][–∞-—è\s]*–∑–∞–ø–∏—Å|–ø–µ—Ä–µ–Ω–æ—Å[–∞-—è\s]*–∑–∞–ø–∏—Å|–æ—Ç–ª–æ–∂–∏—Ç—å/i,
        '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM': /crm|–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è[–∞-—è\s]*crm|—Å–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞/i,
        
        // AI –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è GPT': /gpt|chatgpt|ai|–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç|—É–º–Ω[—ã–∞—è–æ–µ][–∞-—è\s]*–±–æ—Ç/i,
        '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π': /–æ–±—Ä–∞–±–æ—Ç–∫[–∞–µ—É][–∞-—è\s]*–∏–∑–æ–±—Ä–∞–∂–µ–Ω|—Ñ–æ—Ç–æ[–∞-—è\s]*–æ–±—Ä–∞–±–æ—Ç–∫|–∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ/i,
        '—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞': /—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω[–∞-—è]*–≥–æ–ª–æ—Å|–≥–æ–ª–æ—Å[–∞-—è\s]*—Ä–∞—Å–ø–æ–∑–Ω–∞–≤|voice recognition/i,
        '–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤': /–≥–µ–Ω–µ—Ä–∞—Ü[–∞-—è]*–æ—Ç—á—ë—Ç|—Å–æ–∑–¥–∞–Ω[–∞-—è]*–æ—Ç—á—ë—Ç|–æ—Ç—á—ë—Ç–Ω–æ—Å—Ç/i,
        '–¥–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏': /–¥–∞—à–±–æ—Ä–¥|dashboard|–∞–Ω–∞–ª–∏—Ç–∏–∫[–∞–µ—É]|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫[–∞–µ—É]/i,
        
        // –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        '—Ä–∞—Å—Å—ã–ª–∫–∏': /—Ä–∞—Å—Å—ã–ª–∫[–∞–µ–∏—É]|–º–∞—Å—Å–æ–≤[–∞-—è]*–æ—Ç–ø—Ä–∞–≤–∫|newsletter|mailing/i,
        '–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è': /–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü[–∞-—è]*|–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω[–∞-—è]*–ø–æ–¥—Ö–æ–¥|personalization/i,
        '–º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å': /–º–Ω–æ–≥–æ—è–∑—ã—á–Ω[–∞-—è]*|–º—É–ª—å—Ç–∏—è–∑—ã—á–Ω[–∞-—è]*|–ø–µ—Ä–µ–≤–æ–¥|translation/i,
        '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è': /—É–≤–µ–¥–æ–º–ª–µ–Ω–∏[—è–µ–∏]|–ø—É—à[–∞-—è\s]*—É–≤–µ–¥–æ–º–ª–µ–Ω–∏/i,
        
        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        '–Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞': /–Ω–∞—Ç–∞–ª—å–Ω[–∞-—è]*–∫–∞—Ä—Ç|–∫–∞—Ä—Ç[–∞–µ—É][–∞-—è\s]*—Ä–æ–∂–¥–µ–Ω/i,
        '—Ä–∞—Å—á–µ—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞': /–≥–æ—Ä–æ—Å–∫–æ–ø|–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫[–∞-—è]*—Ä–∞—Å—á—ë—Ç|–ø—Ä–æ–≥–Ω–æ–∑[–∞-—è\s]*–∑–≤—ë–∑–¥/i,
        '–∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏': /—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç[—å–∏]|–ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫[–∞-—è]*–∞–Ω–∞–ª–∏–∑|compatibility/i,
        '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ñ–æ—Ç–æ': /–∞–Ω–∞–ª–∏–∑[–∞-—è\s]*–ø–æ —Ñ–æ—Ç–æ|—Ñ–æ—Ç–æ[–∞-—è\s]*–∞–Ω–∞–ª–∏–∑|–∑–∞–≥—Ä—É–∑[–∞-—è]*—Ñ–æ—Ç–æ/i
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    Object.entries(improvedPatterns).forEach(([feature, pattern]) => {
        if (pattern.test(text)) {
            detectedFeatures.push(feature);
        }
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ PRICING_SYSTEM
    Object.keys(PRICING_SYSTEM.features).forEach(feature => {
        if (!detectedFeatures.includes(feature)) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤ (–Ω–µ —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ)
            const featureWords = feature.toLowerCase().split(' ');
            const textWords = lower.split(/\s+/);
            
            // –§—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –µ—Å–ª–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–µ–∫—Å—Ç–µ
            const foundAllWords = featureWords.every(word => 
                textWords.some(textWord => textWord.includes(word) && word.length > 2)
            );
            
            if (foundAllWords) {
                detectedFeatures.push(feature);
            }
        }
    });
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    return [...new Set(detectedFeatures)];
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–º–µ—Ç—ã –≤ Telegram
async function sendEstimateToTelegram(estimate, sessionId) {
    if (!bot || !process.env.ADMIN_CHAT_ID) {
        console.log('‚ö†Ô∏è Telegram –±–æ—Ç –∏–ª–∏ ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        return;
    }
    
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        const saved = await Estimate.create({
            sessionId,
            ...estimate
        });
        
        // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ detectedFeatures
        const detectedFeatures = estimate.detectedFeatures || [];
        const components = estimate.components || [];
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        const safeTotalCost = Number(estimate.totalCost) || 0;
        const safeTotalHours = Number(estimate.totalHours) || 0;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = 
            `üìä **–ù–û–í–ê–Ø –°–ú–ï–¢–ê**\n\n` +
            `üÜî ID: ${saved._id}\n` +
            `üí∞ **–ò–¢–û–ì–û: ${safeTotalCost.toLocaleString('ru-RU')} ‚ÇΩ**\n` +
            `‚è±Ô∏è –í—Ä–µ–º—è: ${safeTotalHours} —á–∞—Å–æ–≤\n` +
            `üìÖ –°—Ä–æ–∫: ${safeTotalHours} —á–∞—Å–æ–≤\n\n` +
            (detectedFeatures.length > 0 ? 
                `üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n${detectedFeatures.map(f => `‚Ä¢ ${f}`).join('\n')}\n\n` : 
                'üìã –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞\n\n'
            ) +
            `üíº –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:\n` +
            components.slice(0, 5).map(c => `‚Ä¢ ${c.name}: ${c.hours}—á`).join('\n');
        
        // –ö–Ω–æ–ø–∫–∏
        const keyboard = {
            inline_keyboard: [[
                { text: '‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `approve:${saved._id}` },
                { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: `edit:${saved._id}` },
                { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject:${saved._id}` }
            ]]
        };
        
        await bot.sendMessage(
            process.env.ADMIN_CHAT_ID,
            message,
            { 
                parse_mode: 'Markdown',
                reply_markup: keyboard
            }
        );
        
        console.log(`üìä –°–º–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram: ${saved._id}`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
function setupTelegramHandlers() {
    if (!bot) return;
    
    bot.on('callback_query', async (query) => {
        try {
            const [action, estimateId] = query.data.split(':');
            
            if (action === 'approve') {
                const approvedEstimate = await Estimate.findByIdAndUpdate(
                    estimateId, 
                    { status: 'approved' },
                    { new: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–º–µ—Ç—É
                );
                
                bot.answerCallbackQuery(query.id, { text: '‚úÖ –°–º–µ—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!' });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                bot.editMessageText(
                    query.message.text + '\n\n‚úÖ **–°–ú–ï–¢–ê –£–¢–í–ï–†–ñ–î–ï–ù–ê**',
                    {
                        chat_id: query.message.chat.id,
                        message_id: query.message.message_id,
                        parse_mode: 'Markdown'
                    }
                );

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–º–µ—Ç—É –∫–ª–∏–µ–Ω—Ç—É
                try {
                    if (approvedEstimate && approvedEstimate.sessionId) {
                        const response = await axios.post(`http://localhost:${PORT || 3001}/api/send-approved-estimate`, {
                            estimateId: estimateId,
                            sessionId: approvedEstimate.sessionId
                        });
                        
                        if (response.data.success) {
                            bot.sendMessage(
                                query.message.chat.id,
                                `üöÄ **–°–ú–ï–¢–ê –û–¢–ü–†–ê–í–õ–ï–ù–ê –ö–õ–ò–ï–ù–¢–£**\n\n` +
                                `–ö–∞–Ω–∞–ª—ã: ${response.data.sentChannels.join(', ') || '–≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'}`,
                                { parse_mode: 'Markdown' }
                            );
                        }
                    }
                } catch (sendError) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç—É:', sendError);
                    bot.sendMessage(
                        query.message.chat.id,
                        '‚ö†Ô∏è –°–º–µ—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
                    );
                }
                
            } else if (action === 'reject') {
                await Estimate.findByIdAndUpdate(estimateId, { status: 'rejected' });
                bot.answerCallbackQuery(query.id, { text: '‚ùå –°–º–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞' });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                bot.editMessageText(
                    query.message.text + '\n\n‚ùå **–°–ú–ï–¢–ê –û–¢–ö–õ–û–ù–ï–ù–ê**',
                    {
                        chat_id: query.message.chat.id,
                        message_id: query.message.message_id,
                        parse_mode: 'Markdown'
                    }
                );
                
            } else if (action === 'edit') {
                bot.answerCallbackQuery(query.id, { text: '‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã' });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
                bot.sendMessage(
                    query.message.chat.id,
                    `‚úèÔ∏è **–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–ú–ï–¢–´**\n\n` +
                    `ID —Å–º–µ—Ç—ã: ${estimateId}\n\n` +
                    `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
                    `\`/edit ${estimateId} [–Ω–æ–≤–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å] [–Ω–æ–≤–æ–µ_–≤—Ä–µ–º—è_—á–∞—Å–æ–≤] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]\`\n\n` +
                    `–ü—Ä–∏–º–µ—Ä:\n` +
                    `\`/edit ${estimateId} 75000 60 –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM\``,
                    { parse_mode: 'Markdown' }
                );
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
            bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
        }
    });

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ—Ç
    bot.onText(/\/edit (\w+) (\d+) (\d+) (.+)/, async (msg, match) => {
        try {
            const chatId = msg.chat.id;
            const [, estimateId, newCost, newHours, comment] = match;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–º–µ—Ç—É
            const updatedEstimate = await Estimate.findByIdAndUpdate(
                estimateId,
                {
                    totalCost: parseInt(newCost),
                    totalHours: parseInt(newHours),
                    status: 'approved',
                    editComment: comment,
                    editedAt: new Date()
                },
                { new: true }
            );
            
            if (updatedEstimate) {
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                const safeNewCost = Number(newCost) || 0;
                
                bot.sendMessage(
                    chatId,
                    `‚úÖ **–°–ú–ï–¢–ê –û–¢–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ê –ò –£–¢–í–ï–†–ñ–î–ï–ù–ê**\n\n` +
                    `üÜî ID: ${estimateId}\n` +
                    `üí∞ –ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${safeNewCost.toLocaleString('ru-RU')} ‚ÇΩ\n` +
                    `‚è±Ô∏è –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: ${newHours} —á–∞—Å–æ–≤\n` +
                    `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}\n\n` +
                    `üöÄ –°–º–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É!`,
                    { parse_mode: 'Markdown' }
                );

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–º–µ—Ç—É –∫–ª–∏–µ–Ω—Ç—É
                try {
                    if (updatedEstimate.sessionId) {
                        const response = await axios.post(`http://localhost:${PORT || 3001}/api/send-approved-estimate`, {
                            estimateId: estimateId,
                            sessionId: updatedEstimate.sessionId
                        });
                        
                        if (response.data.success) {
                            bot.sendMessage(
                                chatId,
                                `üì§ **–û–¢–ü–†–ê–í–õ–ï–ù–û –ö–õ–ò–ï–ù–¢–£**\n\n` +
                                `–ö–∞–Ω–∞–ª—ã: ${response.data.sentChannels.join(', ') || '–≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'}`,
                                { parse_mode: 'Markdown' }
                            );
                        }
                    }
                } catch (sendError) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–º–µ—Ç—ã:', sendError);
                    bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–º–µ—Ç—É –∫–ª–∏–µ–Ω—Ç—É');
                }
                
            } else {
                bot.sendMessage(chatId, '‚ùå –°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ—Ç—ã:', error);
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–º–µ—Ç—ã');
        }
    });
    
    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è Telegram –±–æ—Ç–∞
    bot.onText(/\/stats/, async (msg) => {
        try {
            const chatId = msg.chat.id;
            
            const total = await Estimate.countDocuments();
            const approved = await Estimate.countDocuments({ status: 'approved' });
            const pending = await Estimate.countDocuments({ status: 'pending' });
            const rejected = await Estimate.countDocuments({ status: 'rejected' });
            
            const statsMessage = 
                `üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ú–ï–¢**\n\n` +
                `üìã –í—Å–µ–≥–æ: ${total}\n` +
                `‚úÖ –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: ${approved}\n` +
                `‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${pending}\n` +
                `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${rejected}\n\n` +
                `üíØ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${total > 0 ? (approved / total * 100).toFixed(1) : 0}%`;
            
            bot.sendMessage(chatId, statsMessage, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    });
    
    // –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    bot.onText(/\/debug/, async (msg) => {
        try {
            const chatId = msg.chat.id;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
            const mongoStatus = mongoose.connection.readyState === 1 ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞';
            const cacheStats = cache.getStats();
            
            let openaiStatus = '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            try {
                await axios.get('https://status.openai.com/', { timeout: 5000 });
                openaiStatus = '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω';
            } catch {
                openaiStatus = '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
            }
            
            const debugMessage = 
                `üîç **–û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø**\n\n` +
                `**–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**\n` +
                `MongoDB: ${mongoStatus}\n\n` +
                `**API –°–µ—Ä–≤–∏—Å—ã:**\n` +
                `OpenAI: ${openaiStatus}\n` +
                `–ü—Ä–æ–∫—Å–∏: ${proxyAgent ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n\n` +
                `**–ö–µ—à:**\n` +
                `–ü–æ–ø–∞–¥–∞–Ω–∏–π: ${cacheStats.hits}\n` +
                `–ü—Ä–æ–º–∞—Ö–æ–≤: ${cacheStats.misses}\n` +
                `–ö–ª—é—á–µ–π: ${cacheStats.keys}\n\n` +
                `**–°–µ—Ä–≤–µ—Ä:**\n` +
                `–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(process.uptime() / 60)} –º–∏–Ω\n` +
                `–ü–∞–º—è—Ç—å: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)} MB`;
            
            bot.sendMessage(chatId, debugMessage, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
        }
    });
}

// ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ê–°–ß–ï–¢–ê =====
app.post('/api/gpt-assistant', async (req, res) => {
    try {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ GPT:', req.body);
        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /api/gpt-assistant');

        const { message, conversation = [], sessionId, mode } = req.body;
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
        if (mode === 'formulation' || message === 'FORMULATION_MODE_START') {
            console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏');
            return handleFormulationMode(req, res);
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!message || typeof message !== 'string') {
            console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
            return res.status(400).json({
                error: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
                success: false
            });
        }

        if (message.length > 1000) {
            console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
            return res.status(400).json({
                error: '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                success: false
            });
        }

        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–∞ —Å–º–µ—Ç—ã...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        const messageHash = crypto.createHash('md5').update(message + JSON.stringify(conversation)).digest('hex');
        const cachedResponse = cache.get(messageHash);
        if (cachedResponse) {
            console.log('üì¶ –û—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞');
            console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –û—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞ - —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–Ω—ã?', cachedResponse.message.includes('‚ÇΩ'));
            return res.json(cachedResponse);
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ MongoDB
        if (sessionId && Conversation) {
            try {
                await Conversation.findOneAndUpdate(
                    { sessionId },
                    {
                        $push: {
                            messages: { role: 'user', content: message }
                        }
                    },
                    { upsert: true }
                );
            } catch (dbError) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', dbError);
            }
        }

        // ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ê–°–ß–ï–¢–ê =====
        const allMessages = [...conversation, { role: 'user', content: message }];
        const fullText = allMessages.map(m => m.content).join(' ');
        
        // –£–ë–ò–†–ê–ï–ú –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ê–°–ß–ï–¢ –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –°–û–û–ë–©–ï–ù–ò–ô
        // –†–∞—Å—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ —è–≤–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
        
        // ===== –£–ú–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê–ú–ï–†–ï–ù–ò–Ø –ß–ï–†–ï–ó GPT =====
        console.log('üß† –û—Å–Ω–æ–≤–Ω–æ–π API - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ GPT...');
        
        const intentAnalysisPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–ï–°–¨ –ö–û–ù–¢–ï–ö–°–¢ –¥–∏–∞–ª–æ–≥–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ —Ä–∞—Å—á–µ—Ç—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏.

–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message}"

–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞: ${session.chatHistory.slice(-4).map(msg => `${msg.role}: ${msg.content}`).join('\n')}

–°–¢–†–û–ì–ò–ï –ö–†–ò–¢–ï–†–ò–ò –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "–î–ê":
1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ø–í–ù–û –ø—Ä–æ—Å–∏—Ç —Ä–∞—Å—á–µ—Ç/—Å–º–µ—Ç—É/—Ü–µ–Ω—É
2. –í –¥–∏–∞–ª–æ–≥–µ –£–ñ–ï –æ–±—Å—É–∂–¥–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã)
3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö
4. –ú–∏–Ω–∏–º—É–º 8+ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ —Å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏

–û–¢–í–ï–ß–ê–ô "–ù–ï–¢" –µ—Å–ª–∏:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–µ—Ç –æ–¥–Ω–æ—Å–ª–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ("–Ω–µ—Ç –º—ã—Å–ª–µ–π", "–Ω–µ –∑–Ω–∞—é", "–¥—É–º–∞—é")
- –î–∏–∞–ª–æ–≥ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–µ–Ω–µ–µ 8 —Å–æ–æ–±—â–µ–Ω–∏–π)
- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Å—É–∂–¥–µ–Ω—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ
- –ù–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏ –æ –∑–∞–¥–∞—á–∞—Ö –±–æ—Ç–∞

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º:
- "–î–ê" - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ì–û–¢–û–í –∫ —Ä–∞—Å—á–µ—Ç—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏  
- "–ù–ï–¢" - –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π

–ü–†–ò–ù–¶–ò–ü: –ª—É—á—à–µ –æ—à–∏–±–∏—Ç—å—Å—è –≤ —Å—Ç–æ—Ä–æ–Ω—É "–ù–ï–¢"`;

        let shouldCalculate = false;
        
        try {
            const intentResponse = await axios.post(
                OPENAI_CONFIG.endpoint,
                {
                    model: OPENAI_CONFIG.model,
                    messages: [
                        { role: 'system', content: intentAnalysisPrompt },
                        { role: 'user', content: message }
                    ],
                    max_tokens: 10,
                    temperature: 0.1
                },
                {
                    headers: {
                        'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                        'Content-Type': 'application/json'
                    },
                    httpsAgent: proxyAgent,
                    timeout: 15000
                }
            );
            
            const intentResult = intentResponse.data.choices[0]?.message?.content?.trim() || '';
            shouldCalculate = intentResult.toUpperCase().includes('–î–ê');
            console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –û—Å–Ω–æ–≤–Ω–æ–π API - –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è GPT:', intentResult);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º API:', error);
            // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            shouldCalculate = 
                message.toLowerCase().includes('–ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ') ||
                message.toLowerCase().includes('—Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å–º–µ—Ç—É') ||
                message.toLowerCase().includes('—Å–æ–∑–¥–∞–π—Ç–µ —Å–º–µ—Ç—É') ||
                message.toLowerCase().includes('—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å') ||
                message.toLowerCase().includes('–∫–∞–∫–∞—è —Ü–µ–Ω–∞') ||
                message.toLowerCase().includes('—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç') ||
                message.toLowerCase().includes('—Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ') ||
                message.toLowerCase().includes('–¥–∞–π —Å–º–µ—Ç—É') ||
                message.toLowerCase().includes('—Å–º–µ—Ç—É');
            console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –û—Å–Ω–æ–≤–Ω–æ–π API - fallback –Ω–∞ —Ö–∞—Ä–¥–∫–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫—É');
        }

        // ===== –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê =====
        let isFunctionalityReady = false;
        
        if (shouldCalculate && conversation.length >= 6) { // –£–≤–µ–ª–∏—á–∏–ª –º–∏–Ω–∏–º—É–º –¥–æ 6 —Å–æ–æ–±—â–µ–Ω–∏–π
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–º–µ—Ç—ã...');
            
            const functionalityCheckPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–±—Å—É–∂–¥–µ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã.

–î–∏–∞–ª–æ–≥: ${allMessages.map(m => `${m.role}: ${m.content}`).join('\n')}

–°–¢–†–û–ì–ò–ï –ö–†–ò–¢–ï–†–ò–ò –¥–ª—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:
1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –±–æ—Ç–∞ (–Ω–µ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã)
2. –û–±—Å—É–∂–¥–µ–Ω—ã –º–∏–Ω–∏–º—É–º 3-4 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
3. –ö–ª–∏–µ–Ω—Ç –¥–∞–ª –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–Ω–µ –æ–¥–Ω–æ—Å–ª–æ–∂–Ω—ã–µ)
4. –ï—Å—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ü–µ–ª–µ–π –∏ –∑–∞–¥–∞—á –±–æ—Ç–∞
5. –î–∏–∞–ª–æ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∏–Ω–∏–º—É–º 8-10 –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö

–í–ê–ñ–ù–û: 
- –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –æ–¥–Ω–æ—Å–ª–æ–∂–Ω–æ ("–Ω–µ—Ç –º—ã—Å–ª–µ–π", "–Ω–µ –∑–Ω–∞—é") - –ù–ï_–ì–û–¢–û–í
- –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω—ã —Å–ª–∏—à–∫–æ–º –æ–±—â–æ - –ù–ï_–ì–û–¢–û–í  
- –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏ - –ù–ï_–ì–û–¢–û–í

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º:
- "–ì–û–¢–û–í" - –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–µ—Ç–∞–ª—å–Ω–æ –æ–±—Å—É–∂–¥–µ–Ω
- "–ù–ï_–ì–û–¢–û–í" - –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è

–ö–†–ò–¢–ï–†–ò–ô: –ª—É—á—à–µ –æ—à–∏–±–∏—Ç—å—Å—è –≤ —Å—Ç–æ—Ä–æ–Ω—É "–ù–ï_–ì–û–¢–û–í"`;

            try {
                const functionalityResponse = await axios.post(
                    OPENAI_CONFIG.endpoint,
                    {
                        model: OPENAI_CONFIG.model,
                        messages: [
                            { role: 'system', content: functionalityCheckPrompt }
                        ],
                        max_tokens: 20,
                        temperature: 0.1
                    },
                    {
                        headers: {
                            'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                            'Content-Type': 'application/json'
                        },
                        httpsAgent: proxyAgent,
                        timeout: 15000
                    }
                );
                
                const functionalityResult = functionalityResponse.data.choices[0]?.message?.content?.trim() || '';
                isFunctionalityReady = functionalityResult.toUpperCase().includes('–ì–û–¢–û–í');
                console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞:', functionalityResult);
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞:', error);
                // Fallback: —Ç—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 8 —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
                isFunctionalityReady = conversation.length >= 8 && 
                    allMessages.filter(m => m.content.length > 20).length >= 6 && // –ú–∏–Ω–∏–º—É–º 6 —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    allMessages.some(m => 
                        m.content.toLowerCase().includes('—Ñ—É–Ω–∫—Ü–∏—è') ||
                        m.content.toLowerCase().includes('–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏') ||
                        m.content.toLowerCase().includes('–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è') ||
                        m.content.toLowerCase().includes('api') ||
                        m.content.toLowerCase().includes('–∑–∞–¥–∞—á–∞')
                    );
                console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ - —Ç—Ä–µ–±—É–µ–º –±–æ–ª—å—à–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è');
            }
        }

        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: shouldCalculate =', shouldCalculate);
        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: isFunctionalityReady =', isFunctionalityReady);
        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ:', conversation.length);
        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', message);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ—Ç—ã
        const isConfirmingEstimate = 
            message.toLowerCase().includes('–¥–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ') ||
            message.toLowerCase().includes('–≥–æ—Ç–æ–≤—å—Ç–µ —Å–º–µ—Ç—É') ||
            message.toLowerCase().includes('–≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ') ||
            message.toLowerCase().includes('–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é');

        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç—ã:', isConfirmingEstimate);

        // –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –£–°–õ–û–í–ò–ï: –ò –∑–∞–ø—Ä–æ—Å —Ä–∞—Å—á–µ—Ç–∞, –ò –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        if (shouldCalculate && isFunctionalityReady && !isConfirmingEstimate) {
            console.log('üí∞ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã - –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
            console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢ - –∑–∞–ø—É—Å–∫ —Ä–∞—Å—á–µ—Ç–∞ —Å–º–µ—Ç—ã!');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞
            const estimate = await calculateProjectEstimate(fullText, conversation);
            console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –°–º–µ—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞:', estimate ? '–î–ê' : '–ù–ï–¢');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            await sendEstimateToTelegram(estimate, sessionId);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ—Ç—É –≤ –±–∞–∑—É
            if (sessionId && Conversation) {
                try {
                    await Conversation.findOneAndUpdate(
                        { sessionId },
                        { 
                            estimate: estimate,
                            estimatedAt: new Date(),
                            estimateStatus: 'pending_approval' // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        }
                    );
                } catch (dbError) {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã:', dbError);
                }
            }
            
            // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–º–µ—Ç—É –∫–ª–∏–µ–Ω—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            console.log('‚úÖ –°–º–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GPT...');
            console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –í–ê–ñ–ù–û! –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º —Å–º–µ—Ç—É –∫–ª–∏–µ–Ω—Ç—É, —Ñ–æ—Ä–º–∏—Ä—É–µ–º GPT –æ—Ç–≤–µ—Ç');
            
            // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–º–µ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            const estimateReadyPrompt = `${ENHANCED_SYSTEM_PROMPT}

–°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏, —Å–º–µ—Ç–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –ü–æ–¥—ã—Ç–æ–∂—å –æ–±—Å—É–∂–¥–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞
2. –°–ø—Ä–æ—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ
3. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∫–∞–∂–∏ —á—Ç–æ —Å–º–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
4. –£–ø–æ–º—è–Ω–∏ —á—Ç–æ –ø–æ—Å–ª–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç–∞ –ø—Ä–∏–¥—ë—Ç –≤ —á–∞—Ç –∏ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–º—É –∫–∞–Ω–∞–ª—É —Å–≤—è–∑–∏
5. –£–∫–∞–∂–∏ —á—Ç–æ –æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 10-15 –º–∏–Ω—É—Ç

–ù–ï –Ω–∞–∑—ã–≤–∞–π –Ω–∏–∫–∞–∫–∏—Ö —Ü–µ–Ω –∏–ª–∏ —Å—É–º–º!`;

            const messages = [
                { role: 'system', content: estimateReadyPrompt },
                ...conversation.slice(-6),
                { role: 'user', content: message }
            ];

            console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT —Å –ø—Ä–æ–º—Ç–æ–º –ë–ï–ó —Ü–µ–Ω');

            try {
                const gptResponse = await axios.post(
                    OPENAI_CONFIG.endpoint,
                    {
                        model: OPENAI_CONFIG.model,
                        messages: messages,
                        max_tokens: 400,
                        temperature: 0.7
                    },
                    {
                        headers: {
                            'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                            'Content-Type': 'application/json'
                        },
                        httpsAgent: proxyAgent,
                        timeout: 30000
                    }
                );

                const assistantMessage = gptResponse.data.choices[0]?.message?.content;
                console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: GPT –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–Ω—ã?', assistantMessage.includes('‚ÇΩ'));
                console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: GPT –æ—Ç–≤–µ—Ç –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', assistantMessage.substring(0, 200));
                
                const result = {
                    success: true,
                    message: assistantMessage,
                    estimateStatus: 'sent_to_manager',
                    quickReplies: ['‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ', '‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏', 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è', '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å']
                };
                
                console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –ë–ï–ó —Ü–µ–Ω');
                return res.json(result);
                
            } catch (gptError) {
                console.error('–û—à–∏–±–∫–∞ GPT –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ —Å–º–µ—Ç–µ:', gptError);
                
                // Fallback –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ GPT –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                const result = {
                    success: true,
                    message: `–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª —Å–º–µ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –µ—ë –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ. 
                    
–ü–æ—Å–ª–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç–∞ –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞ –≤ —á–∞—Ç, –∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–º—É –∫–∞–Ω–∞–ª—É —Å–≤—è–∑–∏. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 10-15 –º–∏–Ω—É—Ç.

–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ?`,
                    estimateStatus: 'sent_to_manager',
                    quickReplies: ['‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ', '‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏', 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è']
                };
                
                console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –æ—Ç–≤–µ—Ç –ë–ï–ó —Ü–µ–Ω');
                return res.json(result);
            }
        } else if (shouldCalculate && !isFunctionalityReady) {
            // –ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç —Ä–∞—Å—á–µ—Ç, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—Å—É–∂–¥–µ–Ω
            console.log('‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç —Ä–∞—Å—á–µ—Ç, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—Å—É–∂–¥–µ–Ω');
            
            const needMoreInfoPrompt = `${ENHANCED_SYSTEM_PROMPT}

–°–ò–¢–£–ê–¶–ò–Ø: –ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –æ–±—Å—É–∂–¥–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –í–µ–∂–ª–∏–≤–æ –æ–±—ä—è—Å–Ω–∏ —á—Ç–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π
2. –ó–∞–¥–∞–π 2-3 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–æ—Ç–∞
3. –ü—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Å—É–¥–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
4. –ü–æ–¥—á–µ—Ä–∫–Ω–∏ —á—Ç–æ –ø–æ—Å–ª–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –±—ã—Å—Ç—Ä–æ

–ù–ï –Ω–∞–∑—ã–≤–∞–π –Ω–∏–∫–∞–∫–∏—Ö —Ü–µ–Ω! –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ —Å–±–æ—Ä–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.`;

            try {
                const gptResponse = await axios.post(
                    OPENAI_CONFIG.endpoint,
                    {
                        model: OPENAI_CONFIG.model,
                        messages: [
                            { role: 'system', content: needMoreInfoPrompt },
                            ...conversation.slice(-4),
                            { role: 'user', content: message }
                        ],
                        max_tokens: 300,
                        temperature: 0.7
                    },
                    {
                        headers: {
                            'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                            'Content-Type': 'application/json'
                        },
                        httpsAgent: proxyAgent,
                        timeout: 30000
                    }
                );

                const assistantMessage = gptResponse.data.choices[0]?.message?.content;
                
                const result = {
                    success: true,
                    message: assistantMessage,
                    estimateStatus: 'need_more_info',
                    quickReplies: ['üí¨ –ß–∞—Ç-–±–æ—Ç —Å –º–µ–Ω—é', 'üß† GPT-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', 'üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', 'üì± WebApp', '‚ùì –î—Ä—É–≥–æ–µ']
                };
                
                console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ');
                return res.json(result);
                
            } catch (gptError) {
                console.error('–û—à–∏–±–∫–∞ GPT –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', gptError);
                
                const result = {
                    success: true,
                    message: `–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–æ—Ç–∞. 

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:
‚Ä¢ –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∞—Ç—å –≤–∞—à –±–æ—Ç?
‚Ä¢ –ù—É–∂–Ω–∞ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ (CRM, –æ–ø–ª–∞—Ç–∞, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)?
‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –¥–ª—è –æ–±—â–µ–Ω–∏—è?

–ü–æ—Å–ª–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è —è –±—ã—Å—Ç—Ä–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é —Ç–æ—á–Ω—É—é —Å–º–µ—Ç—É! üéØ`,
                    estimateStatus: 'need_more_info',
                    quickReplies: ['üí¨ –ß–∞—Ç-–±–æ—Ç —Å –º–µ–Ω—é', 'üß† GPT-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', 'üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', 'üì± WebApp']
                };
                
                return res.json(result);
            }
        }
        
        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ —Ä–∞—Å—á–µ—Ç–∞ —Å–º–µ—Ç—ã');
        // ===== –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò =====

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è OpenAI
        const messages = [
            { role: 'system', content: ENHANCED_SYSTEM_PROMPT },
            ...conversation.slice(-10), // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            { role: 'user', content: message }
        ];

        console.log('üß† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI...');

        // –ó–∞–ø—Ä–æ—Å –∫ OpenAI —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        const axiosConfig = {
            headers: {
                'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                'Content-Type': 'application/json',
                'User-Agent': 'CreateBot-Assistant/2.0'
            },
            timeout: 30000
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if (proxyAgent) {
            axiosConfig.httpsAgent = proxyAgent;
            console.log('üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI');
        }

        const response = await axios.post(
            OPENAI_CONFIG.endpoint,
            {
                model: OPENAI_CONFIG.model,
                messages: messages,
                max_tokens: 300,
                temperature: 0.7,
                presence_penalty: 0.1,
                frequency_penalty: 0.1
            },
            axiosConfig
        );

        console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω');

        const assistantMessage = response.data.choices[0]?.message?.content;

        if (!assistantMessage) {
            throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI');
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ MongoDB
        if (sessionId && Conversation) {
            try {
                await Conversation.findOneAndUpdate(
                    { sessionId },
                    {
                        $push: {
                            messages: { role: 'assistant', content: assistantMessage }
                        }
                    }
                );
            } catch (dbError) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î:', dbError);
            }
        }

        // –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
        const quickReplies = generateUnifiedQuickReplies(assistantMessage, message, conversation, 'chat');

        const result = {
            success: true,
            message: assistantMessage,
            quickReplies: quickReplies,
            usage: response.data.usage
        };

        // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        cache.set(messageHash, result);

        res.json(result);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ GPT API:', error.message);

        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—Ç OpenAI, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        if (error.response?.status === 429) {
            return res.status(429).json({
                error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É',
                success: false
            });
        }

        // –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        res.status(500).json({
            error: '–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞',
            success: false
        });
    }
});

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
async function handleFormulationMode(req, res) {
    console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –í—Ö–æ–¥ –≤ handleFormulationMode');
    const { message, conversation = [], sessionId } = req.body;

    console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ - —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
    console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ conversation:', conversation.length);

    // ===== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ê–°–ß–ï–¢–ê =====
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å—á–∏—Ç–∞—Ç—å —Å–º–µ—Ç—É (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —É—Å–ª–æ–≤–∏—è)
    const shouldCalculate = 
        message.toLowerCase().includes('—Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ') ||
        message.toLowerCase().includes('–ø–æ—Å—á–∏—Ç–∞–π—Ç–µ') ||
        message.toLowerCase().includes('—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å') ||
        message.toLowerCase().includes('–∫–∞–∫–∞—è —Ü–µ–Ω–∞') ||
        message.toLowerCase().includes('—Å–æ–∑–¥–∞–π—Ç–µ —Å–º–µ—Ç—É') ||
        message.toLowerCase().includes('–¥–∞–π —Å–º–µ—Ç—É') ||
        message.toLowerCase().includes('—Å–º–µ—Ç—É') ||
        (conversation.length >= 10 && parseRequirements(conversation.map(m => m.content).join(' ')).length >= 4); // –ü–æ—Å–ª–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –ò 4+ —Ñ—É–Ω–∫—Ü–∏–π

    console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ - shouldCalculate =', shouldCalculate);

    let estimate = null;
    let estimateMessage = '';

    if (shouldCalculate) {
        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ - –ó–ê–ü–£–°–ö –†–ê–°–ß–ï–¢–ê –°–ú–ï–¢–´!');
        const requirements = extractRequirements(conversation);
        
        // –°—á–∏—Ç–∞–µ–º —Å–º–µ—Ç—É –∏—Å–ø–æ–ª—å–∑—É—è –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        estimate = await calculateProjectEstimate(requirements, conversation);
        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ - —Å–º–µ—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞:', estimate ? '–î–ê' : '–ù–ï–¢');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        await sendEstimateToTelegram(estimate, sessionId);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        if (sessionId && Conversation) {
            await Conversation.findOneAndUpdate(
                { sessionId },
                { 
                    estimate: estimate,
                    estimatedAt: new Date(),
                    estimateStatus: 'pending_approval'
                }
            );
        }
        
        // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–º–µ—Ç—É –≤ —Ä–µ–∂–∏–º–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ - –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ GPT
        console.log('‚úÖ –°–º–µ—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É');
        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ - –í–ê–ñ–ù–û! –û–±–Ω—É–ª—è–µ–º —Å–º–µ—Ç—É —á—Ç–æ–±—ã –ù–ï –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É');
        estimate = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É
        estimateMessage = ''; // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–º–µ—Ç–æ–π
    }
    
    console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ - –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ estimate =', estimate);
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ - –Ω–∞—Å–ª–µ–¥—É–µ—Ç –±–∞–∑–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥
    const formulationPrompt = `${preChatService.baseSystemPrompt}

–†–ï–ñ–ò–ú: –ü–æ–º–æ—â—å —Å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–æ–π –∑–∞–¥–∞—á–∏

–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –≠–¢–û–ì–û –†–ï–ñ–ò–ú–ê:
- –ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–æ–π" - –∑–Ω–∞—á–∏—Ç –∑–∞–¥–∞—á–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è
- –ü–æ–Ω—è—Ç—å —á—Ç–æ —Ö–æ—á–µ—Ç –∫–ª–∏–µ–Ω—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–æ–±—ã—á–Ω–æ–µ (–≥–∞–¥–∞–Ω–∏–µ, –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è, –∫–æ—É—á–∏–Ω–≥ –∏ —Ç.–¥.)
- –ë—ã—Å—Ç—Ä–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–Ω—è—Ç–Ω–æ–µ –¢–ó –¥–ª—è –µ–≥–æ –Ω–∏—à–∏
- –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å—Ö–æ–¥—è –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏

–ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –î–ï–ô–°–¢–í–ò–ô:
1. –í—ã—è—Å–Ω–∏ —Å—É—Ç—å –±–∏–∑–Ω–µ—Å–∞/—É—Å–ª—É–≥–∏ (1-2 –≤–æ–ø—Ä–æ—Å–∞)
2. –û–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–π –Ω–∏—à–∏ (1-2 –≤–æ–ø—Ä–æ—Å–∞) 
3. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏

–ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ä–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∏–ª–∏ —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç
–ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–π –Ω–∏–∫–∞–∫–∏—Ö —Ü–µ–Ω –∏–ª–∏ —Å—É–º–º!`;

    let messages = [
        { role: 'system', content: formulationPrompt }
    ];
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª–æ —Ä–µ–∂–∏–º–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
    if (message === 'FORMULATION_MODE_START') {
        messages.push({
            role: 'user',
            content: '–ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–æ–π". –ù–∞—á–Ω–∏ –¥–∏–∞–ª–æ–≥.'
        });
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        messages = messages.concat(conversation.slice(-6));
        messages.push({ role: 'user', content: message });
    }
    
    console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT');
    
    try {
        // –í—ã–∑–æ–≤ OpenAI
        const response = await axios.post(
            OPENAI_CONFIG.endpoint,
            {
                model: OPENAI_CONFIG.model,
                messages: messages,
                max_tokens: 400,
                temperature: 0.8, // –ë–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –Ω–∏—à
                presence_penalty: 0.3, // –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            },
            {
                headers: {
                    'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                    'Content-Type': 'application/json'
                },
                httpsAgent: proxyAgent,
                timeout: 30000
            }
        );
        
        const assistantMessage = response.data.choices[0]?.message?.content;
        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ - GPT –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–Ω—ã?', assistantMessage.includes('‚ÇΩ'));
        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ - GPT –æ—Ç–≤–µ—Ç –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', assistantMessage.substring(0, 200));
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
        const quickReplies = generateUnifiedQuickReplies(assistantMessage, message, conversation, 'formulation');
        
        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ë–ï–ó —Ü–µ–Ω –∏ –ë–ï–ó estimate');
        
        res.json({
            success: true,
            message: assistantMessage, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ GPT –æ—Ç–≤–µ—Ç, –±–µ–∑ —Å–º–µ—Ç
            quickReplies: quickReplies
        });
        
    } catch (error) {
        console.error('OpenAI Error:', error);
        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ - –æ—à–∏–±–∫–∞ GPT, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback');
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ AI',
            success: false,
            message: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π —É –≤–∞—Å –±–∏–∑–Ω–µ—Å –∏ —á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å –±–æ—Ç?'
        });
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function generateFormulationButtons(aiResponse, conversation) {
    const lower = aiResponse.toLowerCase();
    
    // –ï—Å–ª–∏ AI —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ç–∏–ø–µ –±–∏–∑–Ω–µ—Å–∞
    if (lower.includes('–±–∏–∑–Ω–µ—Å') || lower.includes('–∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å')) {
        return [];  // –ü—É—Å—Ç—å –ø–∏—à—É—Ç —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
    }
    
    // –ï—Å–ª–∏ AI –≥–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –¢–ó
    if (lower.includes('–≥–æ—Ç–æ–≤') || lower.includes('—Å–æ–∑–¥–∞–º') || lower.includes('–ø—Ä–µ–¥–ª–∞–≥–∞—é')) {
        return [
            '‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ',
            'üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏',
            'üìã –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ–µ –¢–ó',
            'üí∞ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å'
        ];
    }
    
    // –ï—Å–ª–∏ AI —É—Ç–æ—á–Ω—è–µ—Ç –¥–µ—Ç–∞–ª–∏
    if (lower.includes('—É—Ç–æ—á–Ω') || lower.includes('–∫–∞–∫–∏–µ')) {
        return [
            'üí¨ –û—Ç–≤–µ—á—É —Ç–µ–∫—Å—Ç–æ–º',
            'üé§ –ó–∞–ø–∏—à—É –≥–æ–ª–æ—Å–æ–º',
            'üìã –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ, —Å–æ–∑–¥–∞–π—Ç–µ –¢–ó'
        ];
    }
    
    return [];
}

// Webhook –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–æ–≤ –≤ Telegram
app.post('/api/lead-notification', async (req, res) => {
    try {
        const { name, telegram, message, specification } = req.body;
        
        if (!bot || !process.env.ADMIN_CHAT_ID) {
            return res.json({ success: false, error: 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
        }
        
        const text = `üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n` +
                    `üë§ –ò–º—è: ${name}\n` +
                    `üí¨ Telegram: ${telegram}\n` +
                    `üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}\n` +
                    `üìã –¢–ó —Å–æ–∑–¥–∞–Ω–æ: ${specification ? '–î–∞' : '–ù–µ—Ç'}`;
        
        await bot.sendMessage(process.env.ADMIN_CHAT_ID, text);
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        if (Analytics) {
            await Analytics.create({
                event: 'lead_submitted',
                data: { name, telegram, hasSpecification: !!specification },
                ip: req.ip
            });
        }
        
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
    }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function generateQuickReplies(assistantMessage, userMessage) {
    const lowerMessage = assistantMessage.toLowerCase();
    const lowerUser = userMessage.toLowerCase();

    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ —Å–æ–±—Ä–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞—Å—á–µ—Ç
    if (lowerMessage.includes('–∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏') || 
        lowerMessage.includes('—á—Ç–æ –µ—â–µ') ||
        lowerMessage.includes('–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ') ||
        lowerMessage.includes('–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏') ||
        (lowerMessage.includes('–±–æ—Ç') && lowerMessage.includes('–Ω—É–∂–µ–Ω'))) {
        return [
            "üí∞ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏",
            "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
            "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
        ];
    }

    if (lowerMessage.includes('–±–∏–∑–Ω–µ—Å') || lowerMessage.includes('–∫–æ–º–ø–∞–Ω')) {
        return [
            "üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω",
            "üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", 
            "üîß –£—Å–ª—É–≥–∏",
            "üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
            "üíº –î—Ä—É–≥–æ–µ"
        ];
    }

    if (lowerMessage.includes('–∑–∞–¥–∞—á') || lowerMessage.includes('—Ñ—É–Ω–∫—Ü')) {
        return [
            "üìû –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã",
            "üõí –ü—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã", 
            "üìù –°–æ–±–∏—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏",
            "üìÖ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞ —É—Å–ª—É–≥–∏",
            "üí∞ –ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã"
        ];
    }

    if (lowerMessage.includes('–∏–Ω—Ç–µ–≥—Ä–∞—Ü') || lowerMessage.includes('–ø–æ–¥–∫–ª—é—á')) {
        return [
            "‚úÖ –ù—É–∂–Ω–∞ CRM",
            "üí≥ –ù—É–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞",
            "üìß –ù—É–∂–Ω–∞ –ø–æ—á—Ç–∞", 
            "‚ùå –ü–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ"
        ];
    }

    if (lowerMessage.includes('–≥–æ—Ç–æ–≤') || lowerMessage.includes('—Å—Ñ–æ—Ä–º–∏—Ä')) {
        return [
            "üìã –°–æ–∑–¥–∞—Ç—å –¢–ó —Å–µ–π—á–∞—Å",
            "üí° –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏",
            "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"
        ];
    }

    return [];
}

// Endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¢–ó
app.post('/api/generate-specification', async (req, res) => {
    try {
        const { conversation, sessionId } = req.body;

        if (!conversation || conversation.length < 3) {
            return res.status(400).json({
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó'
            });
        }

        const specPrompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è Telegram-–±–æ—Ç–∞.

–î–∏–∞–ª–æ–≥: ${conversation.map(msg => `${msg.role}: ${msg.content}`).join('\n')}

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
    "business_type": "–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞",
    "main_tasks": ["–ó–∞–¥–∞—á–∞ 1", "–ó–∞–¥–∞—á–∞ 2"],
    "target_audience": "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è", 
    "key_features": ["–§—É–Ω–∫—Ü–∏—è 1", "–§—É–Ω–∫—Ü–∏—è 2", "–§—É–Ω–∫—Ü–∏—è 3"],
    "integrations": ["–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è 1"],
    "ai_level": "–£—Ä–æ–≤–µ–Ω—å –ò–ò",
    "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
    "success_metrics": ["–ú–µ—Ç—Ä–∏–∫–∞ 1", "–ú–µ—Ç—Ä–∏–∫–∞ 2"]
}

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

        const axiosConfigSpec = {
            headers: {
                'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                'Content-Type': 'application/json'
            },
            timeout: 30000
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if (proxyAgent) {
            axiosConfigSpec.httpsAgent = proxyAgent;
            console.log('üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó');
        }

        const response = await axios.post(
            OPENAI_CONFIG.endpoint,
            {
                model: OPENAI_CONFIG.model,
                messages: [
                    { role: 'system', content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON.' },
                    { role: 'user', content: specPrompt }
                ],
                max_tokens: 500,
                temperature: 0.3
            },
            axiosConfigSpec
        );

        const specText = response.data.choices[0]?.message?.content;
        
        try {
            const specification = JSON.parse(specText);
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¢–ó –≤ MongoDB
            if (sessionId && Conversation) {
                await Conversation.findOneAndUpdate(
                    { sessionId },
                    { specification: specification }
                );
            }
            
            // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó
            if (Analytics) {
                await Analytics.create({
                    event: 'specification_created',
                    data: { sessionId, businessType: specification.business_type },
                    ip: req.ip
                });
            }
            
            res.json({
                success: true,
                specification: specification
            });
        } catch (e) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, —Å–æ–∑–¥–∞–µ–º fallback
            const fallbackSpec = createFallbackSpec(conversation);
            res.json({
                success: true,
                specification: fallbackSpec
            });
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó:', error.message);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¢–ó',
            specification: createFallbackSpec(req.body.conversation)
        });
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –¢–ó
function createFallbackSpec(conversation) {
    const text = conversation.map(msg => msg.content).join(' ').toLowerCase();
    
    return {
        title: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π Telegram-–±–æ—Ç",
        business_type: "–ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫–ª–∏–µ–Ω—Ç–∞",
        main_tasks: ["–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ–±—â–µ–Ω–∏—è", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"],
        target_audience: "–ö–ª–∏–µ–Ω—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏",
        key_features: [
            "–£–º–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏",
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥", 
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏"
        ],
        integrations: ["–ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é"],
        ai_level: "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π",
        description: "–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞ –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞",
        success_metrics: ["–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏", "–°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É"]
    };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
app.get('/api/analytics/summary', async (req, res) => {
    try {
        if (!Analytics) {
            return res.json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' });
        }
        
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const [totalConversations, todayConversations, specificationsCreated] = await Promise.all([
            Analytics.countDocuments({ event: 'conversation_started' }),
            Analytics.countDocuments({ 
                event: 'conversation_started',
                timestamp: { $gte: today }
            }),
            Analytics.countDocuments({ event: 'specification_created' })
        ]);
        
        res.json({
            totalConversations,
            todayConversations,
            specificationsCreated,
            conversionRate: totalConversations > 0 ? (specificationsCreated / totalConversations * 100).toFixed(1) : 0
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏' });
    }
});

// ===== ENDPOINT –î–õ–Ø –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô =====
app.post('/api/voice-message', upload.single('audio'), async (req, res) => {
    try {
        console.log('üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        
        if (!req.file) {
            return res.status(400).json({ 
                error: '–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }

        const { sessionId, conversation = [] } = req.body;
        let transcription = '';
        
        // –ü–∞—Ä—Å–∏–º conversation –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        let parsedConversation = [];
        try {
            if (typeof conversation === 'string') {
                parsedConversation = JSON.parse(conversation);
            } else if (Array.isArray(conversation)) {
                parsedConversation = conversation;
            }
        } catch (parseError) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å conversation:', parseError.message);
            parsedConversation = [];
        }
        
        try {
            // –†–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ OpenAI Whisper
            console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...');
            
            const formData = new FormData();
            formData.append('file', fsSync.createReadStream(req.file.path), {
                filename: 'audio.webm',
                contentType: req.file.mimetype
            });
            formData.append('model', 'whisper-1');
            formData.append('language', 'ru');
            
            const response = await fetch('https://api.openai.com/v1/audio/transcriptions', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                    ...formData.getHeaders()
                },
                body: formData,
                agent: proxyAgent,
                timeout: 30000
            });
            
            if (response.ok) {
                const result = await response.json();
                transcription = result.text || '';
                console.log('‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:', transcription);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ transcription –Ω–µ –ø—É—Å—Ç–æ–π
                if (!transcription || transcription.trim().length === 0) {
                    console.warn('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∏–∑ Whisper');
                    transcription = '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å';
                }
            } else {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ Whisper API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                throw new Error(`Whisper API error: ${response.status}`);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', error.message);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å
            return res.status(500).json({
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.',
                transcription: '' // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é transcription –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            });
        }
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try {
            await fs.unlink(req.file.path);
        } catch (e) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª:', e);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if (sessionId && Conversation) {
            try {
                await Conversation.findOneAndUpdate(
                    { sessionId },
                    {
                        $push: {
                            messages: { 
                                role: 'user', 
                                content: transcription,
                                type: 'voice' // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            }
                        }
                    },
                    { upsert: true }
                );
            } catch (dbError) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î:', dbError);
            }
        }
        
        // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ GPT API
        console.log('üß† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ OpenAI GPT...');
        
        // –£–ë–ò–†–ê–ï–ú –ë–´–°–¢–†–´–ï –®–ê–ë–õ–û–ù–´ –î–õ–Ø –ì–û–õ–û–°–ê - –¢–ï–ü–ï–†–¨ –°–ù–ê–ß–ê–õ–ê –î–ò–ê–õ–û–ì, –ü–û–¢–û–ú –†–ê–°–ß–ï–¢
        
        // –£–ë–ò–†–ê–ï–ú –ë–´–°–¢–†–´–ï –®–ê–ë–õ–û–ù–´ –î–õ–Ø –ì–û–õ–û–°–ê - –¢–ï–ü–ï–†–¨ –°–ù–ê–ß–ê–õ–ê –î–ò–ê–õ–û–ì, –ü–û–¢–û–ú –†–ê–°–ß–ï–¢
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è/—Ä–∞—Å—á–µ—Ç–∞
        const needsEstimate = transcription.toLowerCase().includes('–ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ') ||
                             transcription.toLowerCase().includes('—Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ') ||
                             transcription.toLowerCase().includes('—Å–∫–æ–ª—å–∫–æ') ||
                             transcription.toLowerCase().includes('—Å—Ç–æ–∏—Ç') ||
                             transcription.toLowerCase().includes('—Ü–µ–Ω–∞') ||
                             transcription.toLowerCase().includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') ||
                             transcription.toLowerCase().includes('—Ä–∞—Å—á–µ—Ç') ||
                             transcription.toLowerCase().includes('—Å–º–µ—Ç–∞');
        
        if (needsEstimate && parsedConversation.length >= 2) {
            console.log('üí∞ –ì–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å —Ä–∞—Å—á–µ—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–º–µ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä—É...');
            
            try {
                const allMessages = [...parsedConversation, { role: 'user', content: transcription }];
                const fullText = allMessages.map(m => m.content).join(' ');
                
                const estimate = await calculateProjectEstimate(fullText, parsedConversation);
                
                await sendEstimateToTelegram(estimate, sessionId);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Å —Å—Ç–∞—Ç—É—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–º–µ—Ç—ã
                if (Conversation) {
                    try {
                        await Conversation.findOneAndUpdate(
                            { sessionId },
                            { 
                                estimate: estimate,
                                estimatedAt: new Date(),
                                estimateStatus: 'pending_approval'
                            },
                            { upsert: true }
                        );
                        console.log('üíæ –°—Ç–∞—Ç—É—Å —Å–º–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ pending_approval');
                    } catch (dbError) {
                        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã –≤ –∞–Ω–∫–µ—Ç–Ω–æ–º —á–∞—Ç–µ:', dbError);
                    }
                }
                
                console.log('‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞—è —Å–º–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É:', estimate.totalCost, '—Ä—É–±.');
                
                // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ —Ç–æ–º —á—Ç–æ —Å–º–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É
                const estimateReadyPrompt = `${ENHANCED_SYSTEM_PROMPT}

–°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏, —Å–º–µ—Ç–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –ü–æ–¥—ã—Ç–æ–∂—å –æ–±—Å—É–∂–¥–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞
2. –°–ø—Ä–æ—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ
3. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∫–∞–∂–∏ —á—Ç–æ —Å–º–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
4. –£–ø–æ–º—è–Ω–∏ —á—Ç–æ –ø–æ—Å–ª–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç–∞ –ø—Ä–∏–¥—ë—Ç –≤ —á–∞—Ç –∏ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–º—É –∫–∞–Ω–∞–ª—É —Å–≤—è–∑–∏
5. –£–∫–∞–∂–∏ —á—Ç–æ –æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 10-15 –º–∏–Ω—É—Ç

–ù–ï –Ω–∞–∑—ã–≤–∞–π –Ω–∏–∫–∞–∫–∏—Ö —Ü–µ–Ω –∏–ª–∏ —Å—É–º–º!`;

                const messages = [
                    { role: 'system', content: estimateReadyPrompt },
                    ...parsedConversation.slice(-6),
                    { role: 'user', content: transcription }
                ];

                const gptResponse = await axios.post(
                    OPENAI_CONFIG.endpoint,
                    {
                        model: OPENAI_CONFIG.model,
                        messages: messages,
                        max_tokens: 400,
                        temperature: 0.7
                    },
                    {
                        headers: {
                            'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                            'Content-Type': 'application/json'
                        },
                        httpsAgent: proxyAgent,
                        timeout: 30000
                    }
                );

                const assistantMessage = gptResponse.data.choices[0]?.message?.content;
                
                return res.json({
                    success: true,
                    transcription: transcription,
                    message: assistantMessage,
                    estimateStatus: 'sent_to_manager',
                    isVoiceInput: true,
                    quickReplies: [
                        '‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ',
                        '‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏', 
                        'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
                        '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'
                    ]
                });
                
            } catch (estimateError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–º–µ—Ç—ã:', estimateError.message);
                
                // Fallback –µ—Å–ª–∏ —Ä–∞—Å—á–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                return res.json({
                    success: true,
                    transcription: transcription,
                    message: `–û—Ç–ª–∏—á–Ω–æ! –Ø –æ–±—Ä–∞–±–æ—Ç–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–º–µ—Ç—É –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ. 
                    
–ü–æ—Å–ª–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç–∞ –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞ –≤ —á–∞—Ç, –∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–º—É –∫–∞–Ω–∞–ª—É —Å–≤—è–∑–∏. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 10-15 –º–∏–Ω—É—Ç.

–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ?`,
                    estimateStatus: 'sent_to_manager',
                    isVoiceInput: true,
                    quickReplies: [
                        '‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ',
                        '‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏',
                        'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è'
                    ]
                });
            }
        }
        
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è OpenAI
            const validMessages = parsedConversation
                .filter(msg => msg && msg.role && msg.content)
                .slice(-8) // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Å–æ–æ–±—â–µ–Ω–∏–π
                .map(msg => ({
                    role: msg.role === 'assistant' ? 'assistant' : 'user',
                    content: String(msg.content).trim().slice(0, 1000) // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                }));
            
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è OpenAI
            const messages = [
                { role: 'system', content: ENHANCED_SYSTEM_PROMPT },
                ...validMessages,
                { role: 'user', content: transcription }
            ];
            
            console.log('üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ GPT:', messages.length);
    
            // –ó–∞–ø—Ä–æ—Å –∫ OpenAI —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
            const axiosConfig = {
                headers: {
                    'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                    'Content-Type': 'application/json',
                    'User-Agent': 'CreateBot-Assistant-Voice/2.0'
                },
                timeout: 30000
            };
    
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            if (proxyAgent) {
                axiosConfig.httpsAgent = proxyAgent;
                console.log('üîó –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI GPT');
            }
    
            const gptResponse = await axios.post(
                OPENAI_CONFIG.endpoint,
                {
                    model: OPENAI_CONFIG.model,
                    messages: messages,
                    max_tokens: 300,
                    temperature: 0.7,
                    presence_penalty: 0.1,
                    frequency_penalty: 0.1
                },
                axiosConfig
            );
    
            console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç OpenAI GPT –ø–æ–ª—É—á–µ–Ω –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞');
    
            const assistantMessage = gptResponse.data.choices[0]?.message?.content;
    
            if (!assistantMessage) {
                throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI GPT');
            }
    
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ MongoDB
            if (sessionId && Conversation) {
                try {
                    await Conversation.findOneAndUpdate(
                        { sessionId },
                        {
                            $push: {
                                messages: { 
                                    role: 'assistant', 
                                    content: assistantMessage,
                                    responseToVoice: true // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å
                                }
                            }
                        }
                    );
                } catch (dbError) {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ GPT –≤ –ë–î:', dbError);
                }
            }
    
            // –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
            const quickReplies = generateQuickReplies(assistantMessage, transcription);
    
            res.json({
                success: true,
                transcription: transcription,
                message: assistantMessage,
                isVoiceInput: true,
                quickReplies: quickReplies,
                usage: gptResponse.data.usage
            });
            
        } catch (gptError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ GPT API –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞:', gptError.message);
            
            // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            if (gptError.response) {
                console.error('üîç –°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏:', gptError.response.status);
                console.error('üîç –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', gptError.response.data);
                console.error('üîç –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—à–∏–±–∫–∏:', gptError.response.headers);
            }
            
            // Fallback –µ—Å–ª–∏ GPT –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            res.json({
                success: false,
                error: '–ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                transcription: transcription,
                isVoiceInput: true,
                quickReplies: [
                    'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
                    '‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º',
                    'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'
                ]
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞:', error);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
            success: false 
        });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
app.get('/api/health', (req, res) => {
    res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        service: 'CreateBot GPT Assistant v2.0',
        features: {
            mongodb: !!mongoose.connection.readyState,
            telegram: !!bot,
            cache: cache.getStats(),
            encryption: !!process.env.ENCRYPTION_KEY,
            proxy: !!proxyAgent ? `${PROXY_CONFIG.host}:${PROXY_CONFIG.port}` : 'disabled'
        }
    });
});

// ===== ENDPOINT –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –°–ú–ï–¢ =====
app.get('/api/estimates/stats', async (req, res) => {
    try {
        if (!Estimate) {
            return res.json({
                total: 0,
                approved: 0,
                pending: 0,
                rejected: 0,
                approvalRate: '0%'
            });
        }

        const total = await Estimate.countDocuments();
        const approved = await Estimate.countDocuments({ status: 'approved' });
        const pending = await Estimate.countDocuments({ status: 'pending' });
        const rejected = await Estimate.countDocuments({ status: 'rejected' });
        
        res.json({
            total,
            approved,
            pending,
            rejected,
            approvalRate: total > 0 ? (approved / total * 100).toFixed(1) + '%' : '0%'
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
    }
});

// ===== ENDPOINT –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–ü–ò–°–ö–ê –°–ú–ï–¢ =====
app.get('/api/estimates', async (req, res) => {
    try {
        if (!Estimate) {
            return res.json([]);
        }

        const estimates = await Estimate.find()
            .sort({ createdAt: -1 })
            .limit(50);
        
        res.json(estimates);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ—Ç:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ—Ç' });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
    res.status(500).json({
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        success: false
    });
});

app.listen(PORT, () => {
    console.log(`üöÄ GPT Assistant Server v2.0 –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üîó Health check: http://localhost:${PORT}/api/health`);
    
    if (!process.env.OPENAI_API_KEY) {
        console.warn('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENAI_API_KEY!');
    }
    
    if (!process.env.MONGODB_URI) {
        console.warn('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω MONGODB_URI!');
    }
    
    if (!process.env.TELEGRAM_BOT_TOKEN) {
        console.warn('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN!');
    }
});

module.exports = app;

// ===== –ù–û–í–´–ï ENDPOINTS –î–õ–Ø –ë–´–°–¢–†–û–ô –ê–ù–ö–ï–¢–´ =====

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
app.post('/api/pre-chat-form', async (req, res) => {
    try {
        const formData = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
        const validation = preChatService.validateFormData(formData);
        if (!validation.valid) {
            return res.status(400).json({
                success: false,
                error: validation.error || '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
                missing: validation.missing
            });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        const result = await preChatService.createSession(formData);
        
        if (result.success) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç GPT —Å —É—á–µ—Ç–æ–º –∞–Ω–∫–µ—Ç—ã
            const contextualPrompt = preChatService.buildContextualPrompt(formData);
            
            try {
                const gptResponse = await callOpenAIWithPrompt(contextualPrompt);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                await preChatService.addMessageToHistory(
                    result.sessionId,
                    'assistant',
                    gptResponse,
                    { messageType: 'text' }
                );

                res.json({
                    success: true,
                    sessionId: result.sessionId,
                    welcomeMessage: gptResponse
                });
            } catch (gptError) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', gptError);
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                return res.status(500).json({
                    success: false,
                    error: '–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
                });
            }
        } else {
            res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏'
            });
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∫–µ—Ç—ã:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∞–Ω–∫–µ—Ç—ã
app.post('/api/pre-chat-message', async (req, res) => {
    try {
        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', req.body);
        
        const { sessionId, message } = req.body;
        
        if (!sessionId || !message) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ —É–∫–∞–∑–∞–Ω sessionId –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ'
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        const session = await preChatService.getSession(sessionId);
        if (!session) {
            return res.status(404).json({
                success: false,
                error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await preChatService.addMessageToHistory(
            sessionId,
            'user',
            message,
            { messageType: 'text' }
        );

        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–∞ —Å–º–µ—Ç—ã...');
        
        // ===== –£–ú–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê–ú–ï–†–ï–ù–ò–Ø –ß–ï–†–ï–ó GPT =====
        console.log('üß† –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ GPT...');
        
        let shouldCalculate = false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–º–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        let alreadySentEstimate = false;
        try {
            if (Conversation) {
                const existingConv = await Conversation.findOne({ sessionId });
                alreadySentEstimate = existingConv && existingConv.estimateStatus === 'pending_approval';
            }
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ—Ç—ã:', error);
        }
        
        if (alreadySentEstimate) {
            console.log('‚ö†Ô∏è –°–º–µ—Ç–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è');
            shouldCalculate = false;
        } else {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
            const recentMessages = session.chatHistory
                .filter(msg => msg.metadata.messageType === 'text')
                .slice(-3)
                .map(msg => `${msg.role}: ${msg.content}`)
                .join('\n');
            
            const intentAnalysisPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–∏–∞–ª–æ–≥–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –Ø–í–ù–û –ª–∏ –æ–Ω –ø—Ä–æ—Å–∏—Ç —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏/—Å–º–µ—Ç—ã.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:
${recentMessages}
–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message}"

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—ã "–î–∞", "–•–æ—Ä–æ—à–æ", "–°–æ–≥–ª–∞—Å–µ–Ω" –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö - —ç—Ç–æ –ù–ï –∑–∞–ø—Ä–æ—Å —Å–º–µ—Ç—ã!

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º:
- "–î–ê" - –µ—Å–ª–∏ –Ø–í–ù–û –ø—Ä–æ—Å–∏—Ç —Ä–∞—Å—á–µ—Ç, —Å–º–µ—Ç—É, —Ü–µ–Ω—É, —Å—Ç–æ–∏–º–æ—Å—Ç—å, "–ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
- "–ù–ï–¢" - –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏, —É—Ç–æ—á–Ω—è–µ—Ç –¥–µ—Ç–∞–ª–∏

–ü—Ä–∏–º–µ—Ä—ã –Ø–í–ù–û–ì–û –∑–∞–ø—Ä–æ—Å–∞ —Å–º–µ—Ç—ã: "—Å–º–µ—Ç–∞", "—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç", "—Ä–∞—Å—á–µ—Ç", "–ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "–≤–æ —Å–∫–æ–ª—å–∫–æ –æ–±–æ–π–¥–µ—Ç—Å—è"
–ü—Ä–∏–º–µ—Ä—ã –ù–ï –∑–∞–ø—Ä–æ—Å–∞ —Å–º–µ—Ç—ã: "–¥–∞", "—Ö–æ—Ä–æ—à–æ", "—Å–æ–≥–ª–∞—Å–µ–Ω", "–≤—Å–µ –≤–µ—Ä–Ω–æ", "–ø–æ–¥—Ö–æ–¥–∏—Ç", "–Ω—É–∂–Ω–æ", "—Ö–æ—á—É"`;

            try {
                const intentResponse = await callOpenAIWithPrompt([
                    { role: 'system', content: intentAnalysisPrompt },
                    { role: 'user', content: message }
                ]);
                
                shouldCalculate = intentResponse.trim().toUpperCase().includes('–î–ê');
                console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è GPT:', intentResponse.trim());
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è:', error);
                // Fallback –Ω–∞ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥—É—é –ª–æ–≥–∏–∫—É
                shouldCalculate = 
                    message.toLowerCase().includes('–ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ') ||
                    message.toLowerCase().includes('—Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å–º–µ—Ç—É') ||
                    message.toLowerCase().includes('—Å–æ–∑–¥–∞–π—Ç–µ —Å–º–µ—Ç—É') ||
                    message.toLowerCase().includes('—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å') ||
                    message.toLowerCase().includes('–∫–∞–∫–∞—è —Ü–µ–Ω–∞') ||
                    message.toLowerCase().includes('—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç') ||
                    message.toLowerCase().includes('–≤–æ —Å–∫–æ–ª—å–∫–æ') ||
                    message.toLowerCase().includes('—Å–º–µ—Ç—É') ||
                    (message.toLowerCase().includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') && message.length > 15);
                console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - fallback –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É');
            }
        }

        // ===== –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê =====
        let isFunctionalityReady = false;
        
        if (shouldCalculate && session.chatHistory.length >= 8) { // –£–≤–µ–ª–∏—á–∏–ª –º–∏–Ω–∏–º—É–º –¥–æ 8 —Å–æ–æ–±—â–µ–Ω–∏–π
            console.log('üîç –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–º–µ—Ç—ã...');
            
            const allMessages = session.chatHistory
                .filter(msg => msg.metadata.messageType === 'text')
                .map(msg => ({ role: msg.role, content: msg.content }));
            
            allMessages.push({ role: 'user', content: message });
            
            const functionalityCheckPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–±—Å—É–∂–¥–µ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã.

–î–∏–∞–ª–æ–≥: ${allMessages.map(m => `${m.role}: ${m.content}`).join('\n')}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:
- –ò–º—è: ${session.formData.name}
- –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${session.formData.position}
- –û—Ç—Ä–∞—Å–ª—å: ${session.formData.industry}
- –ë—é–¥–∂–µ—Ç: ${session.formData.budget}
- –°—Ä–æ–∫–∏: ${session.formData.timeline}

–û–ß–ï–ù–¨ –°–¢–†–û–ì–ò–ï –ö–†–ò–¢–ï–†–ò–ò –¥–ª—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:
1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –±–æ—Ç–∞ (–Ω–µ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–Ω–µ—Ç –º—ã—Å–ª–µ–π")
2. –û–±—Å—É–∂–¥–µ–Ω—ã –º–∏–Ω–∏–º—É–º 4-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –¥–µ—Ç–∞–ª—è–º–∏
3. –ö–ª–∏–µ–Ω—Ç –¥–∞–ª —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–Ω–µ –æ–¥–Ω–æ—Å–ª–æ–∂–Ω—ã–µ)
4. –ï—Å—Ç—å —á–µ—Ç–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ü–µ–ª–µ–π –∏ –∑–∞–¥–∞—á –±–æ—Ç–∞
5. –î–∏–∞–ª–æ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∏–Ω–∏–º—É–º 10-12 –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö
6. –§—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –æ—Ç—Ä–∞—Å–ª—å –∫–ª–∏–µ–Ω—Ç–∞

–ë–õ–û–ö–ò–†–£–Æ–©–ò–ï –§–ê–ö–¢–û–†–´:
- –û–¥–Ω–æ—Å–ª–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ("–Ω–µ—Ç –º—ã—Å–ª–µ–π", "–Ω–µ –∑–Ω–∞—é", "–¥—É–º–∞—é")
- –û–±—â–∏–µ —Ñ—Ä–∞–∑—ã –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏
- –ú–µ–Ω–µ–µ 8 —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º:
- "–ì–û–¢–û–í" - –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–µ—Ç–∞–ª—å–Ω–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –æ–±—Å—É–∂–¥–µ–Ω
- "–ù–ï_–ì–û–¢–û–í" - –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è

–ü–†–ò–ù–¶–ò–ü: –ª—É—á—à–µ –æ—à–∏–±–∏—Ç—å—Å—è –≤ —Å—Ç–æ—Ä–æ–Ω—É "–ù–ï_–ì–û–¢–û–í" —á–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–º–µ—Ç—É —Ä–∞–Ω–æ`;

            try {
                const functionalityResponse = await callOpenAIWithPrompt([
                    { role: 'system', content: functionalityCheckPrompt }
                ]);
                
                isFunctionalityReady = functionalityResponse.trim().toUpperCase().includes('–ì–û–¢–û–í');
                console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞:', functionalityResponse.trim());
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤ –∞–Ω–∫–µ—Ç–Ω–æ–º —á–∞—Ç–µ:', error);
                // Fallback: –æ—á–µ–Ω—å —Å—Ç—Ä–æ–≥–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                const contentfulMessages = allMessages.filter(m => 
                    m.role === 'user' && 
                    m.content.length > 30 && 
                    !m.content.toLowerCase().includes('–Ω–µ –∑–Ω–∞—é') &&
                    !m.content.toLowerCase().includes('–Ω–µ—Ç –º—ã—Å–ª–µ–π')
                );
                
                isFunctionalityReady = session.chatHistory.length >= 12 && 
                    contentfulMessages.length >= 5 && // –ú–∏–Ω–∏–º—É–º 5 —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
                    allMessages.some(m => 
                        m.content.toLowerCase().includes('—Ñ—É–Ω–∫—Ü–∏—è') ||
                        m.content.toLowerCase().includes('–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏') ||
                        m.content.toLowerCase().includes('–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è') ||
                        m.content.toLowerCase().includes('api') ||
                        m.content.toLowerCase().includes('–∑–∞–¥–∞—á–∞') ||
                        m.content.toLowerCase().includes('–∞–≤—Ç–æ–º–∞—Ç')
                    );
                console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - fallback –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: –æ—á–µ–Ω—å —Å—Ç—Ä–æ–≥–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è');
            }
        }

        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - shouldCalculate =', shouldCalculate);
        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - isFunctionalityReady =', isFunctionalityReady);
        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏:', session.chatHistory.length);
        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', message);

        // –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –£–°–õ–û–í–ò–ï: –ò –∑–∞–ø—Ä–æ—Å —Ä–∞—Å—á–µ—Ç–∞, –ò –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        if (shouldCalculate && isFunctionalityReady) {
            console.log('üí∞ –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç: –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã - –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
            console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢ - –∑–∞–ø—É—Å–∫ —Ä–∞—Å—á–µ—Ç–∞ —Å–º–µ—Ç—ã!');
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∞–Ω–∫–µ—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
            const allMessages = session.chatHistory
                .filter(msg => msg.metadata.messageType === 'text')
                .map(msg => ({ role: msg.role, content: msg.content }));
            
            allMessages.push({ role: 'user', content: message });
            
            const fullText = allMessages.map(m => m.content).join(' ');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞
            const estimate = await calculateProjectEstimate(fullText, allMessages);
            console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - –°–º–µ—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞:', estimate ? '–î–ê' : '–ù–ï–¢');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            await sendEstimateToTelegram(estimate, sessionId);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            if (Conversation) {
                try {
                    await Conversation.findOneAndUpdate(
                        { sessionId },
                        { 
                            estimate: estimate,
                            estimatedAt: new Date(),
                            estimateStatus: 'pending_approval'
                        },
                        { upsert: true }
                    );
                } catch (dbError) {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã –≤ –∞–Ω–∫–µ—Ç–Ω–æ–º —á–∞—Ç–µ:', dbError);
                }
            }
            
            console.log('‚úÖ –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç: –°–º–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GPT...');
            console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - –í–ê–ñ–ù–û! –ù–ï –ø–µ—Ä–µ–¥–∞–µ–º —Å–º–µ—Ç—É –∫–ª–∏–µ–Ω—Ç—É, —Ñ–æ—Ä–º–∏—Ä—É–µ–º GPT –æ—Ç–≤–µ—Ç');
            
            // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ —Ç–æ–º, —á—Ç–æ —Å–º–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É
            const estimateReadyPrompt = `${preChatService.baseSystemPrompt}

–°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏, —Å–º–µ—Ç–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –ü–æ–¥—ã—Ç–æ–∂—å –æ–±—Å—É–∂–¥–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞
2. –°–ø—Ä–æ—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á—Ç–æ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ
3. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∫–∞–∂–∏ —á—Ç–æ —Å–º–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
4. –£–ø–æ–º—è–Ω–∏ —á—Ç–æ –ø–æ—Å–ª–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç–∞ –ø—Ä–∏–¥—ë—Ç –≤ —á–∞—Ç –∏ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–º—É –∫–∞–Ω–∞–ª—É —Å–≤—è–∑–∏
5. –£–∫–∞–∂–∏ —á—Ç–æ –æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 10-15 –º–∏–Ω—É—Ç

–ù–ï –Ω–∞–∑—ã–≤–∞–π –Ω–∏–∫–∞–∫–∏—Ö —Ü–µ–Ω –∏–ª–∏ —Å—É–º–º!`;

            const messages = [
                { role: 'system', content: estimateReadyPrompt },
                ...allMessages.slice(-6),
                { role: 'user', content: message }
            ];

            console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT —Å –ø—Ä–æ–º—Ç–æ–º –ë–ï–ó —Ü–µ–Ω');

            try {
                const gptResponse = await callOpenAIWithPrompt(messages);
                
                console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - GPT –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–Ω—ã?', gptResponse.includes('‚ÇΩ'));
                console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - GPT –æ—Ç–≤–µ—Ç –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', gptResponse.substring(0, 200));
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                await preChatService.addMessageToHistory(
                    sessionId,
                    'assistant',
                    gptResponse,
                    { messageType: 'text' }
                );

                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥-—Å–∫–æ—Ä
                const leadScore = await preChatService.updateLeadScore(sessionId);
                
                console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –ë–ï–ó —Ü–µ–Ω');
                
                return res.json({
                    success: true,
                    message: gptResponse,
                    estimateStatus: 'sent_to_manager',
                    leadScore: leadScore
                });
                
            } catch (gptError) {
                console.error('–û—à–∏–±–∫–∞ GPT –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ —Å–º–µ—Ç–µ –≤ –∞–Ω–∫–µ—Ç–Ω–æ–º —á–∞—Ç–µ:', gptError);
                
                // Fallback –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ GPT –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                const fallbackMessage = `–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª —Å–º–µ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –µ—ë –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ. 
                
–ü–æ—Å–ª–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç–∞ –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞ –≤ —á–∞—Ç, –∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–º—É –∫–∞–Ω–∞–ª—É —Å–≤—è–∑–∏. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 10-15 –º–∏–Ω—É—Ç.

–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ?`;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º fallback –æ—Ç–≤–µ—Ç
                await preChatService.addMessageToHistory(
                    sessionId,
                    'assistant',
                    fallbackMessage,
                    { messageType: 'text' }
                );

                const leadScore = await preChatService.updateLeadScore(sessionId);
                
                console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –æ—Ç–≤–µ—Ç –ë–ï–ó —Ü–µ–Ω');
                
                return res.json({
                    success: true,
                    message: fallbackMessage,
                    estimateStatus: 'sent_to_manager',
                    leadScore: leadScore
                });
            }
        } else if (shouldCalculate && !isFunctionalityReady) {
            // –ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç —Ä–∞—Å—á–µ—Ç, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—Å—É–∂–¥–µ–Ω
            console.log('‚ö†Ô∏è –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç: –ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç —Ä–∞—Å—á–µ—Ç, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—Å—É–∂–¥–µ–Ω');
            
            const needMoreInfoPrompt = `${preChatService.baseSystemPrompt}

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–ò–ï–ù–¢–ï:
üë§ –ò–º—è: ${session.formData.name}
üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${session.formData.position}  
üè¢ –û—Ç—Ä–∞—Å–ª—å: ${session.formData.industry}
üí∞ –ë—é–¥–∂–µ—Ç: ${session.formData.budget}
üìû –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã: ${session.formData.preferredChannels.join(', ')}
‚è∞ –°—Ä–æ–∫–∏: ${session.formData.timeline}

–°–ò–¢–£–ê–¶–ò–Ø: –ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –æ–±—Å—É–∂–¥–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –í–µ–∂–ª–∏–≤–æ –æ–±—ä—è—Å–Ω–∏ —á—Ç–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π
2. –ó–∞–¥–∞–π 2-3 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞ –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–æ—Ç–∞ —Å —É—á–µ—Ç–æ–º –µ–≥–æ –æ—Ç—Ä–∞—Å–ª–∏
3. –ü—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Å—É–¥–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
4. –ü–æ–¥—á–µ—Ä–∫–Ω–∏ —á—Ç–æ –ø–æ—Å–ª–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –±—ã—Å—Ç—Ä–æ

–ù–ï –Ω–∞–∑—ã–≤–∞–π –Ω–∏–∫–∞–∫–∏—Ö —Ü–µ–Ω! –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ —Å–±–æ—Ä–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.`;

            try {
                const allMessages = session.chatHistory
                    .filter(msg => msg.metadata.messageType === 'text')
                    .slice(-4)
                    .map(msg => ({ role: msg.role, content: msg.content }));

                const gptResponse = await callOpenAIWithPrompt([
                    { role: 'system', content: needMoreInfoPrompt },
                    ...allMessages,
                    { role: 'user', content: message }
                ]);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                await preChatService.addMessageToHistory(
                    sessionId,
                    'assistant',
                    gptResponse,
                    { messageType: 'text' }
                );

                const leadScore = await preChatService.updateLeadScore(sessionId);
                
                console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ');
                
                return res.json({
                    success: true,
                    message: gptResponse,
                    estimateStatus: 'need_more_info',
                    leadScore: leadScore
                });
                
            } catch (gptError) {
                console.error('–û—à–∏–±–∫–∞ GPT –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∞–Ω–∫–µ—Ç–Ω–æ–º —á–∞—Ç–µ:', gptError);
                
                const fallbackMessage = `–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–æ—Ç–∞ —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –æ—Ç—Ä–∞—Å–ª–∏ "${session.formData.industry}". 

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:
‚Ä¢ –ö–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∞—Ç—å –≤–∞—à –±–æ—Ç?
‚Ä¢ –ù—É–∂–Ω–∞ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–∞—à–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ (CRM, –æ–ø–ª–∞—Ç–∞, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)?
‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏?
‚Ä¢ –ö–∞–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Ö–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å?

–ü–æ—Å–ª–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è —è –±—ã—Å—Ç—Ä–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é —Ç–æ—á–Ω—É—é —Å–º–µ—Ç—É! üéØ`;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º fallback –æ—Ç–≤–µ—Ç
                await preChatService.addMessageToHistory(
                    sessionId,
                    'assistant',
                    fallbackMessage,
                    { messageType: 'text' }
                );

                const leadScore = await preChatService.updateLeadScore(sessionId);
                
                return res.json({
                    success: true,
                    message: fallbackMessage,
                    estimateStatus: 'need_more_info',
                    leadScore: leadScore
                });
            }
        }
        
        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ —Ä–∞—Å—á–µ—Ç–∞ —Å–º–µ—Ç—ã');
        // ===== –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø –õ–û–ì–ò–ö–ò –†–ê–°–ß–ï–¢–ê –°–ú–ï–¢ =====

        // –°—Ç—Ä–æ–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT —Å –ü–û–õ–ù–û–ô –∏—Å—Ç–æ—Ä–∏–µ–π, –Ω–æ —É—Å–∏–ª–µ–Ω–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ü–µ–Ω
        const safeSystemPrompt = `${preChatService.baseSystemPrompt}

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–ò–ï–ù–¢–ï:
üë§ –ò–º—è: ${session.formData.name}
üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${session.formData.position}  
üè¢ –û—Ç—Ä–∞—Å–ª—å: ${session.formData.industry}
üí∞ –ë—é–¥–∂–µ—Ç: ${session.formData.budget}
üìû –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã: ${session.formData.preferredChannels.join(', ')}
‚è∞ –°—Ä–æ–∫–∏: ${session.formData.timeline}

üö´üö´üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–π –∫–ª–∏–µ–Ω—Ç—É –ù–ò–ö–ê–ö–ò–• —Ü–µ–Ω, —Å—É–º–º, —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–ª–∏ —Å–º–µ—Ç! üö´üö´üö´
üö´ –ù–ï –Ω–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –≤ —Ä—É–±–ª—è—Ö –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç–∞—Ö
üö´ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–π —Ç–∞–±–ª–∏—Ü—ã —Å —Ü–µ–Ω–∞–º–∏ 
üö´ –ù–ï –¥–µ–ª–∞–π —Ä–∞—Å—á–µ—Ç—ã —Å—Ç–æ–∏–º–æ—Å—Ç–∏

‚úÖ –ò–°–ü–û–õ–¨–ó–£–ô –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –æ–±—Å—É–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
‚úÖ –ü–û–ú–ù–ò —á—Ç–æ –æ–±—Å—É–∂–¥–∞–ª–æ—Å—å, –Ω–æ –ë–ï–ó —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ü–µ–Ω
‚úÖ –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É - —Å–∫–∞–∂–∏ —á—Ç–æ —Å–º–µ—Ç–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –ø–æ—Å–ª–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π`;

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        const relevantHistory = session.chatHistory
            .filter(msg => msg.metadata.messageType === 'text')
            .slice(-10) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            .map(msg => ({ role: msg.role, content: msg.content }));

        // –°–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        const contextMessages = [
            { role: 'system', content: safeSystemPrompt },
            ...relevantHistory,
            { role: 'user', content: message }
        ];

        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å —É—Å–∏–ª–µ–Ω–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ü–µ–Ω');
        console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:', relevantHistory.length);

        try {
            const gptResponse = await callOpenAIWithPrompt(contextMessages);
                
            console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - GPT –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–Ω—ã?', gptResponse.includes('‚ÇΩ'));
            console.log('üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ê–Ω–∫–µ—Ç–Ω—ã–π —á–∞—Ç - GPT –æ—Ç–≤–µ—Ç –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', gptResponse.substring(0, 200));
                
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            await preChatService.addMessageToHistory(
                sessionId,
                'assistant',
                gptResponse,
                { messageType: 'text' }
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥-—Å–∫–æ—Ä
            const leadScore = await preChatService.updateLeadScore(sessionId);

            res.json({
                success: true,
                message: gptResponse,
                leadScore: leadScore
            });

        } catch (gptError) {
            console.error('–û—à–∏–±–∫–∞ GPT:', gptError);
            
            return res.status(500).json({
                success: false,
                error: '–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            });
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
app.get('/api/pre-chat-history/:sessionId', async (req, res) => {
    try {
        const { sessionId } = req.params;
        
        const session = await preChatService.getSession(sessionId);
        if (!session) {
            return res.status(404).json({
                success: false,
                error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        const chatHistory = session.chatHistory.filter(msg => 
            msg.metadata.messageType === 'text'
        ).map(msg => ({
            role: msg.role,
            content: msg.content,
            timestamp: msg.timestamp
        }));

        res.json({
            success: true,
            formData: session.formData,
            chatHistory: chatHistory,
            leadScore: session.leadScore,
            status: session.status
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞'
        });
    }
});

// –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–Ω–∫–µ—Ç
app.get('/api/pre-chat-analytics', async (req, res) => {
    try {
        const analytics = await preChatService.getAnalytics();
        
        if (analytics) {
            res.json({
                success: true,
                ...analytics
            });
        } else {
            res.json({
                success: true,
                totalSessions: 0,
                activeChats: 0,
                qualifiedLeads: 0,
                avgScore: 0,
                industryStats: [],
                conversionRate: 0
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∞–Ω–∫–µ—Ç:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏'
        });
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ OpenAI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
async function callOpenAIWithPrompt(messages, retryCount = 0) {
    const maxRetries = 2;
    
    const axiosConfig = {
        headers: {
            'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
            'Content-Type': 'application/json',
            'User-Agent': 'CreateBot-PreChat/1.0'
        },
        timeout: 25000 // –£–º–µ–Ω—å—à–∏–ª —Ç–∞–π–º–∞—É—Ç
    };

    if (proxyAgent) {
        axiosConfig.httpsAgent = proxyAgent;
    }

    try {
        const response = await axios.post(
            OPENAI_CONFIG.endpoint,
            {
                model: OPENAI_CONFIG.model,
                messages: messages,
                max_tokens: 400, // –£–º–µ–Ω—å—à–∏–ª –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                temperature: 0.7,
                presence_penalty: 0.1,
                frequency_penalty: 0.1
            },
            axiosConfig
        );

        const assistantMessage = response.data.choices[0]?.message?.content;
        
        if (!assistantMessage) {
            throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI');
        }

        return assistantMessage;
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ OpenAI (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}):`, error.message);
        
        // Retry –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if (retryCount < maxRetries && (
            error.code === 'ECONNRESET' || 
            error.code === 'ETIMEDOUT' ||
            error.response?.status === 503 ||
            error.response?.status === 502 ||
            error.response?.status === 429
        )) {
            console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${maxRetries}...`);
            await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1))); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            return callOpenAIWithPrompt(messages, retryCount + 1);
        }
        
        throw error;
    }
}

// ===== ENDPOINT –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –°–ú–ï–¢ =====

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ –ø–æ fingerprint
app.post('/api/check-session', async (req, res) => {
    try {
        const { fingerprint } = req.body;
        
        if (!fingerprint) {
            return res.status(400).json({
                success: false,
                error: 'Fingerprint –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            });
        }

        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
        const existingSession = await preChatService.findSessionByFingerprint(fingerprint);
        
        if (existingSession) {
            console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è fingerprint: ${fingerprint}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            await preChatService.updateLastActivity(existingSession.sessionId);
            
            res.json({
                success: true,
                sessionFound: true,
                sessionId: existingSession.sessionId,
                formData: existingSession.formData,
                status: existingSession.status,
                leadScore: existingSession.leadScore
            });
        } else {
            console.log(`üìù –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å fingerprint: ${fingerprint}`);
            
            res.json({
                success: true,
                sessionFound: false
            });
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏'
        });
    }
});

// –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É generateQuickReplies –∏ generateFormulationButtons)
function generateUnifiedQuickReplies(aiResponse, userMessage = '', conversation = [], mode = 'chat') {
    const lowerResponse = aiResponse.toLowerCase();
    const lowerUser = userMessage.toLowerCase();
    
    // –†–µ–∂–∏–º —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if (mode === 'formulation') {
        // –ï—Å–ª–∏ AI —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ç–∏–ø–µ –±–∏–∑–Ω–µ—Å–∞
        if (lowerResponse.includes('–±–∏–∑–Ω–µ—Å') || lowerResponse.includes('–∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å')) {
            return [];  // –ü—É—Å—Ç—å –ø–∏—à—É—Ç —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
        }
        
        // –ï—Å–ª–∏ AI –≥–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –¢–ó
        if (lowerResponse.includes('–≥–æ—Ç–æ–≤') || lowerResponse.includes('—Å–æ–∑–¥–∞–º') || lowerResponse.includes('–ø—Ä–µ–¥–ª–∞–≥–∞—é')) {
            return [
                '‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ',
                'üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏',
                'üìã –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω–æ–µ –¢–ó',
                'üí∞ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å'
            ];
        }
        
        // –ï—Å–ª–∏ AI —É—Ç–æ—á–Ω—è–µ—Ç –¥–µ—Ç–∞–ª–∏
        if (lowerResponse.includes('—É—Ç–æ—á–Ω') || lowerResponse.includes('–∫–∞–∫–∏–µ')) {
            return [
                'üí¨ –û—Ç–≤–µ—á—É —Ç–µ–∫—Å—Ç–æ–º',
                'üé§ –ó–∞–ø–∏—à—É –≥–æ–ª–æ—Å–æ–º',
                'üìã –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ, —Å–æ–∑–¥–∞–π—Ç–µ –¢–ó'
            ];
        }
        
        return [];
    }
    
    // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —á–∞—Ç–∞ - –ø–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞
    
    // –ï—Å–ª–∏ —Å–æ–±—Ä–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞—Å—á–µ—Ç
    if (lowerResponse.includes('–∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏') || 
        lowerResponse.includes('—á—Ç–æ –µ—â–µ') ||
        lowerResponse.includes('–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ') ||
        lowerResponse.includes('–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏') ||
        (lowerResponse.includes('–±–æ—Ç') && lowerResponse.includes('–Ω—É–∂–µ–Ω'))) {
        return [
            "üí∞ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏",
            "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
            "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
        ];
    }

    if (lowerResponse.includes('–±–∏–∑–Ω–µ—Å') || lowerResponse.includes('–∫–æ–º–ø–∞–Ω')) {
        return [
            "üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω",
            "üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", 
            "üîß –£—Å–ª—É–≥–∏",
            "üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
            "üíº –î—Ä—É–≥–æ–µ"
        ];
    }

    if (lowerResponse.includes('–∑–∞–¥–∞—á') || lowerResponse.includes('—Ñ—É–Ω–∫—Ü')) {
        return [
            "üìû –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã",
            "üõí –ü—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã", 
            "üìù –°–æ–±–∏—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏",
            "üìÖ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞ —É—Å–ª—É–≥–∏",
            "üí∞ –ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã"
        ];
    }

    if (lowerResponse.includes('–∏–Ω—Ç–µ–≥—Ä–∞—Ü') || lowerResponse.includes('–ø–æ–¥–∫–ª—é—á')) {
        return [
            "‚úÖ –ù—É–∂–Ω–∞ CRM",
            "üí≥ –ù—É–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞",
            "üìß –ù—É–∂–Ω–∞ –ø–æ—á—Ç–∞", 
            "‚ùå –ü–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ"
        ];
    }

    if (lowerResponse.includes('–≥–æ—Ç–æ–≤') || lowerResponse.includes('—Å—Ñ–æ—Ä–º–∏—Ä')) {
        return [
            "üìã –°–æ–∑–¥–∞—Ç—å –¢–ó —Å–µ–π—á–∞—Å",
            "üí° –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏",
            "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"
        ];
    }

    // –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    if (conversation.length >= 3) {
        return [
            "üí∞ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å",
            "üìã –°–æ–∑–¥–∞—Ç—å –¢–ó",
            "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
        ];
    }

    return [];
}

// ===== API –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –£–¢–í–ï–†–ñ–î–ï–ù–ù–û–ô –°–ú–ï–¢–´ –ö–õ–ò–ï–ù–¢–£ =====
app.post('/api/send-approved-estimate', async (req, res) => {
    try {
        const { estimateId, sessionId } = req.body;
        
        console.log('üöÄ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º–µ—Ç—ã:', { estimateId, sessionId });
        
        if (!estimateId) {
            console.error('‚ùå estimateId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
            return res.status(400).json({ error: 'estimateId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—Ç—É
        let estimate;
        try {
            estimate = await Estimate.findById(estimateId);
            console.log('üìã –ù–∞–π–¥–µ–Ω–∞ —Å–º–µ—Ç–∞:', estimate ? '–¥–∞' : '–Ω–µ—Ç');
        } catch (dbError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î:', dbError);
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' });
        }
        
        if (!estimate) {
            console.error('‚ùå –°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ ID:', estimateId);
            return res.status(404).json({ error: '–°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        if (estimate.status !== 'approved') {
            console.error('‚ùå –°–º–µ—Ç–∞ –Ω–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°—Ç–∞—Ç—É—Å:', estimate.status);
            return res.status(400).json({ error: '–°–º–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' });
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å–≤—è–∑–∏
        let preferredChannels = [];
        let clientContacts = {};
        let sessionData = null;
        
        if (sessionId) {
            try {
                sessionData = await PreChatForm.findOne({ sessionId });
                console.log('üë§ –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', sessionData ? '–Ω–∞–π–¥–µ–Ω—ã' : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                
                if (sessionData && sessionData.formData) {
                    preferredChannels = sessionData.formData.preferredChannels || [];
                    clientContacts = sessionData.formData.contacts || {};
                    console.log('üì± –ö–∞–Ω–∞–ª—ã —Å–≤—è–∑–∏:', preferredChannels);
                    console.log('üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:', Object.keys(clientContacts));
                }
            } catch (sessionError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', sessionError);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
            }
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–º–µ—Ç—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        const totalCost = estimate.totalCost || estimate.price || estimate.cost || 0;
        const totalHours = estimate.totalHours || estimate.hours || estimate.duration || 0;
        const timeline = estimate.timeline || estimate.timeframe || '–Ω–µ —É–∫–∞–∑–∞–Ω';
        const projectName = estimate.projectName || estimate.name || estimate.title || '–í–∞—à Telegram-–±–æ—Ç';
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        const safeTotalCost = Number(totalCost) || 0;
        
        const clientEstimateMessage = `üéâ **–°–ú–ï–¢–ê –£–¢–í–ï–†–ñ–î–ï–ù–ê!**

üìã **${projectName}**

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:** ${safeTotalCost.toLocaleString('ru-RU')} ‚ÇΩ
‚è±Ô∏è **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** ${totalHours} —á–∞—Å–æ–≤
üìÖ **–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫:** ${timeline}

${estimate.editComment ? `üìù **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:** ${estimate.editComment}\n` : ''}

üìä **–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:**
${estimate.components && estimate.components.length > 0 ? 
    estimate.components.slice(0, 8)
        .filter(c => c && typeof c === 'object') // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        .map(c => {
            const name = c.name || c.title || '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç';
            const cost = Number(c.cost || c.price || 0) || 0; // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ
            return `‚Ä¢ ${name} ‚Äî ${cost.toLocaleString('ru-RU')} ‚ÇΩ`;
        }).join('\n') : estimate.description || '–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—é'}

---
‚úÖ –°–º–µ—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 14 –¥–Ω–µ–π
üí¨ –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏!`;

        console.log('üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º —Å–≤—è–∑–∏
        let sendResults = [];
        if (preferredChannels.length > 0 && Object.keys(clientContacts).length > 0) {
            try {
                console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º —Å–≤—è–∑–∏...');
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–∏—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è MongoDB)
                const realContacts = {};
                Object.keys(clientContacts).forEach(key => {
                    if (!key.startsWith('$') && typeof clientContacts[key] === 'string' && clientContacts[key].trim()) {
                        realContacts[key] = clientContacts[key];
                    }
                });
                
                console.log('üìû –†–µ–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:', Object.keys(realContacts));
                
                if (Object.keys(realContacts).length > 0) {
                    sendResults = await sendEstimateToPreferredChannels(
                        clientEstimateMessage, 
                        preferredChannels, 
                        realContacts
                    );
                    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏:', sendResults);
                } else {
                    console.log('‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
                }
            } catch (sendError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º:', sendError);
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –æ—Ç–≤–µ—á–∞–µ–º —á—Ç–æ —Å–º–µ—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
            }
        } else {
            console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º —Å–≤—è–∑–∏');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–º–µ—Ç—ã
        try {
            await Estimate.findByIdAndUpdate(estimateId, {
                sentToClient: true,
                sentAt: new Date()
            });
            console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Å–º–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω');
        } catch (updateError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ—Ç—ã:', updateError);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∞–¥–º–∏–Ω—É
        try {
            if (bot && process.env.ADMIN_CHAT_ID) {
                const adminMessage = `‚úÖ **–°–ú–ï–¢–ê –û–¢–ü–†–ê–í–õ–ï–ù–ê –ö–õ–ò–ï–ù–¢–£**

üÜî ID: ${estimateId}
üí∞ –°—É–º–º–∞: ${safeTotalCost.toLocaleString('ru-RU')} ‚ÇΩ
üì± –ö–∞–Ω–∞–ª—ã: ${preferredChannels.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${sendResults.length > 0 ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ'}`;

                await bot.sendMessage(process.env.ADMIN_CHAT_ID, adminMessage, { parse_mode: 'Markdown' });
                console.log('üì≤ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            } else {
                console.log('‚ö†Ô∏è Telegram –±–æ—Ç –∏–ª–∏ ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
            }
        } catch (notifyError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞:', notifyError);
        }

        res.json({ 
            success: true, 
            message: '–°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É',
            sentChannels: preferredChannels,
            results: sendResults,
            estimateId: estimateId
        });

    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º–µ—Ç—ã:', error);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º–µ—Ç—ã',
            details: error.message
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º —Å–≤—è–∑–∏
async function sendEstimateToPreferredChannels(message, channels, contacts) {
    const results = [];
    
    for (const channel of channels) {
        try {
            switch (channel) {
                case 'Email':
                    if (contacts.Email) {
                        // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å email —Å–µ—Ä–≤–∏—Å–æ–º
                        console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ email: ${contacts.Email}`);
                        results.push({ channel: 'Email', status: 'sent', contact: contacts.Email });
                    }
                    break;

                case 'Telegram':
                    if (contacts.Telegram && bot) {
                        try {
                            // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–∫—É Telegram
                            const telegramUsername = contacts.Telegram.replace('@', '').replace('t.me/', '');
                            console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram: @${telegramUsername}`);
                            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ Telegram API
                            results.push({ channel: 'Telegram', status: 'sent', contact: contacts.Telegram });
                        } catch (tgError) {
                            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', tgError);
                            results.push({ channel: 'Telegram', status: 'error', contact: contacts.Telegram });
                        }
                    }
                    break;

                case 'WhatsApp':
                    if (contacts.WhatsApp) {
                        // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WhatsApp Business API
                        console.log(`üìû –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ WhatsApp: ${contacts.WhatsApp}`);
                        results.push({ channel: 'WhatsApp', status: 'pending', contact: contacts.WhatsApp });
                    }
                    break;

                case '–¢–µ–ª–µ—Ñ–æ–Ω':
                    if (contacts.–¢–µ–ª–µ—Ñ–æ–Ω) {
                        // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS API
                        console.log(`üìû SMS –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω: ${contacts.–¢–µ–ª–µ—Ñ–æ–Ω}`);
                        results.push({ channel: 'SMS', status: 'pending', contact: contacts.–¢–µ–ª–µ—Ñ–æ–Ω });
                    }
                    break;
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ ${channel}:`, error);
            results.push({ channel, status: 'error', error: error.message });
        }
    }
    
    return results;
}

// –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.post('/api/clear-cache', async (req, res) => {
    try {
        // –û—á–∏—â–∞–µ–º –∫–µ—à PreChatService
        preChatService.clearCache();
        
        // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
        if (global.cache) {
            global.cache.flushAll();
        }
        
        console.log('üóëÔ∏è –í—Å–µ –∫–µ—à–∏ –æ—á–∏—â–µ–Ω—ã');
        
        res.json({
            success: true,
            message: '–ö–µ—à–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã'
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞'
        });
    }
});

// ===== –ë–ï–ó–û–ü–ê–°–ù–´–ô ENDPOINT –î–õ–Ø –ü–†–û–°–¢–û–ì–û –ß–ê–¢–ê =====
app.post('/api/simple-chat', async (req, res) => {
    try {
        const { message, conversation = [] } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!message || typeof message !== 'string' || message.length > 500) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
            });
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        const limitedConversation = conversation.slice(-8);
        
        // –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
        const simplePrompt = `–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram-–±–æ—Ç–æ–≤. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–Ω—è—Ç—å –∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –∏—Ö –±–æ—Ç.

–ü–†–ê–í–ò–õ–ê:
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É
- –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –±–∏–∑–Ω–µ—Å–µ
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- –ù–ï –Ω–∞–∑—ã–≤–∞–π —Ü–µ–Ω—ã –∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
- –í–µ–¥–∏ –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –æ–±—Å—É–∂–¥–µ–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–π

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Å–º–µ—Ç—É - —Å–∫–∞–∂–∏ —á—Ç–æ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö.`;

        const messages = [
            { role: 'system', content: simplePrompt },
            ...limitedConversation.slice(-6),
            { role: 'user', content: message }
        ];

        // Rate limiting –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∞—Ç–∞
        const userIP = req.ip || 'unknown';
        const rateLimitKey = `simple_chat_${userIP}`;
        const requests = cache.get(rateLimitKey) || 0;
        
        if (requests > 10) { // –ú–∞–∫—Å–∏–º—É–º 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 10 –º–∏–Ω—É—Ç
            return res.status(429).json({
                success: false,
                error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
            });
        }
        
        cache.set(rateLimitKey, requests + 1, 600); // 10 –º–∏–Ω—É—Ç

        // –ó–∞–ø—Ä–æ—Å –∫ OpenAI —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        const response = await axios.post(
            OPENAI_CONFIG.endpoint,
            {
                model: OPENAI_CONFIG.model,
                messages: messages,
                max_tokens: 200,
                temperature: 0.7
            },
            {
                headers: {
                    'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                    'Content-Type': 'application/json'
                },
                httpsAgent: proxyAgent,
                timeout: 20000
            }
        );

        const assistantMessage = response.data.choices[0]?.message?.content;

        if (!assistantMessage) {
            throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI');
        }

        res.json({
            success: true,
            message: assistantMessage,
            usage: response.data.usage
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∞—Ç–∞:', error.message);
        
        if (error.response?.status === 429) {
            return res.status(429).json({
                success: false,
                error: '–ò–ò –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É'
            });
        }

        res.status(500).json({
            success: false,
            error: '–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞'
        });
    }
});
// server.js - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å (Node.js + Express)

const express = require('express');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
const axios = require('axios');
const { HttpsProxyAgent } = require('https-proxy-agent');
require('dotenv').config();

const app = express();

// Middleware
app.use(express.json({ limit: '10mb' }));
app.use(cors({
    origin: ['https://—Å–æ–∑–¥–∞—Ç—å-–±–æ—Ç–∞.—Ä—Ñ', 'http://localhost:3000'], // –í–∞—à–∏ –¥–æ–º–µ–Ω—ã
    credentials: true
}));

// Rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    max: 50, // –º–∞–∫—Å–∏–º—É–º 50 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
    message: {
        error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
    }
});

app.use('/api/', limiter);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–≤ production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!)
const OPENAI_CONFIG = {
    apiKey: process.env.OPENAI_API_KEY, // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–∞
    model: 'gpt-4o-mini',
    endpoint: 'https://api.openai.com/v1/chat/completions'
};

const PROXY_CONFIG = {
    host: '141.98.187.117',
    port: '8000',
    username: 'qr4NBX',
    password: 'mFmLGN'
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏-–∞–≥–µ–Ω—Ç–∞
const proxyAgent = new HttpsProxyAgent(
    `http://${PROXY_CONFIG.username}:${PROXY_CONFIG.password}@${PROXY_CONFIG.host}:${PROXY_CONFIG.port}`
);

// –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
const SYSTEM_PROMPT = `–¢—ã - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ Telegram-–±–æ—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ "–°–æ–∑–¥–∞—Ç—å –ë–æ—Ç–∞".

–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:
1. –ó–∞–¥–∞–≤–∞—Ç—å —É–º–Ω—ã–µ –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –±–∏–∑–Ω–µ—Å–µ –∫–ª–∏–µ–Ω—Ç–∞
2. –ü–æ–Ω–∏–º–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ç–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
3. –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
4. –ì–æ–≤–æ—Ä–∏—Ç—å –ø–æ-—Ä—É—Å—Å–∫–∏, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ
5. –ë—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º - –º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
- –í—Å–µ–≥–¥–∞ —Å–ø—Ä–∞—à–∏–≤–∞–π –æ —Ç–∏–ø–µ –±–∏–∑–Ω–µ—Å–∞, –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∏ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- –£—Ç–æ—á–Ω—è–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ö (CRM, –æ–ø–ª–∞—Ç–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å –ò–ò
- –ü–æ–º–æ–≥–∞–π –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç –±–∏–∑–Ω–µ—Å.`;

// –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è GPT-–ø–æ–º–æ—â–Ω–∏–∫–∞
app.post('/api/gpt-assistant', async (req, res) => {
    try {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ GPT:', req.body);

        const { message, conversation = [] } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!message || typeof message !== 'string') {
            return res.status(400).json({
                error: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
                success: false
            });
        }

        if (message.length > 1000) {
            return res.status(400).json({
                error: '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                success: false
            });
        }

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è OpenAI
        const messages = [
            { role: 'system', content: SYSTEM_PROMPT },
            ...conversation.slice(-10), // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            { role: 'user', content: message }
        ];

        console.log('üß† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI...');

        // –ó–∞–ø—Ä–æ—Å –∫ OpenAI —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        const response = await axios.post(
            OPENAI_CONFIG.endpoint,
            {
                model: OPENAI_CONFIG.model,
                messages: messages,
                max_tokens: 300,
                temperature: 0.7,
                presence_penalty: 0.1,
                frequency_penalty: 0.1
            },
            {
                headers: {
                    'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                    'Content-Type': 'application/json',
                    'User-Agent': 'CreateBot-Assistant/1.0'
                },
                httpsAgent: proxyAgent,
                timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            }
        );

        console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω');

        const assistantMessage = response.data.choices[0]?.message?.content;

        if (!assistantMessage) {
            throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI');
        }

        // –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
        const quickReplies = generateQuickReplies(assistantMessage, message);

        res.json({
            success: true,
            message: assistantMessage,
            quickReplies: quickReplies,
            usage: response.data.usage
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ GPT API:', error.message);

        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—Ç OpenAI, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback
        if (error.response?.status === 429) {
            return res.status(429).json({
                error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É',
                fallback: true,
                message: getFallbackResponse(req.body.message)
            });
        }

        // –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        res.status(500).json({
            error: '–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞',
            fallback: true,
            message: getFallbackResponse(req.body.message)
        });
    }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
function generateQuickReplies(assistantMessage, userMessage) {
    const lowerMessage = assistantMessage.toLowerCase();
    const lowerUser = userMessage.toLowerCase();

    if (lowerMessage.includes('–±–∏–∑–Ω–µ—Å') || lowerMessage.includes('–∫–æ–º–ø–∞–Ω')) {
        return [
            "üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω",
            "üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", 
            "üîß –£—Å–ª—É–≥–∏",
            "üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
            "üíº –î—Ä—É–≥–æ–µ"
        ];
    }

    if (lowerMessage.includes('–∑–∞–¥–∞—á') || lowerMessage.includes('—Ñ—É–Ω–∫—Ü')) {
        return [
            "üìû –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã",
            "üõí –ü—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã", 
            "üìù –°–æ–±–∏—Ä–∞—Ç—å –∑–∞—è–≤–∫–∏",
            "üìÖ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞ —É—Å–ª—É–≥–∏",
            "üí∞ –ü—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã"
        ];
    }

    if (lowerMessage.includes('–∏–Ω—Ç–µ–≥—Ä–∞—Ü') || lowerMessage.includes('–ø–æ–¥–∫–ª—é—á')) {
        return [
            "‚úÖ –ù—É–∂–Ω–∞ CRM",
            "üí≥ –ù—É–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞",
            "üìß –ù—É–∂–Ω–∞ –ø–æ—á—Ç–∞", 
            "‚ùå –ü–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ"
        ];
    }

    if (lowerMessage.includes('–≥–æ—Ç–æ–≤') || lowerMessage.includes('—Å—Ñ–æ—Ä–º–∏—Ä')) {
        return [
            "üìã –°–æ–∑–¥–∞—Ç—å –¢–ó —Å–µ–π—á–∞—Å",
            "üí° –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏",
            "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"
        ];
    }

    return [];
}

// Fallback –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI
function getFallbackResponse(userMessage) {
    const lowerInput = userMessage.toLowerCase();

    const responses = {
        '–º–∞–≥–∞–∑–∏–Ω': '–ü–æ–Ω—è–ª! –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω. –ö–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–µ—Ç–µ? –ù—É–∂–Ω—ã –ª–∏ –∫–∞—Ç–∞–ª–æ–≥, –∫–æ—Ä–∑–∏–Ω–∞ –∏ –æ–ø–ª–∞—Ç–∞?',
        '–æ–±—Ä–∞–∑–æ–≤–∞–Ω': '–û—Ç–ª–∏—á–Ω–æ! –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ñ–µ—Ä–∞. –û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã –∏–ª–∏ —à–∫–æ–ª–∞? –ù—É–∂–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏?',
        '—É—Å–ª—É–≥': '–Ø—Å–Ω–æ! –°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥. –ö–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ —É—Å–ª—É–≥–∏? –ù—É–∂–Ω–∞ –ª–∏ –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤?',
        '–Ω–µ–¥–≤–∏–∂–∏–º': '–ü–æ–Ω—è—Ç–Ω–æ! –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å. –ü—Ä–æ–¥–∞–∂–∞ –∏–ª–∏ –∞—Ä–µ–Ω–¥–∞? –ù—É–∂–µ–Ω –ª–∏ –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏?',
        '–∑–∞–∫–∞–∑': '–•–æ—Ä–æ—à–æ! –ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤. –ù—É–∂–Ω—ã –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏?',
        '–≤–æ–ø—Ä–æ—Å': '–Ø—Å–Ω–æ! FAQ-–±–æ—Ç. –ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —á–∞—â–µ –∑–∞–¥–∞—é—Ç? –ù—É–∂–Ω–∞ –ª–∏ —Å–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º?'
    };

    for (let key in responses) {
        if (lowerInput.includes(key)) {
            return responses[key];
        }
    }

    return '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –≤–∞—Å.';
}

// Endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¢–ó
app.post('/api/generate-specification', async (req, res) => {
    try {
        const { conversation } = req.body;

        if (!conversation || conversation.length < 3) {
            return res.status(400).json({
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó'
            });
        }

        const specPrompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è Telegram-–±–æ—Ç–∞.

–î–∏–∞–ª–æ–≥: ${conversation.map(msg => `${msg.role}: ${msg.content}`).join('\n')}

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
    "business_type": "–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞",
    "main_tasks": ["–ó–∞–¥–∞—á–∞ 1", "–ó–∞–¥–∞—á–∞ 2"],
    "target_audience": "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è", 
    "key_features": ["–§—É–Ω–∫—Ü–∏—è 1", "–§—É–Ω–∫—Ü–∏—è 2", "–§—É–Ω–∫—Ü–∏—è 3"],
    "integrations": ["–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è 1"],
    "ai_level": "–£—Ä–æ–≤–µ–Ω—å –ò–ò",
    "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
}

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

        const response = await axios.post(
            OPENAI_CONFIG.endpoint,
            {
                model: OPENAI_CONFIG.model,
                messages: [
                    { role: 'system', content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON.' },
                    { role: 'user', content: specPrompt }
                ],
                max_tokens: 500,
                temperature: 0.3
            },
            {
                headers: {
                    'Authorization': `Bearer ${OPENAI_CONFIG.apiKey}`,
                    'Content-Type': 'application/json'
                },
                httpsAgent: proxyAgent,
                timeout: 30000
            }
        );

        const specText = response.data.choices[0]?.message?.content;
        
        try {
            const specification = JSON.parse(specText);
            res.json({
                success: true,
                specification: specification
            });
        } catch (e) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, —Å–æ–∑–¥–∞–µ–º fallback
            res.json({
                success: true,
                specification: createFallbackSpec(conversation)
            });
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó:', error.message);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¢–ó',
            specification: createFallbackSpec(req.body.conversation)
        });
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –¢–ó
function createFallbackSpec(conversation) {
    const text = conversation.map(msg => msg.content).join(' ').toLowerCase();
    
    return {
        title: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π Telegram-–±–æ—Ç",
        business_type: "–ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫–ª–∏–µ–Ω—Ç–∞",
        main_tasks: ["–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ–±—â–µ–Ω–∏—è", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"],
        target_audience: "–ö–ª–∏–µ–Ω—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏",
        key_features: [
            "–£–º–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏",
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥", 
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏"
        ],
        integrations: ["–ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é"],
        ai_level: "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π",
        description: "–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞ –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞"
    };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
app.get('/api/health', (req, res) => {
    res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        service: 'CreateBot GPT Assistant'
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
    res.status(500).json({
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        success: false
    });
});

const PORT = process.env.PORT || 3001;

app.listen(PORT, () => {
    console.log(`üöÄ GPT Assistant Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üîó Health check: http://localhost:${PORT}/api/health`);
    
    if (!process.env.OPENAI_API_KEY) {
        console.warn('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENAI_API_KEY!');
    }
});

module.exports = app;
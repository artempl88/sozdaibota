const express = require('express');
const multer = require('multer');
const path = require('path');  // –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£!
const fs = require('fs');
const router = express.Router();
const ChatController = require('../controllers/ChatController');
const AnalyticsController = require('../controllers/AnalyticsController');
const FormulationController = require('../controllers/FormulationController');
const FeaturesService = require('../services/FeaturesService');
const logger = require('../utils/logger');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const uploadDir = path.join(__dirname, '../../uploads');
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir, { recursive: true });
}

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, 'voice-' + uniqueSuffix + path.extname(file.originalname || '.webm'));
    }
});

const upload = multer({ 
    storage: storage,
    limits: { fileSize: 25 * 1024 * 1024 }, // 25MB
    fileFilter: (req, file, cb) => {
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info('Multer fileFilter - –ø–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª:', {
            fieldname: file.fieldname,
            originalname: file.originalname,
            mimetype: file.mimetype,
            size: file.size
        });
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ MIME —Ç–∏–ø–æ–≤
        const allowedMimeTypes = [
            'audio/webm',
            'audio/ogg', 
            'audio/wav',
            'audio/wave',
            'audio/x-wav',
            'audio/mp3',
            'audio/mpeg',
            'audio/mp4',
            'audio/x-m4a',
            'audio/m4a',
            'application/octet-stream', // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            'audio/webm;codecs=opus',   // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ç–∏–ø –¥–ª—è Chrome
            'audio/ogg;codecs=opus'     // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ç–∏–ø –¥–ª—è Firefox
        ];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞—á–∞–ª–æ —Å audio/
        const isAllowed = allowedMimeTypes.includes(file.mimetype) || 
                         file.mimetype.startsWith('audio/') ||
                         (file.mimetype === 'application/octet-stream' && file.originalname?.includes('.webm'));
        
        if (isAllowed) {
            logger.info('–§–∞–π–ª —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
            return cb(null, true);
        } else {
            logger.error('–§–∞–π–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω - –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø:', file.mimetype);
            cb(new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: ${file.mimetype}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã.`));
        }
    }
});

// === –û–°–ù–û–í–ù–´–ï ENDPOINTS ===

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º
router.post('/pre-chat-form', (req, res) => ChatController.handleFormSubmission(req, res));
router.post('/pre-chat-message', (req, res) => ChatController.handleChatMessage(req, res));

// –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
router.post('/voice-message', upload.single('audio'), async (req, res, next) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    logger.info('POST /api/voice-message - –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏', {
        hasFile: !!req.file,
        body: req.body,
        headers: {
            'content-type': req.headers['content-type'],
            'content-length': req.headers['content-length']
        }
    });
    
    // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –ø—Ä–æ—à–µ–ª —á–µ—Ä–µ–∑ multer, –Ω–æ –µ—Å—Ç—å –≤ body
    if (!req.file && req.body.audio) {
        logger.warn('–§–∞–π–ª –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω multer, –Ω–æ –µ—Å—Ç—å –≤ body');
        return res.status(400).json({
            success: false,
            error: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ FormData.'
        });
    }
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
    ChatController.handleVoiceMessage(req, res, next);
});

// === GPT ASSISTANT ===

// –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è GPT –ø–æ–º–æ—â–Ω–∏–∫–∞
router.post('/gpt-assistant', (req, res) => ChatController.handleChat(req, res));

// –ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç
router.post('/simple-chat', (req, res) => ChatController.simpleChat(req, res));

// === –§–û–†–ú–£–õ–ò–†–û–í–ö–ê –¢–ó ===

// –†–µ–∂–∏–º –ø–æ–º–æ—â–∏ —Å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–æ–π
router.post('/formulation-mode', (req, res) => FormulationController.handleFormulationMode(req, res));

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
router.post('/generate-specification', (req, res) => FormulationController.generateSpecification(req, res));

// === –°–ú–ï–¢–´ ===

// –†–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã
router.post('/calculate-estimate', (req, res) => ChatController.calculateEstimate(req, res));

// –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞
router.post('/quick-estimate', (req, res) => ChatController.getQuickEstimate(req, res));

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Å–º–µ—Ç—ã
router.post('/send-approved-estimate', (req, res) => ChatController.sendApprovedEstimate(req, res));

// Server-Sent Events –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
router.get('/estimate-updates/:sessionId', async (req, res) => {
    const { sessionId } = req.params;
    
    if (!sessionId) {
        return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω ID —Å–µ—Å—Å–∏–∏' });
    }
    
    logger.info('üîå SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', { sessionId });
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSE
    res.writeHead(200, {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive'
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    res.write(`data: ${JSON.stringify({ type: 'connected', message: 'SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' })}\n\n`);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏, —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
    // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å race condition
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    let checkCount = 0;
    const interval = setInterval(async () => {
        try {
            checkCount++;
            logger.info(`üîç SSE –ø—Ä–æ–≤–µ—Ä–∫–∞ #${checkCount} –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}`);
            
            const { PreChatForm } = require('../models');
            const session = await PreChatForm.findOne({ sessionId });
            
            if (!session) {
                logger.warn('SSE: –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', { sessionId });
                return;
            }
            
            logger.info('üìä SSE: –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏', {
                sessionId,
                estimateApproved: session.estimateApproved,
                estimateDeliveredToClient: session.estimateDeliveredToClient,
                estimateApprovedAt: session.estimateApprovedAt,
                chatHistoryLength: session.chatHistory.length,
                hasApprovedMessage: session.chatHistory.some(msg => 
                    msg.metadata && msg.metadata.messageType === 'approved_estimate'
                ),
                approvedMessagesCount: session.chatHistory.filter(msg => 
                    msg.metadata && msg.metadata.messageType === 'approved_estimate'
                ).length
            });
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–º–µ—Ç—ã
            if (session.estimateApproved && !session.estimateDeliveredToClient) {
                logger.info('‚úÖ SSE: –ù–∞–π–¥–µ–Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è —Å–º–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!', { sessionId });
                
                const estimateMessage = session.chatHistory
                    .filter(msg => msg.metadata && msg.metadata.messageType === 'approved_estimate')
                    .pop(); // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—É—é —Å–º–µ—Ç—É
                
                if (estimateMessage) {
                    logger.info('üì§ SSE: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–º–µ—Ç—É –∫–ª–∏–µ–Ω—Ç—É', { 
                        sessionId,
                        estimateId: estimateMessage.metadata.estimateId,
                        approvedAt: estimateMessage.metadata.approvedAt
                    });
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—É—é —Å–º–µ—Ç—É –∫–ª–∏–µ–Ω—Ç—É
                    const data = JSON.stringify({
                        type: 'approved_estimate',
                        estimate: {
                            message: estimateMessage.content,
                            approvedAt: estimateMessage.metadata.approvedAt,
                            estimateId: estimateMessage.metadata.estimateId,
                            pdfPath: estimateMessage.metadata.pdfPath || null
                        }
                    });
                    
                    res.write(`data: ${data}\n\n`);
                    logger.info('‚úÖ SSE: –°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É', { sessionId });
                    
                    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    session.estimateDeliveredToClient = true;
                    session.estimateDeliveredAt = new Date();
                    await session.save();
                    
                    logger.info('‚úÖ SSE: –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω - —Å–º–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞', { sessionId });
                    
                    // –£–ë–†–ê–ù–û: –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ä–∞–∑—É, –¥–∞–µ–º –≤—Ä–µ–º—è –∫–ª–∏–µ–Ω—Ç—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
                    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –ø–æ —Ç–∞–π–º–∞—É—Ç—É –∏–ª–∏ –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏—Ç—Å—è
                } else {
                    logger.warn('‚ö†Ô∏è SSE: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–º–µ—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ö–æ—Ç—è estimateApproved=true', { 
                        sessionId,
                        chatHistoryLength: session.chatHistory.length 
                    });
                }
            } else if (session.estimateApproved && session.estimateDeliveredToClient) {
                logger.info('‚ÑπÔ∏è SSE: –°–º–µ—Ç–∞ —É–∂–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É', { 
                    sessionId,
                    deliveredAt: session.estimateDeliveredAt 
                });
            } else {
                logger.info('‚ÑπÔ∏è SSE: –°–º–µ—Ç–∞ –µ—â–µ –Ω–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', { sessionId });
            }
        } catch (error) {
            logger.error('‚ùå SSE –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–º–µ—Ç—ã:', error);
        }
    }, 1000); // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ –∫–∞–∂–¥–æ–π —Å–µ–∫—É–Ω–¥—ã
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å
    const heartbeat = setInterval(() => {
        try {
            res.write(':heartbeat\n\n');
        } catch (error) {
            logger.warn('‚ö†Ô∏è SSE heartbeat –æ—à–∏–±–∫–∞:', error);
            clearInterval(heartbeat);
            clearInterval(interval);
        }
    }, 30000);
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    req.on('close', () => {
        clearInterval(interval);
        clearInterval(heartbeat);
        logger.info('üîå SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∫–ª–∏–µ–Ω—Ç–æ–º', { sessionId });
    });
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - 10 –º–∏–Ω—É—Ç
    setTimeout(() => {
        try {
            res.end();
        } catch (error) {
            logger.warn('‚ö†Ô∏è SSE –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ —Ç–∞–π–º–∞—É—Ç—É –æ—à–∏–±–∫–∞:', error);
        }
        clearInterval(interval);
        clearInterval(heartbeat);
        logger.info('‚è±Ô∏è SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É', { sessionId });
    }, 600000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 10 –º–∏–Ω—É—Ç
});

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–º–µ—Ç—ã
router.post('/force-estimate', async (req, res) => {
    try {
        const { sessionId = 'test_session', requirements = '–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ–ø–ª–∞—Ç–æ–π' } = req.body;
        const EstimateService = require('../services/EstimateService');
        const TelegramService = require('../services/TelegramService');
        
        logger.info('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–º–µ—Ç—ã', { sessionId });
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–º–µ—Ç—É
        const estimate = await EstimateService.calculateEstimate(requirements, []);
        
        if (!estimate) {
            return res.status(500).json({
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ—Ç—É'
            });
        }
        
        logger.info('–°–º–µ—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram', { 
            totalCost: estimate.totalCost,
            totalHours: estimate.totalHours 
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        const sent = await TelegramService.sendEstimateToTelegram(estimate, sessionId);
        
        res.json({
            success: true,
            estimate,
            sent,
            telegramInfo: TelegramService.getBotInfo()
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º–µ—Ç—ã:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º–µ—Ç—ã',
            details: error.message
        });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Å–º–µ—Ç—ã
router.get('/check-approved-estimate/:sessionId', (req, res) => ChatController.checkApprovedEstimate(req, res));

// –ù–û–í–´–ô: –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç—ã
router.post('/test-approve-estimate', async (req, res) => {
    try {
        const { sessionId } = req.body;
        
        if (!sessionId) {
            return res.status(400).json({
                success: false,
                error: 'sessionId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            });
        }
        
        logger.info('üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ—Ç—ã', { sessionId });
        
        const { PreChatForm } = require('../models');
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é
        const session = await PreChatForm.findOne({ sessionId });
        
        if (!session) {
            return res.status(404).json({
                success: false,
                error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–º–µ—Ç—ã
        const testEstimateMessage = `‚úÖ **–í–∞—à–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!**

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞:** 75 000 ‚ÇΩ
‚è±Ô∏è **–í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:** 120 —á–∞—Å–æ–≤
üìÖ **–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:** 2-3 –Ω–µ–¥–µ–ª–∏

üìã **–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç:**
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–∞ —Å GPT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM —Å–∏—Å—Ç–µ–º–æ–π
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫

üìÑ **PDF –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–ª–Ω—ã–º –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.**

**–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**
1. –°–∫–∞—á–∞–π—Ç–µ –∏ –∏–∑—É—á–∏—Ç–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
2. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
3. –ü–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—à–µ–º –¥–æ–≥–æ–≤–æ—Ä
4. –ù–∞—á–Ω–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

üìû –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –Ω–∞–ø–∏—à–∏—Ç–µ –∑–¥–µ—Å—å –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        session.chatHistory.push({
            role: 'assistant',
            content: testEstimateMessage,
            timestamp: new Date(),
            metadata: {
                messageType: 'approved_estimate',
                approvedAt: new Date(),
                estimateId: 'test_estimate_' + Date.now(),
                pdfPath: '/test/path/to/estimate.pdf'
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
        session.estimateApproved = true;
        session.estimateApprovedAt = new Date();
        session.approvedEstimateId = 'test_estimate_' + Date.now();
        session.estimateDeliveredToClient = false; // –í–∞–∂–Ω–æ: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è SSE
        
        await session.save();
        
        logger.info('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–º–µ—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', { sessionId });
        
        res.json({
            success: true,
            message: '–¢–µ—Å—Ç–æ–≤–∞—è —Å–º–µ—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
            sessionId: sessionId,
            estimateId: session.approvedEstimateId
        });
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç—ã:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
        });
    }
});

// –ù–û–í–´–ô: –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ—Ç—ã
router.post('/test-reset-estimate', async (req, res) => {
    try {
        const { sessionId } = req.body;
        
        if (!sessionId) {
            return res.status(400).json({
                success: false,
                error: 'sessionId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            });
        }
        
        logger.info('üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', { sessionId });
        
        const { PreChatForm } = require('../models');
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é
        const session = await PreChatForm.findOne({ sessionId });
        
        if (!session) {
            return res.status(404).json({
                success: false,
                error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }
        
        // –£–¥–∞–ª—è–µ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–º–µ—Ç—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        session.chatHistory = session.chatHistory.filter(msg => 
            !msg.metadata || msg.metadata.messageType !== 'approved_estimate'
        );
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
        session.estimateApproved = false;
        session.estimateApprovedAt = null;
        session.approvedEstimateId = null;
        session.estimateDeliveredToClient = false;
        
        await session.save();
        
        logger.info('‚úÖ –°—Ç–∞—Ç—É—Å —Å–º–µ—Ç—ã —Å–±—Ä–æ—à–µ–Ω', { sessionId });
        
        res.json({
            success: true,
            message: '–°—Ç–∞—Ç—É—Å —Å–º–µ—Ç—ã —Å–±—Ä–æ—à–µ–Ω',
            sessionId: sessionId
        });
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ—Ç—ã:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞'
        });
    }
});

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF –∫–ª–∏–µ–Ω—Ç–æ–º
router.get('/download-client-pdf/:sessionId/:estimateId', async (req, res) => {
    try {
        const { sessionId, estimateId } = req.params;
        const { PreChatForm } = require('../models');
        const PDFService = require('../services/PDFService');
        
        logger.info('üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF –∫–ª–∏–µ–Ω—Ç–æ–º', { sessionId, estimateId });
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é
        const session = await PreChatForm.findOne({ sessionId });
        
        if (!session || !session.estimateApproved) {
            return res.status(404).json({
                success: false,
                error: '–°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞'
            });
        }
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const clientInfo = {
            name: session.name,
            position: session.position,
            industry: session.industry,
            budget: session.budget,
            timeline: session.timeline,
            contacts: session.contacts
        };
        
        const estimate = {
            totalCost: session.estimateData?.totalCost || 0,
            totalHours: session.estimateData?.totalHours || 0,
            timeline: session.estimateData?.timeline || session.timeline || '2-3 –Ω–µ–¥–µ–ª–∏',
            components: session.estimateData?.components || [],
            detectedFeatures: session.estimateData?.features || [],
            businessType: session.estimateData?.businessType || session.industry,
            recommendations: session.estimateData?.recommendations || []
        };
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        const pdfPath = await PDFService.generateClientPDF(estimate, clientInfo, sessionId);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        res.download(pdfPath, `–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ_${new Date().toISOString().split('T')[0]}.pdf`, async (err) => {
            if (err) {
                logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF:', err);
            }
            
            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            setTimeout(async () => {
                await PDFService.cleanupTempFiles([pdfPath]);
            }, 5000);
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
        res.status(500).json({
            success: false,
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF'
        });
    }
});

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ê–õ–û–ì–û–ú –§–£–ù–ö–¶–ò–ô ===

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
router.get('/features', async (req, res) => {
    try {
        const features = await FeaturesService.getAllFeatures();
        res.json({
            success: true,
            features: features,
            totalCount: Object.values(features).flat().length
        });
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π:', error);
        res.status(500).json({
            success: false,
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ñ—É–Ω–∫—Ü–∏–π'
        });
    }
});

// –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π
router.post('/features/search', async (req, res) => {
    try {
        const { keywords } = req.body;
        
        if (!keywords) {
            return res.status(400).json({
                success: false,
                error: '–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞'
            });
        }
        
        const results = await FeaturesService.searchFeatures(keywords);
        
        res.json({
            success: true,
            results: results,
            count: results.length
        });
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞'
        });
    }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
router.get('/features/stats', async (req, res) => {
    try {
        const stats = await FeaturesService.getFeatureUsageStats();
        res.json({
            success: true,
            stats: stats
        });
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({
            success: false,
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'
        });
    }
});

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
router.post('/features/add', async (req, res) => {
    try {
        const { category, feature } = req.body;
        
        if (!category || !feature) {
            return res.status(400).json({
                success: false,
                error: '–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –¥–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏'
            });
        }
        
        const result = await FeaturesService.addFeature(category, feature);
        
        res.json({
            success: result,
            message: result ? '–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞' : '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é'
        });
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏'
        });
    }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
router.put('/features/update', async (req, res) => {
    try {
        const { category, featureName, updates } = req.body;
        
        if (!category || !featureName || !updates) {
            return res.status(400).json({
                success: false,
                error: '–£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
            });
        }
        
        const result = await FeaturesService.updateFeature(category, featureName, updates);
        
        res.json({
            success: result,
            message: result ? '–§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞' : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é'
        });
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏'
        });
    }
});

// –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
router.post('/features/cleanup', async (req, res) => {
    try {
        const { daysUnused = 90 } = req.body;
        
        const removedCount = await FeaturesService.cleanupUnusedFeatures(daysUnused);
        
        res.json({
            success: true,
            removedCount: removedCount,
            message: `–£–¥–∞–ª–µ–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: ${removedCount}`
        });
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞'
        });
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞
router.get('/features/export', async (req, res) => {
    try {
        const exportPath = await FeaturesService.exportCatalog();
        
        if (exportPath) {
            res.json({
                success: true,
                message: '–ö–∞—Ç–∞–ª–æ–≥ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω',
                path: exportPath
            });
        } else {
            res.status(500).json({
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥'
            });
        }
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞'
        });
    }
});

// === –°–ï–°–°–ò–ò ===

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏
router.post('/check-session', (req, res) => ChatController.checkSession(req, res));

// –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
router.get('/chat-history/:sessionId', (req, res) => ChatController.getChatHistory(req, res));

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –Ω–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∫–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
router.get('/pre-chat-history/:sessionId', (req, res) => ChatController.getPreChatHistory(req, res));

// –ò—Å—Ç–æ—Ä–∏—è GPT —á–∞—Ç–∞
router.get('/gpt-chat-history/:sessionId', async (req, res) => {
    try {
        const { sessionId } = req.params;
        
        logger.info('–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ GPT —á–∞—Ç–∞', { sessionId });
        
        const { Conversation } = require('../models');
        
        if (!Conversation) {
            return res.json({
                success: true,
                conversation: [],
                message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
            });
        }
        
        const conversation = await Conversation.findBySessionId(sessionId);
        
        if (!conversation) {
            return res.json({
                success: true,
                conversation: []
            });
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const formattedMessages = conversation.messages.map(msg => ({
            role: msg.role,
            content: msg.content,
            timestamp: msg.timestamp
        }));
        
        res.json({
            success: true,
            conversation: formattedMessages,
            mode: conversation.mode || 'chat',
            hasEstimate: !!conversation.estimate,
            estimateStatus: conversation.estimateStatus
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ GPT —á–∞—Ç–∞:', error);
        res.status(500).json({
            success: false,
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞'
        });
    }
});

// === –ê–ù–ê–õ–ò–¢–ò–ö–ê ===

// –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ - –∏–∑–º–µ–Ω—è–µ–º –Ω–∞ POST —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ –æ–∂–∏–¥–∞–µ—Ç body
router.post('/analytics', (req, res) => AnalyticsController.getAnalytics(req, res));

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–º–µ—Ç
router.get('/estimates/stats', (req, res) => AnalyticsController.getEstimatesStats(req, res));

// –°–ø–∏—Å–æ–∫ —Å–º–µ—Ç
router.get('/estimates/list', (req, res) => AnalyticsController.getEstimatesList(req, res));

// –î–µ—Ç–∞–ª–∏ —Å–º–µ—Ç—ã - –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –ø–æ–∫–∞
// router.get('/estimates/:estimateId', (req, res) => AnalyticsController.getEstimateDetails(req, res));

// –°–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
router.post('/analytics/event', (req, res) => AnalyticsController.trackEvent(req, res));

// –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–Ω–∫–µ—Ç
router.get('/analytics/forms', (req, res) => AnalyticsController.getPreChatAnalytics(req, res));

// === –£–¢–ò–õ–ò–¢–´ ===

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
router.get('/health', (req, res) => {
    res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        version: process.version
    });
});

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
router.post('/lead-notification', (req, res) => FormulationController.sendLeadNotification(req, res));

// === –§–ê–ô–õ–´ –ò –ó–ê–ì–†–£–ó–ö–ò ===

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
router.post('/upload', async (req, res) => {
    try {
        const multer = require('multer');
        const path = require('path');
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        const storage = multer.diskStorage({
            destination: function (req, file, cb) {
                cb(null, 'uploads/');
            },
            filename: function (req, file, cb) {
                const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
                cb(null, uniqueSuffix + path.extname(file.originalname));
            }
        });
        
        const upload = multer({ 
            storage: storage,
            limits: {
                fileSize: 5 * 1024 * 1024 // 5MB
            },
            fileFilter: function (req, file, cb) {
                // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
                const allowedTypes = [
                    'image/jpeg', 'image/png', 'image/gif',
                    'application/pdf', 'text/plain',
                    'audio/mpeg', 'audio/wav', 'audio/ogg'
                ];
                
                if (allowedTypes.includes(file.mimetype)) {
                    cb(null, true);
                } else {
                    cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞'));
                }
            }
        }).single('file');
        
        upload(req, res, function (err) {
            if (err) {
                logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', err);
                return res.status(400).json({
                    error: err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞'
                });
            }
            
            if (!req.file) {
                return res.status(400).json({
                    error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω'
                });
            }
            
            logger.info('–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω', { 
                filename: req.file.filename, 
                originalname: req.file.originalname,
                size: req.file.size 
            });
            
            res.json({
                success: true,
                file: {
                    filename: req.file.filename,
                    originalname: req.file.originalname,
                    size: req.file.size,
                    path: req.file.path
                }
            });
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ —Ä–æ—É—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞'
        });
    }
});

// === –°–õ–£–ñ–ï–ë–ù–´–ï –†–û–£–¢–´ ===

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
router.post('/clear-cache', (req, res) => {
    try {
        const NodeCache = require('node-cache');
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à, –º–æ–∂–Ω–æ –µ–≥–æ –æ—á–∏—Å—Ç–∏—Ç—å
        // cache.flushAll();
        
        logger.info('–ö–µ—à –æ—á–∏—â–µ–Ω');
        res.json({ 
            success: true, 
            message: '–ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω' 
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞'
        });
    }
});

// === –¢–ï–°–¢–û–í–´–ï –†–û–£–¢–´ ===

// –¢–µ—Å—Ç GPT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
router.get('/test-gpt', async (req, res) => {
    try {
        const GPTService = require('../services/GPTService');
        
        const testMessages = [
            { role: 'user', content: '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.' }
        ];
        
        const response = await GPTService.chat(testMessages);
        
        res.json({
            success: true,
            message: 'GPT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
            response: response.slice(0, 100) + '...'
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GPT:', error);
        res.status(500).json({
            error: 'GPT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
            details: error.message
        });
    }
});

// –¢–µ—Å—Ç Telegram —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
router.get('/test-telegram', async (req, res) => {
    try {
        const TelegramService = require('../services/TelegramService');
        
        if (!TelegramService.isReady()) {
            return res.status(500).json({
                error: 'Telegram –±–æ—Ç –Ω–µ –≥–æ—Ç–æ–≤',
                info: TelegramService.getBotInfo()
            });
        }
        
        const testMessage = `üß™ –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
        const sent = await TelegramService.sendNotification(testMessage);
        
        if (sent) {
            res.json({
                success: true,
                message: 'Telegram —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'
            });
        } else {
            res.status(500).json({
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
            });
        }
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram:', error);
        res.status(500).json({
            error: 'Telegram —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
            details: error.message
        });
    }
});

// === MIDDLEWARE –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Multer ===
router.use((error, req, res, next) => {
    if (error instanceof multer.MulterError) {
        if (error.code === 'LIMIT_FILE_SIZE') {
            return res.status(400).json({
                success: false,
                error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 25MB)'
            });
        }
        return res.status(400).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + error.message
        });
    }
    
    if (error.message === '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ') {
        return res.status(400).json({
            success: false,
            error: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã: WebM, OGG, WAV, MP3'
        });
    }
    
    next(error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –¥–ª—è API —Ä–æ—É—Ç–æ–≤
router.use('*', (req, res) => {
    res.status(404).json({
        error: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
        path: req.originalUrl,
        method: req.method
    });
});

// ===== –¢–ï–°–¢–û–í–´–ô ENDPOINT –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –°–ò–°–¢–ï–ú–´ –°–ú–ï–¢ =====
router.get('/test-estimate-system', async (req, res) => {
    try {
        const { sessionId } = req.query;
        
        if (!sessionId) {
            return res.json({
                error: '–£–∫–∞–∂–∏—Ç–µ sessionId –≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö',
                example: '/api/test-estimate-system?sessionId=session_123456789_abcd',
                help: '–≠—Ç–æ—Ç endpoint –ø–æ–º–æ–≥–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–º–µ—Ç'
            });
        }
        
        logger.info('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–º–µ—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId);
        
        const { PreChatForm } = require('../models');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
        const session = await PreChatForm.findOne({ sessionId });
        
        if (!session) {
            return res.json({
                error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                sessionId: sessionId,
                suggestion: '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π sessionId'
            });
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ —Å–º–µ—Ç–∞–º–∏
        const approvedMessages = session.chatHistory.filter(msg => 
            msg.metadata && msg.metadata.messageType === 'approved_estimate'
        );
        
        const status = {
            sessionId: sessionId,
            sessionExists: true,
            estimateApproved: session.estimateApproved,
            estimateDeliveredToClient: session.estimateDeliveredToClient,
            estimateApprovedAt: session.estimateApprovedAt,
            estimateDeliveredAt: session.estimateDeliveredAt,
            approvedEstimateId: session.approvedEstimateId,
            chatHistoryLength: session.chatHistory.length,
            approvedMessagesCount: approvedMessages.length,
            lastMessage: session.chatHistory.length > 0 ? {
                role: session.chatHistory[session.chatHistory.length - 1].role,
                content: session.chatHistory[session.chatHistory.length - 1].content.substring(0, 100) + '...',
                timestamp: session.chatHistory[session.chatHistory.length - 1].timestamp,
                hasMetadata: !!session.chatHistory[session.chatHistory.length - 1].metadata,
                messageType: session.chatHistory[session.chatHistory.length - 1].metadata?.messageType
            } : null,
            approvedMessages: approvedMessages.map(msg => ({
                estimateId: msg.metadata.estimateId,
                approvedAt: msg.metadata.approvedAt,
                hasContent: !!msg.content,
                contentLength: msg.content ? msg.content.length : 0
            }))
        };
        
        logger.info('üìä –°—Ç–∞—Ç—É—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', status);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        const issues = [];
        const solutions = [];
        
        if (!session.estimateApproved) {
            issues.push('–°–º–µ—Ç–∞ –µ—â–µ –Ω–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º');
            solutions.push('–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–º–µ—Ç—É –≤ Telegram –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST /api/test-approve-estimate');
        }
        
        if (session.estimateApproved && approvedMessages.length === 0) {
            issues.push('–°–º–µ—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞');
            solutions.push('–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î');
        }
        
        if (session.estimateApproved && session.estimateDeliveredToClient) {
            issues.push('–°–º–µ—Ç–∞ —É–∂–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –∫–ª–∏–µ–Ω—Ç—É');
            solutions.push('SSE –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–º–µ—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST /api/test-reset-estimate');
        }
        
        if (session.estimateApproved && !session.estimateDeliveredToClient && approvedMessages.length > 0) {
            issues.push('–°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û - —Å–º–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ SSE');
            solutions.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ JavaScript –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
        }
        
        res.json({
            success: true,
            status: status,
            issues: issues,
            solutions: solutions,
            actions: {
                '–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ': `POST /api/test-approve-estimate —Å body: {"sessionId": "${sessionId}"}`,
                '–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å': `POST /api/test-reset-estimate —Å body: {"sessionId": "${sessionId}"}`,
                '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å SSE (–æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ)': `/api/estimate-updates/${sessionId}`,
                '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å (API)': `/api/check-approved-estimate/${sessionId}`
            },
            debug: {
                serverTime: new Date().toISOString(),
                nodeEnv: process.env.NODE_ENV,
                mongoConnected: !!session
            }
        });
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
        res.json({
            error: error.message,
            stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
        });
    }
});

module.exports = router; 
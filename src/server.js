// src/server.js
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const mongoose = require('mongoose');
const path = require('path');

const config = require('./config');
const logger = require('./utils/logger');
const apiRoutes = require('./routes/api');
const { apiLimiter, gptLimiter, voiceLimiter, formLimiter } = require('./middleware/rateLimiter');
const AnalyticsService = require('./services/AnalyticsService');
const VoiceService = require('./services/VoiceService');

// –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
const TelegramService = require('./services/TelegramService');
const EstimateService = require('./services/EstimateService');
const AdvancedGPTService = require('./services/AdvancedGPTService');
const EncryptionUtils = require('./utils/encryption');

// –ò–º–ø–æ—Ä—Ç middleware
const rateLimiter = require('./middleware/rateLimiter');
const security = require('./middleware/security');

const PreChatService = require('./services/PreChatService');

const app = express();

console.log('üîç ENV CHECK:', {
    TELEGRAM_BOT_TOKEN: process.env.TELEGRAM_BOT_TOKEN ? '–ó–∞–≥—Ä—É–∂–µ–Ω' : '–ù–ï –ó–ê–ì–†–£–ñ–ï–ù',
    ADMIN_CHAT_ID: process.env.ADMIN_CHAT_ID,
    configTelegram: config.telegram
});

// === –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ ===

// Helmet –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
            fontSrc: ["'self'", "https://fonts.gstatic.com"],
            scriptSrc: [
                "'self'", 
                "'unsafe-inline'", 
                "'unsafe-eval'", 
                "https://cdnjs.cloudflare.com",
                "https://code.jquery.com",
                "https://cdn.jsdelivr.net"
            ],
            scriptSrcAttr: ["'unsafe-inline'"],
            imgSrc: ["'self'", "data:", "https:", "blob:"],
            connectSrc: [
                "'self'", 
                "https://api.openai.com", 
                "ws:", 
                "wss:", 
                "http://localhost:3000"
            ],
            mediaSrc: ["'self'", "blob:"],
            objectSrc: ["'none'"],
            frameAncestors: ["'none'"],
            upgradeInsecureRequests: process.env.NODE_ENV === 'production' ? [] : null
        }
    },
    crossOriginEmbedderPolicy: false
}));

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const corsOptions = {
    origin: function (origin, callback) {
        // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, Postman)
        if (!origin) return callback(null, true);
        
        const allowedOrigins = [
            'http://localhost:3000',
            'http://localhost:3001',
            'http://127.0.0.1:3000',
            'http://127.0.0.1:3001',
            'https://—Å–æ–∑–¥–∞—Ç—å-–±–æ—Ç–∞.—Ä—Ñ',
            'https://www.—Å–æ–∑–¥–∞—Ç—å-–±–æ—Ç–∞.—Ä—Ñ'
        ];
        
        if (process.env.ALLOWED_ORIGINS) {
            allowedOrigins.push(...process.env.ALLOWED_ORIGINS.split(','));
        }
        
        if (allowedOrigins.indexOf(origin) !== -1) {
            callback(null, true);
        } else {
            logger.warn('CORS blocked origin:', origin);
            callback(new Error('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ CORS –ø–æ–ª–∏—Ç–∏–∫–æ–π'));
        }
    },
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
};

app.use(cors(corsOptions));

// === MIDDLEWARE ===

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
app.use(security);

// –ü–∞—Ä—Å–∏–Ω–≥ JSON —Å –ª–∏–º–∏—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(path.join(__dirname, '..'), {
    maxAge: '1d',
    etag: true
}));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    logger.info('HTTP –∑–∞–ø—Ä–æ—Å', {
        method: req.method,
        url: req.url,
        ip: req.ip,
        userAgent: req.get('User-Agent')?.slice(0, 100)
    });
    next();
});

// –û–±—â–∏–π rate limiter –¥–ª—è –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
app.use('/api', apiLimiter);

// –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ rate limiters
app.use('/api/gpt-assistant', gptLimiter);
app.use('/api/simple-chat', gptLimiter);
app.use('/api/pre-chat-message', gptLimiter);
app.use('/api/voice-message', voiceLimiter);
app.use('/api/pre-chat-form', formLimiter);

// === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
if (config.mongodb.uri) {
    mongoose.connect(config.mongodb.uri, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
        maxPoolSize: 10,
        serverSelectionTimeoutMS: 5000,
        socketTimeoutMS: 45000,
    })
    .then(() => {
        logger.info('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    })
    .catch(err => {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err.message);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    mongoose.connection.on('disconnected', () => {
        logger.warn('MongoDB –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    });

    mongoose.connection.on('reconnected', () => {
        logger.info('MongoDB –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    });
} else {
    logger.warn('‚ö†Ô∏è MongoDB URI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
}

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–†–í–ò–°–û–í ===

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
VoiceService.ensureUploadDir().catch(err => {
    logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ uploads:', err);
});

// === –†–û–£–¢–´ ===

// API —Ä–æ—É—Ç—ã
app.use('/api', apiRoutes);

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile('index.html', { root: path.join(__dirname, '..') });
});

// === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –†–û–£–¢–´ –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===

// –†–µ–∂–∏–º —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ (–ø—Ä—è–º–æ–π —Ä–æ—É—Ç)
app.post('/api/formulation-mode', async (req, res) => {
    try {
        const FormulationController = require('./controllers/FormulationController');
        await FormulationController.handleFormulationMode(req, res);
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            success: false
        });
    }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –¢–ó
app.post('/api/generate-specification', async (req, res) => {
    try {
        const FormulationController = require('./controllers/FormulationController');
        await FormulationController.generateSpecification(req, res);
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó',
            success: false
        });
    }
});

// –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã (helper endpoint)
app.post('/api/quick-replies', async (req, res) => {
    try {
        const { aiResponse, userMessage = '', conversation = [], mode = 'chat' } = req.body;
        
        if (!aiResponse) {
            return res.status(400).json({
                error: '–¢—Ä–µ–±—É–µ—Ç—Å—è aiResponse'
            });
        }

        const quickReplies = AdvancedGPTService.generateUnifiedQuickReplies(
            aiResponse, 
            userMessage, 
            conversation, 
            mode
        );

        res.json({
            success: true,
            quickReplies: quickReplies
        });

    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤'
        });
    }
});

// === –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ===

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
    logger.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', {
        error: error.message,
        stack: error.stack,
        url: req.url,
        method: req.method,
        ip: req.ip
    });
    
    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
    AnalyticsService.addEvent('server_error', null, {
        error: error.message,
        path: req.path,
        method: req.method
    });
    
    if (req.originalUrl.startsWith('/api/')) {
        res.status(500).json({
            success: false,
            error: process.env.NODE_ENV === 'production' 
                ? '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
                : error.message
        });
    } else {
        res.status(500).sendFile('index.html', { root: path.join(__dirname, '..') });
    }
});

// === –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò ===

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
const cleanupInterval = setInterval(() => {
    AnalyticsService.cleanupOldSessions();
}, 6 * 60 * 60 * 1000);

// === –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ===

const PORT = config.app.port;
const server = app.listen(PORT, () => {
    logger.info(`üöÄ –ú–æ–¥—É–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    logger.info(`üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
    logger.info(`üìä –†–µ–∂–∏–º: ${config.app.env}`);
    logger.info(`üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –≤–∫–ª—é—á–µ–Ω–∞`);
    logger.info(`üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –∞–∫—Ç–∏–≤–Ω–∞`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
    setTimeout(() => {
        const telegramInfo = TelegramService.getBotInfo();
        logger.info('Telegram Bot —Å—Ç–∞—Ç—É—Å:', telegramInfo);
        
        if (!telegramInfo.ready) {
            logger.warn('‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        }
    }, 5000);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    switch (error.code) {
        case 'EACCES':
            logger.error(`–ü–æ—Ä—Ç ${PORT} —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(`–ü–æ—Ä—Ç ${PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`);
            process.exit(1);
            break;
        default:
            throw error;
    }
});

// === GRACEFUL SHUTDOWN ===

async function gracefulShutdown(signal) {
    logger.info(`\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...`);
    
    try {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
        clearInterval(cleanupInterval);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        await new Promise((resolve) => {
            server.close(() => {
                logger.info('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
                resolve();
            });
        });
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
        await TelegramService.shutdown();
        logger.info('‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º Puppeteer –±—Ä–∞—É–∑–µ—Ä
        try {
            const PDFService = require('./services/PDFService');
            await PDFService.closeBrowser();
            logger.info('‚úÖ Puppeteer –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        } catch (error) {
            logger.warn('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Puppeteer:', error.message);
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB
        if (mongoose.connection.readyState === 1) {
            await mongoose.connection.close();
            logger.info('‚úÖ MongoDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        }
        
        logger.info('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        process.exit(0);
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ graceful shutdown:', error);
        process.exit(1);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    logger.error('‚ùå Uncaught Exception:', error);
    gracefulShutdown('UNCAUGHT_EXCEPTION');
});

process.on('unhandledRejection', (reason, promise) => {
    logger.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

module.exports = app;
const GPTService = require('../services/GPTService');
const EstimateService = require('../services/EstimateService');
const VoiceService = require('../services/VoiceService');
const AnalyticsService = require('../services/AnalyticsService');
const TelegramService = require('../services/TelegramService');
const AdvancedGPTService = require('../services/AdvancedGPTService');
const { PreChatForm, Conversation } = require('../models');
const logger = require('../utils/logger');
const PreChatService = require('../services/PreChatService');

class ChatController {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    async handleFormSubmission(req, res) {
        try {
            console.log('üîç handleFormSubmission - –Ω–∞—á–∞–ª–æ');
            console.log('üîç –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', req.body);
            
            const { 
                name, 
                position, 
                industry, 
                budget, 
                timeline, 
                preferredChannels, 
                contacts,
                fingerprint 
            } = req.body;

            logger.info('–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –∞–Ω–∫–µ—Ç—ã', { name, industry });

            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (!name || !position || !industry || !budget || !timeline) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è');
                return res.status(400).json({
                    success: false,
                    error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
                });
            }

            console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞');

            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
            const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

            // –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            const formData = {
                name,
                position,
                industry,
                budget,
                timeline,
                preferredChannels: preferredChannels || [],
                contacts: contacts || {},
                fingerprint: fingerprint || 'unknown'
            };

            console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);

            // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ PreChatService
            console.log('üîÑ –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ PreChatService...');
            const result = await PreChatService.createSession(formData);
            
            console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', result);
            
            if (!result.success) {
                throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏');
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PreChatService
            console.log('üí¨ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
            const contextualPrompt = PreChatService.buildContextualPrompt(formData);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç GPT
            console.log('ü§ñ –ó–∞–ø—Ä–æ—Å –∫ GPT...');
            const welcomeMessage = await GPTService.chat([
                { role: 'system', content: contextualPrompt }
            ]);

            console.log('‚úÖ GPT –æ—Ç–≤–µ—Ç–∏–ª');

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await PreChatService.addMessageToHistory(
                result.sessionId,
                'assistant',
                welcomeMessage,
                { messageType: 'text' }
            );

            // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            AnalyticsService.addEvent('form_submitted', result.sessionId, {
                industry,
                budget,
                timeline
            });

            logger.info('–§–æ—Ä–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ', { sessionId: result.sessionId });

            res.json({
                success: true,
                sessionId: result.sessionId,
                welcomeMessage: welcomeMessage
            });

        } catch (error) {
            console.error('‚ùå –ü–û–õ–ù–ê–Ø –û–®–ò–ë–ö–ê –≤ handleFormSubmission:', error);
            logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã:', error);
            res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã'
            });
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ (–ê–ù–ö–ï–¢–ù–´–ô –ß–ê–¢) - –î–û–ë–ê–í–õ–Ø–ï–ú –ì–ï–ù–ï–†–ê–¶–ò–Æ –°–ú–ï–¢–´
    async handleChatMessage(req, res) {
        try {
            const { sessionId, message } = req.body;

            if (!sessionId || !message) {
                return res.status(400).json({
                    success: false,
                    error: '–ù–µ —É–∫–∞–∑–∞–Ω ID —Å–µ—Å—Å–∏–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ'
                });
            }

            logger.info('üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–Ω–∫–µ—Ç–Ω–æ–º —á–∞—Ç–µ', {
                sessionId,
                message: message.slice(0, 50)
            });

            // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é –≤ PreChatForm
            const session = await PreChatForm.findOne({ sessionId });
            if (!session) {
                return res.status(404).json({
                    success: false,
                    error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                });
            }

            // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–º–µ—Ç–∞
            if (session.estimateSent && session.estimateSentAt) {
                const timeSinceEstimate = Date.now() - new Date(session.estimateSentAt).getTime();
                
                // –ï—Å–ª–∏ —Å–º–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ - –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é
                if (timeSinceEstimate < 300000) { // 5 –º–∏–Ω—É—Ç
                    logger.info('‚è≠Ô∏è –°–º–µ—Ç–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é', {
                        sessionId,
                        timeSinceEstimate: Math.round(timeSinceEstimate / 1000) + ' —Å–µ–∫'
                    });
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—ã—á–Ω—ã–º –æ–±—Ä–∞–∑–æ–º, –Ω–æ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–º–µ—Ç—ã
                    const chatHistory = session.chatHistory || [];
                    const systemPrompt = AdvancedGPTService.buildSystemPrompt('chat', chatHistory.length);
                    
                    const messages = [
                        { role: 'system', content: systemPrompt },
                        ...chatHistory.slice(-10),
                        { role: 'user', content: message }
                    ];
                    
                    const gptResponse = await AdvancedGPTService.callOpenAIWithPrompt(messages);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ user –∏ assistant!)
                    session.chatHistory.push(
                        { role: 'user', content: message },
                        { role: 'assistant', content: gptResponse }
                    );
                    await session.save();
                    
                    return res.json({
                        success: true,
                        message: gptResponse,
                        hasEstimate: false,
                        estimateAlreadySent: true
                    });
                }
            }

            // –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä
            let conversation = null;
            if (Conversation) {
                conversation = await Conversation.findBySessionId(sessionId);
            }

            // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            AnalyticsService.addEvent('message_sent', sessionId, {
                messageLength: message.length
            });

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT
            const chatHistory = session.chatHistory || [];
            const systemPrompt = AdvancedGPTService.buildSystemPrompt('chat', chatHistory.length);
            
            const messages = [
                { role: 'system', content: systemPrompt },
                ...chatHistory.slice(-10),
                { role: 'user', content: message }
            ];

            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
            const gptResponse = await AdvancedGPTService.callOpenAIWithPrompt(messages);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ PreChatForm
            session.chatHistory.push(
                { role: 'user', content: message },
                { role: 'assistant', content: gptResponse }
            );
            await session.save();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Conversation –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if (conversation) {
                conversation.addMessage('user', message);
                conversation.addMessage('assistant', gptResponse);
                await conversation.save();
            }

            // –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–û–í–ï–†–ö–£ –ù–ê –ì–ï–ù–ï–†–ê–¶–ò–Æ –°–ú–ï–¢–´
            let finalResponse = gptResponse;
            let hasEstimate = false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ—Ç—É
            logger.info('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–º–µ—Ç—ã...');
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const shouldCalculate = await this.analyzeEstimateIntent(message, chatHistory);
            
            if (shouldCalculate) {
                logger.info('‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–º–µ—Ç—É');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
                const functionalityReady = await this.checkFunctionalityReadiness(chatHistory);
                
                if (functionalityReady) {
                    logger.info('üöÄ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≥–æ—Ç–æ–≤ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–º–µ—Ç—É', { sessionId });
                    
                    try {
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
                        const requirements = this.extractRequirements(chatHistory);
                        logger.info('üìù –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω—ã', { 
                            requirementsLength: requirements.fullDialogue?.length || requirements.length 
                        });
                        
                        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–º–µ—Ç—É
                        // –ï—Å–ª–∏ requirements —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ–¥–∞–µ–º fullDialogue, –∏–Ω–∞—á–µ –∫–∞–∫ –µ—Å—Ç—å
                        const requirementsText = requirements.fullDialogue || requirements;
                        const estimate = await EstimateService.calculateProjectEstimate(
                            requirementsText,
                            chatHistory // –ø–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                        );
                        
                        if (estimate) {
                            logger.info('üí∞ –°–º–µ—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞', {
                                totalCost: estimate?.totalCost || 0,
                                totalHours: estimate?.totalHours || 0,
                                hasComponents: !!estimate?.components
                            });
                            
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                            const sent = await TelegramService.sendEstimateToTelegram(estimate, sessionId);
                            
                            if (sent) {
                                logger.info('‚úÖ –°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É', { sessionId });
                                hasEstimate = true;
                                
                                // –ó–∞–º–µ–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–º–µ—Ç—ã
                                const estimateCost = estimate?.totalCost || '—É—Ç–æ—á–Ω—è–µ—Ç—Å—è';
                                const estimateHours = estimate?.totalHours || '—É—Ç–æ—á–Ω—è–µ—Ç—Å—è';
                                const estimateTimeline = estimate?.timeline || '—É—Ç–æ—á–Ω—è–µ—Ç—Å—è';
                                
                                finalResponse = `–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–º–µ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è:

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** ${typeof estimateCost === 'number' ? estimateCost.toLocaleString('ru-RU') : estimateCost} —Ä—É–±.
‚è±Ô∏è **–°—Ä–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:** ${estimateTimeline}

–°–º–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ. –ü–æ—Å–ª–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 10-15 –º–∏–Ω—É—Ç) –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—É—é —Å–º–µ—Ç—É –≤ —ç—Ç–æ—Ç —á–∞—Ç
‚Ä¢ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–Ω–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏

–ü–æ–∫–∞ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —Å–∫–∞–∂–∏—Ç–µ - —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ?`;
                                
                                try {
                                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –ë–ï–ó –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ chatHistory
                                    session.estimateSent = true;
                                    session.estimateSentAt = new Date();
                                    session.estimateData = {
                                        totalCost: estimate?.totalCost || 0,
                                        totalHours: estimate?.totalHours || 0,
                                        features: estimate?.detectedFeatures || [],
                                        estimateId: estimate?._id || 'temp',
                                        sentToTelegram: true
                                    };
                                    
                                    await session.save();
                                    
                                    logger.info('‚úÖ –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω', { 
                                        sessionId,
                                        estimateSent: true 
                                    });
                                    
                                } catch (saveError) {
                                    logger.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏:', saveError);
                                }
                                
                            } else {
                                logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–º–µ—Ç—É –≤ Telegram', { sessionId });
                                finalResponse = gptResponse + '\n\n‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–º–µ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å "—Ä–∞—Å—Å—á–∏—Ç–∞–π —Å–º–µ—Ç—É" –µ—â–µ —Ä–∞–∑.';
                            }
                        }
                    } catch (estimateError) {
                        logger.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–º–µ—Ç—ã:', estimateError);
                        finalResponse = gptResponse;
                    }
                } else {
                    logger.info('‚è≥ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–º–µ—Ç—ã');
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è —Å–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å
            let approvedEstimate = null;
            if (session.estimateApproved && !session.estimateDeliveredToClient) {
                // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Å–º–µ—Ç–æ–π
                const estimateMessage = session.chatHistory
                    .filter(msg => msg.metadata && msg.metadata.messageType === 'approved_estimate')
                    .pop();
                
                if (estimateMessage) {
                    approvedEstimate = {
                        message: estimateMessage.content,
                        approvedAt: estimateMessage.metadata.approvedAt,
                        estimateId: estimateMessage.metadata.estimateId
                    };
                    
                    // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Å–º–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É
                    session.estimateDeliveredToClient = true;
                    session.estimateDeliveredAt = new Date();
                    await session.save();
                    
                    logger.info('–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è —Å–º–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É', { sessionId });
                }
            }

            res.json({
                success: true,
                message: finalResponse,
                hasEstimate: hasEstimate,
                estimateAlreadySent: session.estimateSent ? true : false,
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Å–º–µ—Ç–µ
                approvedEstimate: approvedEstimate
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            res.status(500).json({
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
            });
        }
    }

    // –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–º–µ—Ç—ã
    async analyzeEstimateIntent(message, chatHistory) {
        try {
            logger.info('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–º–µ—Ç—ã —á–µ—Ä–µ–∑ GPT');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º AdvancedGPTService –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ OpenAI
            const shouldCalculate = await AdvancedGPTService.analyzeUserIntent(message, chatHistory);
            
            logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ GPT:', { shouldCalculate });
            
            return shouldCalculate;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è:', error);
            
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ GPT - –ù–ï –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–º–µ—Ç—É
            // –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ, —á–µ–º –ø—ã—Ç–∞—Ç—å—Å—è —É–≥–∞–¥–∞—Ç—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            return false;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–º–µ—Ç—ã
    async checkFunctionalityReadiness(conversation) {
        try {
            logger.info('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–ª—è —Å–º–µ—Ç—ã');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º AdvancedGPTService –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ OpenAI
            const isReady = await AdvancedGPTService.checkFunctionalityReadiness(conversation);
            
            logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', { isReady });
            
            return isReady;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
            
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ù–ï –≥–æ—Ç–æ–≤—ã
            return false;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async handleVoiceMessage(req, res) {
        try {
            const { sessionId } = req.body;
            const audioFile = req.file;

            if (!sessionId) {
                return res.status(400).json({
                    success: false,
                    error: '–ù–µ —É–∫–∞–∑–∞–Ω ID —Å–µ—Å—Å–∏–∏'
                });
            }

            if (!audioFile) {
                return res.status(400).json({
                    success: false,
                    error: '–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
            VoiceService.validateAudioFile(audioFile);

            // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            const transcription = await VoiceService.transcribeAudio(audioFile.path);

            if (!transcription.trim()) {
                return res.status(400).json({
                    success: false,
                    error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å'
                });
            }

            // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é
            const session = await PreChatForm.findOne({ sessionId });
            if (!session) {
                return res.status(404).json({
                    success: false,
                    error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                });
            }

            // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            AnalyticsService.addEvent('voice_message_sent', sessionId, {
                transcriptionLength: transcription.length
            });

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const systemPrompt = this.buildSystemPrompt(session.chatHistory.length);
            const messages = [
                { role: 'system', content: systemPrompt },
                ...session.chatHistory.slice(-10),
                { role: 'user', content: transcription }
            ];

            const gptResponse = await GPTService.chat(messages);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            session.chatHistory.push(
                { role: 'user', content: transcription },
                { role: 'assistant', content: gptResponse }
            );

            await session.save();

            res.json({
                success: true,
                transcription: transcription,
                message: gptResponse
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            res.status(500).json({
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
            });
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
    async checkSession(req, res) {
        try {
            const { fingerprint } = req.body;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            if (!PreChatForm) {
                return res.json({
                    success: true,
                    sessionFound: false,
                    message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é'
                });
            }

            const session = await PreChatForm.findOne({ 
                fingerprint, 
                isActive: true 
            }).sort({ lastActivity: -1 });

            if (session) {
                res.json({
                    success: true,
                    sessionFound: true,
                    sessionId: session.sessionId,
                    formData: {
                        name: session.name,
                        position: session.position,
                        industry: session.industry
                    }
                });
            } else {
                res.json({
                    success: true,
                    sessionFound: false
                });
            }

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
            res.status(500).json({
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Å—Å–∏—é'
            });
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    async getChatHistory(req, res) {
        try {
            const { sessionId } = req.params;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if (!PreChatForm) {
                return res.json({
                    success: true,
                    chatHistory: [],
                    message: '–ò—Å—Ç–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'
                });
            }

            const session = await PreChatForm.findOne({ sessionId });

            if (!session) {
                return res.status(404).json({
                    success: false,
                    error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                });
            }

            res.json({
                success: true,
                chatHistory: session.chatHistory || []
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
            res.status(500).json({
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞'
            });
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç —Å GPT (–¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞, –Ω–µ –∞–Ω–∫–µ—Ç–Ω–æ–≥–æ)
    async handleChat(req, res) {
        try {
            logger.info('–ó–∞–ø—Ä–æ—Å –∫ GPT –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É');
            const { message, conversation = [], sessionId, mode } = req.body;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∂–∏–º —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
            if (mode === 'formulation' || message === 'FORMULATION_MODE_START') {
                const FormulationController = require('./FormulationController');
                return FormulationController.handleFormulationMode(req, res);
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (!message || typeof message !== 'string') {
                return res.status(400).json({
                    error: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
                    success: false
                });
            }

            if (message.length > 1000) {
                return res.status(400).json({
                    error: '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                    success: false
                });
            }

            logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è', { 
                messageLength: message.length,
                conversationLength: conversation.length 
            });

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ MongoDB –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if (sessionId && Conversation) {
                try {
                    let conv = await Conversation.findBySessionId(sessionId);
                    if (!conv) {
                        conv = new Conversation({
                            sessionId,
                            mode: mode || 'chat',
                            metadata: {
                                ip: req.ip,
                                userAgent: req.get('User-Agent')
                            }
                        });
                    }
                    conv.addMessage('user', message);
                    await conv.save();
                } catch (dbError) {
                    logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', dbError);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —Ä–∞—Å—á–µ—Ç–µ —Å–º–µ—Ç—ã
            const shouldCalculate = await AdvancedGPTService.analyzeUserIntent(message, conversation);
            
            let estimate = null;
            let estimateMessage = '';

            if (shouldCalculate) {
                const functionalityReady = await AdvancedGPTService.checkFunctionalityReadiness(conversation);
                
                if (functionalityReady) {
                    logger.info('–í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã');
                    
                    const requirements = this.extractRequirements(conversation);
                    estimate = await EstimateService.calculateProjectEstimate(requirements);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                    await TelegramService.sendEstimateToTelegram(estimate, sessionId);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ—Ç—É –≤ –ë–î
                    if (sessionId && Conversation) {
                        try {
                            const conv = await Conversation.findBySessionId(sessionId);
                            if (conv) {
                                conv.setEstimate(estimate);
                                await conv.save();
                            }
                        } catch (dbError) {
                            logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã:', dbError);
                        }
                    }
                    
                    estimateMessage = `–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª —Å–º–µ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –µ—ë –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ. 
                    
–ü–æ—Å–ª–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç–∞ –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞ –≤ —á–∞—Ç, –∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–º—É –∫–∞–Ω–∞–ª—É —Å–≤—è–∑–∏. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 10-15 –º–∏–Ω—É—Ç.

–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ?`;
                }
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT
            const systemPrompt = AdvancedGPTService.buildSystemPrompt(mode, conversation.length);
            let messages = [
                { role: 'system', content: systemPrompt }
            ];

            // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π)
            messages = messages.concat(conversation.slice(-6));
            messages.push({ role: 'user', content: message });

            // –í—ã–∑—ã–≤–∞–µ–º GPT
            const assistantMessage = await AdvancedGPTService.callOpenAIWithPrompt(messages);

            logger.info('GPT –æ—Ç–≤–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω', { 
                hasEstimate: !!estimate,
                responseLength: assistantMessage.length 
            });

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            let finalMessage = assistantMessage;
            if (estimateMessage) {
                finalMessage = estimateMessage;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –ë–î
            if (sessionId && Conversation) {
                try {
                    const conv = await Conversation.findBySessionId(sessionId);
                    if (conv) {
                        conv.addMessage('assistant', finalMessage);
                        await conv.save();
                    }
                } catch (dbError) {
                    logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:', dbError);
                }
            }

            res.json({
                success: true,
                message: finalMessage,
                estimate: estimate,
                hasEstimate: !!estimate
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≤ GPT –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ:', error);
            
            res.status(500).json({
                error: '–û—à–∏–±–∫–∞ AI',
                success: false,
                message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.'
            });
        }
    }

    // –ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    async simpleChat(req, res) {
        try {
            const { message } = req.body;
            
            if (!message) {
                return res.status(400).json({
                    error: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
                });
            }

            const messages = [
                { role: 'user', content: message }
            ];

            const response = await GPTService.chat(messages);

            res.json({
                success: true,
                message: response
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∞—Ç–∞:', error);
            res.status(500).json({
                error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'
            });
        }
    }

    // –†–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã (–ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å)
    async calculateEstimate(req, res) {
        try {
            const { requirements, conversation = [], sessionId } = req.body;
            
            if (!requirements) {
                return res.status(400).json({
                    error: '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞'
                });
            }

            logger.info('–†–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É', { requirementsLength: requirements.length });

            const estimate = await EstimateService.calculateProjectEstimate(requirements, conversation);
            
            if (estimate && sessionId) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
                await TelegramService.sendEstimateToManager(estimate, sessionId);
            }

            res.json({
                success: true,
                estimate: estimate,
                message: '–°–º–µ—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É'
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–º–µ—Ç—ã:', error);
            res.status(500).json({
                error: '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–º–µ—Ç—ã'
            });
        }
    }

    // –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞
    async getQuickEstimate(req, res) {
        try {
            const { category = 'medium' } = req.body;
            
            const estimate = EstimateService.getQuickEstimate(category);
            
            res.json({
                success: true,
                estimate: estimate
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏:', error);
            res.status(500).json({
                error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏'
            });
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Å–º–µ—Ç—ã
    async sendApprovedEstimate(req, res) {
        try {
            const { estimateId, sessionId } = req.body;
            
            if (!estimateId || !sessionId) {
                return res.status(400).json({
                    error: '–¢—Ä–µ–±—É—é—Ç—Å—è estimateId –∏ sessionId'
                });
            }

            logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Å–º–µ—Ç—ã', { estimateId, sessionId });

            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
            
            res.json({
                success: true,
                message: '–°–º–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É',
                sentChannels: ['–≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å']
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Å–º–µ—Ç—ã:', error);
            res.status(500).json({
                error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º–µ—Ç—ã'
            });
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Å–º–µ—Ç—ã
    async checkApprovedEstimate(req, res) {
        try {
            const { sessionId } = req.params;
            
            if (!sessionId) {
                return res.status(400).json({
                    success: false,
                    error: 'ID —Å–µ—Å—Å–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
                });
            }
            
            logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Å–º–µ—Ç—ã', { sessionId });
            
            // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é
            const session = await PreChatForm.findOne({ sessionId });
            
            if (!session) {
                return res.status(404).json({
                    success: false,
                    error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è —Å–º–µ—Ç–∞
            if (session.estimateApproved && session.approvedEstimateId) {
                // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–º–µ—Ç–æ–π
                const estimateMessage = session.chatHistory
                    .filter(msg => msg.metadata && msg.metadata.messageType === 'approved_estimate')
                    .pop();
                
                if (estimateMessage) {
                    logger.info('–ù–∞–π–¥–µ–Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è —Å–º–µ—Ç–∞', { 
                        sessionId,
                        estimateId: session.approvedEstimateId 
                    });
                    
                    return res.json({
                        success: true,
                        hasApprovedEstimate: true,
                        estimate: {
                            message: estimateMessage.content,
                            approvedAt: estimateMessage.metadata.approvedAt,
                            estimateId: estimateMessage.metadata.estimateId
                        }
                    });
                }
            }
            
            // –°–º–µ—Ç–∞ –µ—â–µ –Ω–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
            res.json({
                success: true,
                hasApprovedEstimate: false
            });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Å–º–µ—Ç—ã:', error);
            res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–º–µ—Ç—ã'
            });
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    async getRandomPrompt(req, res) {
        try {
            const prompt = AdvancedGPTService.getRandomPrompt();
            
            res.json({
                success: true,
                prompt: prompt
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞:', error);
            res.status(500).json({
                error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞'
            });
        }
    }

    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    extractRequirements(conversation) {
        const requirements = conversation
            .filter(msg => msg.role === 'user' || msg.role === 'assistant')
            .map(msg => msg.content)
            .join('\n');
        
        logger.info('üìù –ò–∑–≤–ª–µ—á–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è', {
            conversationLength: conversation.length,
            requirementsLength: requirements.length
        });
        
        return requirements;
    }

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    buildSystemPrompt(conversationLength) {
        const basePrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é Telegram-–±–æ—Ç–æ–≤ —Å –æ–ø—ã—Ç–æ–º 5+ –ª–µ—Ç. –ü–æ–º–æ–≥–∞–µ—à—å –∫–ª–∏–µ–Ω—Ç–∞–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

–¢–í–û–ô –ü–û–î–•–û–î:
1. –ë—ã—Å—Ç—Ä–æ –ø–æ–Ω—è—Ç—å –±–∏–∑–Ω–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ (1-2 –≤–æ–ø—Ä–æ—Å–∞)
2. –í—ã—è—Å–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–æ—Ç–∞ (2-3 –≤–æ–ø—Ä–æ—Å–∞)
3. –£—Ç–æ—á–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
4. –ü—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏

–ü–†–ò–ù–¶–ò–ü–´:
- –ó–∞–¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∏–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å—Ö–æ–¥—è –∏–∑ –Ω–∏—à–∏ –∫–ª–∏–µ–Ω—Ç–∞
- –ù–ï –Ω–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–Ω—ã –∏–ª–∏ —Å—É–º–º—ã
- –ü–æ—Å–ª–µ 6+ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã

–í–ê–ñ–ù–û: –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞—Å—á–µ—Ç—É - —Å–∫–∞–∂–∏ "–û—Ç–ª–∏—á–Ω–æ! –£ –º–µ–Ω—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ì–æ—Ç–æ–≤—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏?"`;

        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ–¥ —Å—Ç–∞–¥–∏—é –¥–∏–∞–ª–æ–≥–∞
        if (conversationLength < 3) {
            return basePrompt + `\n\n–°–¢–ê–î–ò–Ø: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ. –£–∑–Ω–∞–π –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–æ—Ç–∞.`;
        } else if (conversationLength < 6) {
            return basePrompt + `\n\n–°–¢–ê–î–ò–Ø: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è. –£—Ç–æ—á–Ω–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.`;
        } else {
            return basePrompt + `\n\n–°–¢–ê–î–ò–Ø: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ. –ú–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã.`;
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    async generateSpecification(req, res) {
        try {
            const { conversation } = req.body;
            
            if (!conversation || conversation.length === 0) {
                return res.status(400).json({
                    error: '–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'
                });
            }

            const specification = AdvancedGPTService.createFallbackSpec(conversation);

            res.json({
                success: true,
                specification: specification
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¢–ó:', error);
            res.status(500).json({
                error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è'
            });
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∫–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    async getPreChatHistory(req, res) {
        try {
            const { sessionId } = req.params;
            
            logger.info('–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∫–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞', { sessionId });
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ PreChatService
            const session = await PreChatService.getSession(sessionId);
            
            if (!session) {
                logger.warn('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', { sessionId });
                return res.status(404).json({
                    success: false,
                    error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                });
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            const chatHistory = session.chatHistory
                .filter(msg => !msg.metadata || msg.metadata.messageType === 'text')
                .map(msg => ({
                    role: msg.role,
                    content: msg.content,
                    timestamp: msg.timestamp
                }));

            res.json({
                success: true,
                formData: {
                    name: session.name,
                    position: session.position,
                    industry: session.industry,
                    budget: session.budget,
                    timeline: session.timeline,
                    preferredChannels: session.preferredChannels,
                    contacts: session.contacts
                },
                chatHistory: chatHistory,
                leadScore: session.leadScore || 0,
                status: session.status || 'active',
                estimateSent: session.estimateSent || false
            });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∫–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞:', error);
            res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞'
            });
        }
    }
}

module.exports = new ChatController();
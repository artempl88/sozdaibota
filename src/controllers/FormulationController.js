const logger = require('../utils/logger');
const AdvancedGPTService = require('../services/AdvancedGPTService');
const EstimateService = require('../services/EstimateService');
const TelegramService = require('../services/TelegramService');
const { Conversation } = require('../models');

class FormulationController {
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
    async handleFormulationMode(req, res) {
        try {
            logger.info('–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏');
            const { message, conversation = [], sessionId } = req.body;

            logger.info('–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ - –¥–∞–Ω–Ω—ã–µ', { 
                messageLength: message?.length || 0, 
                conversationLength: conversation.length 
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å—á–∏—Ç–∞—Ç—å —Å–º–µ—Ç—É
            const shouldCalculate = await AdvancedGPTService.analyzeUserIntent(message, conversation);
            
            logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–º–µ—Ç—ã', { shouldCalculate });

            let estimate = null;
            let estimateMessage = '';

            if (shouldCalculate) {
                const functionalityReady = await AdvancedGPTService.checkFunctionalityReadiness(conversation);
                
                if (functionalityReady) {
                    logger.info('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–º–µ—Ç—É –≤ —Ä–µ–∂–∏–º–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏');
                    
                    const requirements = conversation
                        .filter(msg => msg.role === 'user')
                        .map(msg => msg.content)
                        .join('\n');
                        
                    estimate = await EstimateService.calculateProjectEstimate(requirements);
                    
                    if (estimate) {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                        await TelegramService.sendEstimateToTelegram(estimate, sessionId);
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                        if (sessionId && Conversation) {
                            try {
                                const conv = await Conversation.findBySessionId(sessionId);
                                if (conv) {
                                    conv.setEstimate(estimate);
                                    conv.mode = 'formulation';
                                    await conv.save();
                                }
                            } catch (dbError) {
                                logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã –≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ:', dbError);
                            }
                        }
                        
                        estimateMessage = `–û—Ç–ª–∏—á–Ω–æ! –ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–∏—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π —è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ —Å–º–µ—Ç—É. –î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.

–ü–æ—Å–ª–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
üìã –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
üí∞ –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é —Å–º–µ—Ç—É —Å —Ä–∞—Å—Ü–µ–Ω–∫–∞–º–∏
üìÖ –ü–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ —ç—Ç–∞–ø–∞–º

–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 15-30 –º–∏–Ω—É—Ç. –•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ —É—Ç–æ—á–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å?`;
                    }
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–∂–∏–º–∞
            let messages;
            const systemPrompt = AdvancedGPTService.buildSystemPrompt('formulation', conversation.length);
            
            if (message === 'FORMULATION_MODE_START') {
                messages = [
                    { role: 'system', content: systemPrompt },
                    {
                        role: 'user',
                        content: '–ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–ª "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–æ–π". –ù–∞—á–Ω–∏ –¥–∏–∞–ª–æ–≥.'
                    }
                ];
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π)
                messages = [
                    { role: 'system', content: systemPrompt },
                    ...conversation.slice(-6),
                    { role: 'user', content: message }
                ];
            }
            
            logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT –≤ —Ä–µ–∂–∏–º–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏');
            
            // –í—ã–∑–æ–≤ GPT
            const assistantMessage = await AdvancedGPTService.callOpenAIWithPrompt(messages);
            
            logger.info('GPT –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω', { 
                responseLength: assistantMessage.length,
                hasEstimate: !!estimate
            });
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–º–µ—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–π
            const finalMessage = estimateMessage || assistantMessage;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Conversation –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if (sessionId && Conversation) {
                try {
                    let conv = await Conversation.findBySessionId(sessionId);
                    if (!conv) {
                        conv = new Conversation({
                            sessionId,
                            mode: 'formulation',
                            stage: 'requirements'
                        });
                    }
                    
                    if (message !== 'FORMULATION_MODE_START') {
                        conv.addMessage('user', message);
                    }
                    conv.addMessage('assistant', finalMessage);
                    await conv.save();
                } catch (dbError) {
                    logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏:', dbError);
                }
            }
            
            logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏');
            
            res.json({
                success: true,
                message: finalMessage,
                mode: 'formulation',
                hasEstimate: !!estimate
            });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏:', error);
            
            res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ä–µ–∂–∏–º–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏',
                message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.'
            });
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    async generateSpecification(req, res) {
        try {
            const { conversation, sessionId } = req.body;
            
            if (!conversation || conversation.length === 0) {
                return res.status(400).json({
                    error: '–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'
                });
            }

            logger.info('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¢–ó', { 
                conversationLength: conversation.length,
                sessionId 
            });

            const specification = AdvancedGPTService.createFallbackSpec(conversation);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¢–ó –≤ –ë–î –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if (sessionId && Conversation) {
                try {
                    const conv = await Conversation.findBySessionId(sessionId);
                    if (conv) {
                        conv.specification = specification;
                        conv.specificationCreatedAt = new Date();
                        await conv.save();
                    }
                } catch (dbError) {
                    logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¢–ó:', dbError);
                }
            }

            res.json({
                success: true,
                specification: specification
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¢–ó:', error);
            res.status(500).json({
                error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è'
            });
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–¥–µ
    async sendLeadNotification(req, res) {
        try {
            const { formData, sessionId } = req.body;
            
            if (!formData) {
                return res.status(400).json({
                    error: '–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
                });
            }

            logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–¥–µ', { sessionId });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            await TelegramService.sendLeadNotification(formData, sessionId);

            res.json({
                success: true,
                message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            res.status(500).json({
                error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
            });
        }
    }
}

module.exports = new FormulationController(); 
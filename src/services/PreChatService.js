// src/services/PreChatService.js
const mongoose = require('mongoose');
const { PreChatForm } = require('../models');
const logger = require('../utils/logger');

class PreChatService {
    constructor() {
        this.sessionCache = new Map();
        
        // –ë–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        this.baseSystemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é Telegram-–±–æ—Ç–æ–≤ —Å–æ —Å—Ç–∞–∂–µ–º 5+ –ª–µ—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—É—é —Å–º–µ—Ç—É.

–¢–í–û–ô –ü–û–î–•–û–î:
1. –ë—ã—Å—Ç—Ä–æ –ø–æ–Ω—è—Ç—å –±–∏–∑–Ω–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ (1-2 –≤–æ–ø—Ä–æ—Å–∞)
2. –í—ã—è—Å–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–æ—Ç–∞ (2-3 –≤–æ–ø—Ä–æ—Å–∞)  
3. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥ –µ–≥–æ –Ω–∏—à—É
4. –°–æ–±—Ä–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–π —Å–º–µ—Ç—ã

–ü–†–ò–ù–¶–ò–ü–´ –†–ê–ë–û–¢–´:
- –ó–∞–¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –Ω–∏–∫–∞–∫–∏—Ö –æ–±—â–∏—Ö —Ñ—Ä–∞–∑
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –≥–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏–∑ –æ–ø—ã—Ç–∞
- –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º –±–µ–∑ —Ç–µ—Ö–Ω–æ–∂–∞—Ä–≥–æ–Ω–∞
- –í–µ–¥–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –¢–ó

–°–¢–†–£–ö–¢–£–†–ê –î–ò–ê–õ–û–ì–ê:
1. –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –±–∏–∑–Ω–µ—Å–æ–º (1-2 —Å–æ–æ–±—â–µ–Ω–∏—è)
2. –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–æ—Ç–∞ (2-3 —Å–æ–æ–±—â–µ–Ω–∏—è)
3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (2-3 —Å–æ–æ–±—â–µ–Ω–∏—è)
4. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ (1-2 —Å–æ–æ–±—â–µ–Ω–∏—è)
5. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ (–ø–æ—Å–ª–µ 8+ —Å–æ–æ–±—â–µ–Ω–∏–π)

–í–ê–ñ–ù–û: 
- –ù–ï –Ω–∞–∑—ã–≤–∞–π —Ü–µ–Ω—ã –∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
- –ù–ï –æ–±–µ—â–∞–π —Å—Ä–æ–∫–∏
- –ö–æ–≥–¥–∞ —Å–æ–±–µ—Ä–µ—à—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–µ–¥–ª–æ–∂–∏: "–ì–æ—Ç–æ–≤ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω—É—é —Å–º–µ—Ç—É. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç"`;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
    validateFormData(formData) {
        const required = ['name', 'position', 'industry', 'budget', 'timeline'];
        const missing = [];
        
        for (const field of required) {
            if (!formData[field] || formData[field].trim() === '') {
                missing.push(field);
            }
        }
        
        if (missing.length > 0) {
            return {
                valid: false,
                missing: missing,
                error: `–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missing.join(', ')}`
            };
        }
        
        return { valid: true };
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    async createSession(formData) {
        try {
            const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
            
            const session = new PreChatForm({
                sessionId,
                fingerprint: formData.fingerprint || 'unknown',
                name: formData.name,
                position: formData.position,
                industry: formData.industry,
                budget: formData.budget,
                timeline: formData.timeline,
                preferredChannels: formData.preferredChannels || [],
                contacts: formData.contacts || {},
                chatHistory: [],
                formData: formData,
                leadScore: 0,
                status: 'active',
                isActive: true,
                lastActivity: new Date()
            });
            
            await session.save();
            
            // –ö–µ—à–∏—Ä—É–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            this.sessionCache.set(sessionId, session);
            
            logger.info('–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞', { sessionId, industry: formData.industry });
            
            return {
                success: true,
                sessionId: sessionId,
                session: session
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é'
            };
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    async getSession(sessionId) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            if (this.sessionCache.has(sessionId)) {
                const cachedSession = this.sessionCache.get(sessionId);
                logger.info('–°–µ—Å—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –∫–µ—à–∞', { sessionId });
                return cachedSession;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
            const session = await PreChatForm.findOne({ sessionId });
            
            if (session) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                this.sessionCache.set(sessionId, session);
                logger.info('–°–µ—Å—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –ë–î –∏ –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∞', { 
                    sessionId,
                    historyLength: session.chatHistory.length
                });
            } else {
                logger.warn('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î', { sessionId });
            }
            
            return session;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
            return null;
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    async addMessageToHistory(sessionId, role, content, metadata = {}) {
        try {
            const session = await this.getSession(sessionId);
            
            if (!session) {
                logger.error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', sessionId);
                return false;
            }
            
            const message = {
                role: role,
                content: content,
                timestamp: new Date(),
                metadata: metadata
            };
            
            logger.info('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é', {
                sessionId,
                role,
                contentLength: content.length,
                messageType: metadata.messageType || 'unknown'
            });
            
            session.chatHistory.push(message);
            session.lastActivity = new Date();
            
            await session.save();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
            this.sessionCache.set(sessionId, session);
            
            logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ', {
                sessionId,
                historyLength: session.chatHistory.length
            });
            
            return true;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            return false;
        }
    }

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    buildContextualPrompt(formData) {
        return `${this.baseSystemPrompt}

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–ò–ï–ù–¢–ï:
üë§ –ò–º—è: ${formData.name}
üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${formData.position}  
üè¢ –û—Ç—Ä–∞—Å–ª—å: ${formData.industry}
üí∞ –ë—é–¥–∂–µ—Ç: ${formData.budget}
‚è∞ –°—Ä–æ–∫–∏: ${formData.timeline}

–ê–î–ê–ü–¢–ê–¶–ò–Ø –ü–û–î –ö–õ–ò–ï–ù–¢–ê:
- –£—á—Ç–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –æ—Ç—Ä–∞—Å–ª–∏ "${formData.industry}"
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Ä–µ—à–µ–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö –±—é–¥–∂–µ—Ç–∞ "${formData.budget}"
- –û—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ —Å—Ä–æ–∫–∏ "${formData.timeline}"

–ù–∞—á–Ω–∏ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å—É—Ç–∏.`;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥-—Å–∫–æ—Ä–∞
    async updateLeadScore(sessionId) {
        try {
            const session = await this.getSession(sessionId);
            if (!session) return 0;
            
            let score = 0;
            
            // –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏
            if (session.chatHistory.length > 5) score += 20;
            if (session.chatHistory.length > 10) score += 30;
            
            // –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
            const userMessages = session.chatHistory.filter(m => m.role === 'user');
            const avgMessageLength = userMessages.reduce((sum, m) => sum + m.content.length, 0) / userMessages.length;
            
            if (avgMessageLength > 50) score += 20;
            if (avgMessageLength > 100) score += 30;
            
            // –ë—é–¥–∂–µ—Ç
            if (session.formData.budget.includes('100')) score += 30;
            if (session.formData.budget.includes('–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω')) score += 50;
            
            session.leadScore = Math.min(score, 100);
            await session.save();
            
            return session.leadScore;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–¥-—Å–∫–æ—Ä–∞:', error);
            return 0;
        }
    }

    // –ü–æ–∏—Å–∫ —Å–µ—Å—Å–∏–∏ –ø–æ fingerprint
    async findSessionByFingerprint(fingerprint) {
        try {
            const session = await PreChatForm.findOne({ 
                fingerprint: fingerprint,
                isActive: true,
                lastActivity: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) } // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            }).sort({ lastActivity: -1 });
            
            return session;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ fingerprint:', error);
            return null;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    async updateLastActivity(sessionId) {
        try {
            const session = await this.getSession(sessionId);
            if (session) {
                session.lastActivity = new Date();
                await session.save();
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    async getAnalytics() {
        try {
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            const totalSessions = await PreChatForm.countDocuments();
            const todaySessions = await PreChatForm.countDocuments({
                createdAt: { $gte: today }
            });
            
            const activeChats = await PreChatForm.countDocuments({
                isActive: true,
                lastActivity: { $gte: new Date(Date.now() - 30 * 60 * 1000) } // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç
            });
            
            const qualifiedLeads = await PreChatForm.countDocuments({
                leadScore: { $gte: 70 }
            });
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç—Ä–∞—Å–ª—è–º
            const industryStats = await PreChatForm.aggregate([
                { $group: { _id: '$industry', count: { $sum: 1 } } },
                { $sort: { count: -1 } },
                { $limit: 5 }
            ]);
            
            return {
                totalSessions,
                todaySessions,
                activeChats,
                qualifiedLeads,
                avgScore: totalSessions > 0 ? 
                    await PreChatForm.aggregate([
                        { $group: { _id: null, avg: { $avg: '$leadScore' } } }
                    ]).then(r => r[0]?.avg || 0) : 0,
                industryStats,
                conversionRate: totalSessions > 0 ? 
                    (qualifiedLeads / totalSessions * 100).toFixed(1) : 0
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
            return null;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
    clearCache() {
        this.sessionCache.clear();
        logger.info('–ö–µ—à PreChatService –æ—á–∏—â–µ–Ω');
    }
}

module.exports = new PreChatService();
const GPTService = require('./GPTService');
const AdvancedGPTService = require('./AdvancedGPTService');
const { Estimate } = require('../models');
const logger = require('../utils/logger');

class EstimateService {
    constructor() {
        this.basePrices = {
            simple: { min: 50000, max: 100000 },
            medium: { min: 100000, max: 200000 },
            complex: { min: 200000, max: 500000 }
        };
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ —Å–º–µ—Ç—ã - –£–ü–†–û–©–ï–ù
    async calculateProjectEstimate(conversation = []) {
        try {
            logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã —á–µ—Ä–µ–∑ GPT', {
                conversationLength: conversation.length
            });
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–º–µ—Ç—É —á–µ—Ä–µ–∑ GPT
            const gptEstimate = await this.generateEstimateWithGPT(conversation);
            
            if (gptEstimate) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ—Ç—É –≤ –ë–î
                const savedEstimate = await this.saveEstimateToDatabase(gptEstimate);
                return savedEstimate || gptEstimate;
            }
            
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ—Ç—É —á–µ—Ä–µ–∑ GPT');
            
        } catch (error) {
            logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ calculateProjectEstimate:', error);
            
            // Fallback –Ω–∞ –±–∞–∑–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
            const conversationText = conversation
                .map(msg => `${msg.role}: ${msg.content}`)
                .join('\n');
                
            return this.generateBasicEstimate(conversationText);
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–º–µ—Ç—ã —á–µ—Ä–µ–∑ GPT - –ò–°–ü–†–ê–í–õ–ï–ù–û
    async generateEstimateWithGPT(conversation) {
        try {
            // –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            logger.info('üìã –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞...');
            const agreedFeatures = await AdvancedGPTService.extractAgreedFeatures(conversation);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ—Ä–µ–º –í–ï–°–¨ –¥–∏–∞–ª–æ–≥, –∞ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
            const conversationText = conversation
                .map(msg => `${msg.role === 'user' ? '–ö–ª–∏–µ–Ω—Ç' : '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'}: ${msg.content}`)
                .join('\n\n');

            logger.info('üìù –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å–º–µ—Ç—ã:', {
                messageCount: conversation.length,
                textLength: conversationText.length,
                agreedFeaturesCount: agreedFeatures?.agreedFeatures?.length || 0
            });

            let estimatePrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Telegram-–±–æ—Ç–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ —Å–æ–∑–¥–∞–π –î–ï–¢–ê–õ–¨–ù–£–Æ —Å–º–µ—Ç—É, –≤–∫–ª—é—á–∏–≤ –í–°–ï –æ–±—Å—É–∂–¥–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

–î–ò–ê–õ–û–ì –° –ö–õ–ò–ï–ù–¢–û–ú:
${conversationText}

`;

            // –ï—Å–ª–∏ –∏–∑–≤–ª–µ–∫–ª–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —è–≤–Ω–æ
            if (agreedFeatures && agreedFeatures.agreedFeatures.length > 0) {
                estimatePrompt += `
–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ –¥–∏–∞–ª–æ–≥–∞):
${agreedFeatures.agreedFeatures.map((f, i) => 
    `${i+1}. ${f.name} - ${f.description} (—Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${f.complexity})`
).join('\n')}

–ö–õ–Æ–ß–ï–í–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${agreedFeatures.keyRequirements.userCount || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: ${agreedFeatures.keyRequirements.hasAdminPanel ? '–î–ê' : '–ù–ï–¢'}
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${agreedFeatures.keyRequirements.hasStatistics ? '–î–ê' : '–ù–ï–¢'}
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${agreedFeatures.keyRequirements.hasDatabase ? '–î–ê' : '–ù–ï–¢'}
- –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: ${agreedFeatures.keyRequirements.needsConfidentiality ? '–î–ê' : '–ù–ï–¢'}
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ${agreedFeatures.keyRequirements.integrations?.join(', ') || '–Ω–µ—Ç'}
- –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: ${agreedFeatures.projectType}

–í–ê–ñ–ù–û: –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´ –≤ —Å–º–µ—Ç–µ!

`;
            }

            estimatePrompt += `
–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: 
- –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –í–ï–°–¨ –¥–∏–∞–ª–æ–≥ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞
- –ù–ï –û–†–ò–ï–ù–¢–ò–†–£–ô–°–Ø —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ - –æ–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —à–∞–±–ª–æ–Ω–æ–º
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á—Ç–∏ –í–°–ï —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –¢–ó
- –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –û–ù–ò –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´ –≤ —Å–º–µ—Ç–µ
- –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª–∏ —Ñ—Ä–∞–∑–∞–º: "–¥–∞", "–≤–∞–∂–Ω–æ", "–Ω—É–∂–Ω–æ", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ", "–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ"

–ü–†–ê–í–ò–õ–ê –û–¶–ï–ù–ö–ò –í–†–ï–ú–ï–ù–ò –ò –°–¢–û–ò–ú–û–°–¢–ò:
1. –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: 2000 —Ä—É–±/—á–∞—Å

2. –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
   - –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è (FAQ, –ø—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏): 8-15 —á–∞—Å–æ–≤
   - –°—Ä–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è (—Ñ–æ—Ä–º—ã, –∫–∞—Ç–∞–ª–æ–≥–∏): 15-25 —á–∞—Å–æ–≤
   - –°–ª–æ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–ª–∞—Ç–µ–∂–∏): 25-40 —á–∞—Å–æ–≤
   - –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CRM, API): 40-60 —á–∞—Å–æ–≤
   - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –º–∏–Ω–∏–º—É–º 30-50 —á–∞—Å–æ–≤
   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: 20-30 —á–∞—Å–æ–≤
   - –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º: 20-30 —á–∞—Å–æ–≤
   - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: 10-15 —á–∞—Å–æ–≤
   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets: 10-15 —á–∞—Å–æ–≤
   - –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å: +50% –≤—Ä–µ–º–µ–Ω–∏ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
   - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ —Ä–æ–ª–∏: 30-50 —á–∞—Å–æ–≤

3. –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ª—é–±–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:
   - –ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: 10-15 —á–∞—Å–æ–≤
   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: 20-30% –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
   - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: 5-10 —á–∞—Å–æ–≤

4. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:
   - –ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç: 80,000 —Ä—É–±
   - –°—Ä–µ–¥–Ω–∏–π –±–æ—Ç: 150,000 —Ä—É–±
   - –°–ª–æ–∂–Ω—ã–π –±–æ—Ç (—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏): 300,000 —Ä—É–±
   - –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: 400,000+ —Ä—É–±

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê - —Å—Ç—Ä–æ–≥–æ JSON:
{
  "components": [
    {
      "name": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞",
      "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç",
      "category": "basic|communication|integration|admin|special|custom",
      "hours": —á–∏—Å–ª–æ_—á–∞—Å–æ–≤,
      "cost": —Å—Ç–æ–∏–º–æ—Å—Ç—å_–≤_—Ä—É–±–ª—è—Ö,
      "complexity": "low|medium|high|very_high"
    }
  ],
  "totalHours": —Å—É–º–º–∞_–≤—Å–µ—Ö_—á–∞—Å–æ–≤,
  "totalCost": –æ–±—â–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å,
  "timeline": "—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π_—Å—Ä–æ–∫_–≤_–Ω–µ–¥–µ–ª—è—Ö",
  "detectedFeatures": ["—Å–ø–∏—Å–æ–∫", "–≤—Å–µ—Ö", "–æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö", "—Ñ—É–Ω–∫—Ü–∏–π"],
  "businessType": "—Ç–∏–ø_–±–∏–∑–Ω–µ—Å–∞_–∫–ª–∏–µ–Ω—Ç–∞",
  "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è2", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è3"]
}

–ü–†–û–í–ï–†–¨ –°–ï–ë–Ø –ü–ï–†–ï–î –û–¢–í–ï–¢–û–ú:
‚úì –í–∫–ª—é—á–∏–ª –ª–∏ —Ç—ã –í–°–ï —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –í–°–ï–ì–û –¥–∏–∞–ª–æ–≥–∞ (–Ω–µ —Ç–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)?
‚úì –£—á–µ–ª –ª–∏ –≤—Å–µ "–¥–∞" –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞?
‚úì –ï—Å–ª–∏ –æ–±—Å—É–∂–¥–∞–ª–∞—Å—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å - –æ–Ω–∞ –µ—Å—Ç—å –≤ —Å–º–µ—Ç–µ?
‚úì –ï—Å–ª–∏ –æ–±—Å—É–∂–¥–∞–ª–∞—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–Ω–∞ –µ—Å—Ç—å –≤ —Å–º–µ—Ç–µ?
‚úì –ï—Å–ª–∏ –æ–±—Å—É–∂–¥–∞–ª–∞—Å—å –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é - –æ–Ω–∞ –µ—Å—Ç—å –≤ —Å–º–µ—Ç–µ?
‚úì –ï—Å–ª–∏ –æ–±—Å—É–∂–¥–∞–ª–∏—Å—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - –æ–Ω–∏ –µ—Å—Ç—å –≤ —Å–º–µ—Ç–µ?
‚úì –ï—Å–ª–∏ –æ–±—Å—É–∂–¥–∞–ª–∏—Å—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - –æ–Ω–∏ –µ—Å—Ç—å –≤ —Å–º–µ—Ç–µ?
‚úì –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞ –ª–∏ –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å?

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON!`;

            logger.info('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–º–µ—Ç—ã');

            const messages = [
                { role: 'system', content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Telegram-–±–æ—Ç–∞–º. –°–æ–∑–¥–∞–≤–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–º–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–• —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –¥–∏–∞–ª–æ–≥–∞. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON.' },
                { role: 'user', content: estimatePrompt }
            ];

            const response = await AdvancedGPTService.callOpenAIWithPrompt(messages);
            
            logger.info('üìä –û—Ç–≤–µ—Ç GPT –ø–æ–ª—É—á–µ–Ω:', {
                responseLength: response.length,
                isJson: response.includes('{') && response.includes('}'),
                preview: response.substring(0, 200) + '...'
            });
            
            // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            const parsedEstimate = this.parseGPTResponse(response);
            
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            const estimate = this.validateAndFixEstimate(parsedEstimate);
            
            logger.info('‚úÖ –°–º–µ—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:', {
                componentsCount: estimate.components?.length || 0,
                totalCost: estimate.totalCost,
                totalHours: estimate.totalHours,
                componentNames: estimate.components?.map(c => c.name) || []
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            const hasComplexFeatures = estimate.components?.some(c => 
                c.complexity === 'high' || 
                c.complexity === 'very_high' ||
                c.name?.toLowerCase().includes('–∏–Ω—Ç–µ–≥—Ä–∞—Ü') ||
                c.name?.toLowerCase().includes('–∞–¥–º–∏–Ω') ||
                c.name?.toLowerCase().includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫')
            );
            
            const minCost = hasComplexFeatures ? 150000 : 80000;
            
            if (estimate.totalCost < minCost) {
                logger.warn(`–°—Ç–æ–∏–º–æ—Å—Ç—å ${estimate.totalCost} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π ${minCost}, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º`);
                const ratio = minCost / estimate.totalCost;
                estimate.totalCost = minCost;
                estimate.totalHours = Math.ceil(estimate.totalHours * ratio);
                
                // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                estimate.components = estimate.components.map(c => ({
                    ...c,
                    cost: Math.ceil(c.cost * ratio),
                    hours: Math.ceil(c.hours * ratio)
                }));
            }
            
            // –î–æ–ø–æ–ª–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            return {
                ...estimate,
                createdAt: new Date(),
                type: 'gpt_generated',
                status: 'pending',
                metadata: {
                    conversationLength: conversation.length,
                    agreedFeaturesCount: agreedFeatures?.agreedFeatures?.length || 0
                }
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–º–µ—Ç—ã —á–µ—Ä–µ–∑ GPT:', error.message);
            throw error;
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    parseGPTResponse(response) {
        try {
            logger.info('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ GPT', { 
                responseLength: response.length,
                firstChars: response.substring(0, 100)
            });
            
            // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            let cleanedResponse = response;
            
            // –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ –∫–æ–¥–∞
            cleanedResponse = cleanedResponse.replace(/```json\s*/gi, '');
            cleanedResponse = cleanedResponse.replace(/```\s*/gi, '');
            
            // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ JSON (–µ—Å–ª–∏ –µ—Å—Ç—å)
            cleanedResponse = cleanedResponse.replace(/\/\/.*$/gm, '');
            cleanedResponse = cleanedResponse.replace(/\/\*[\s\S]*?\*\//g, '');
            
            // –£–¥–∞–ª—è–µ–º trailing commas
            cleanedResponse = cleanedResponse.replace(/,\s*}/g, '}');
            cleanedResponse = cleanedResponse.replace(/,\s*]/g, ']');
            
            // –ó–∞–º–µ–Ω—è–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ
            cleanedResponse = cleanedResponse.replace(/(['"])?([a-zA-Z0-9_]+)(['"])?:/g, '"$2":');
            
            // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            cleanedResponse = cleanedResponse.trim();
            
            // –ù–∞—Ö–æ–¥–∏–º JSON –æ–±—ä–µ–∫—Ç –≤ –æ—Ç–≤–µ—Ç–µ
            const firstBrace = cleanedResponse.indexOf('{');
            const lastBrace = cleanedResponse.lastIndexOf('}');
            
            if (firstBrace === -1 || lastBrace === -1) {
                throw new Error('JSON –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
            }
            
            let jsonString = cleanedResponse.substring(firstBrace, lastBrace + 1);
            
            // –ü—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            try {
                return JSON.parse(jsonString);
            } catch (firstError) {
                logger.warn('–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å', {
                    error: firstError.message
                });
                
                // –ü—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                jsonString = this.tryFixCommonJSONErrors(jsonString);
                
                try {
                    return JSON.parse(jsonString);
                } catch (secondError) {
                    logger.error('–í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å', {
                        error: secondError.message,
                        jsonPreview: jsonString.substring(0, 200) + '...'
                    });
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å
                    return this.extractBasicStructure(jsonString);
                }
            }
            
        } catch (error) {
            logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', {
                error: error.message,
                responsePreview: response.substring(0, 200) + '...'
            });
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç GPT: ' + error.message);
        }
    }
    
    tryFixCommonJSONErrors(jsonString) {
        try {
            let fixed = jsonString;
            
            // –°—á–∏—Ç–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
            const quoteCount = (fixed.match(/"/g) || []).length;
            if (quoteCount % 2 !== 0) {
                fixed = fixed + '"';
            }
            
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã
            const openBrackets = (fixed.match(/\[/g) || []).length;
            const closeBrackets = (fixed.match(/]/g) || []).length;
            if (openBrackets > closeBrackets) {
                fixed = fixed + ']'.repeat(openBrackets - closeBrackets);
            }
            
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã
            const openBraces = (fixed.match(/{/g) || []).length;
            const closeBraces = (fixed.match(/}/g) || []).length;
            if (openBraces > closeBraces) {
                fixed = fixed + '}'.repeat(openBraces - closeBraces);
            }
            
            // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ
            fixed = fixed.replace(/,,+/g, ',');
            
            // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏ (–µ—â–µ —Ä–∞–∑)
            fixed = fixed.replace(/,\s*}/g, '}');
            fixed = fixed.replace(/,\s*]/g, ']');
            
            return fixed;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON:', error);
            return jsonString;
        }
    }
    
    extractBasicStructure(jsonString) {
        try {
            logger.warn('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ JSON');
            
            const estimate = {
                components: [],
                totalHours: 0,
                totalCost: 0,
                timeline: '2-3 –Ω–µ–¥–µ–ª–∏',
                detectedFeatures: [],
                recommendations: [],
                businessType: '–ë–∏–∑–Ω–µ—Å'
            };
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å totalCost
            const costMatch = jsonString.match(/"totalCost"\s*:\s*(\d+)/);
            if (costMatch) {
                estimate.totalCost = parseInt(costMatch[1]);
                logger.info('–ò–∑–≤–ª–µ—á–µ–Ω totalCost:', estimate.totalCost);
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å totalHours
            const hoursMatch = jsonString.match(/"totalHours"\s*:\s*(\d+)/);
            if (hoursMatch) {
                estimate.totalHours = parseInt(hoursMatch[1]);
                logger.info('–ò–∑–≤–ª–µ—á–µ–Ω totalHours:', estimate.totalHours);
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å timeline
            const timelineMatch = jsonString.match(/"timeline"\s*:\s*"([^"]+)"/);
            if (timelineMatch) {
                estimate.timeline = timelineMatch[1];
                logger.info('–ò–∑–≤–ª–µ—á–µ–Ω timeline:', estimate.timeline);
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å businessType
            const businessMatch = jsonString.match(/"businessType"\s*:\s*"([^"]+)"/);
            if (businessMatch) {
                estimate.businessType = businessMatch[1];
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            const componentsMatch = jsonString.match(/"components"\s*:\s*\[([\s\S]*?)]/);
            if (componentsMatch) {
                try {
                    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                    const componentRegex = /\{\s*"name"\s*:\s*"([^"]+)"[\s\S]*?"hours"\s*:\s*(\d+)[\s\S]*?"cost"\s*:\s*(\d+)/g;
                    let match;
                    
                    while ((match = componentRegex.exec(componentsMatch[1])) !== null) {
                        estimate.components.push({
                            name: match[1],
                            description: '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞',
                            hours: parseInt(match[2]),
                            cost: parseInt(match[3]),
                            complexity: 'medium',
                            category: 'custom'
                        });
                    }
                    
                    logger.info('–ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', estimate.components.length);
                } catch (e) {
                    logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:', e.message);
                }
            }
            
            // –ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ—Ç –∏–ª–∏ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ
            if (estimate.components.length === 0 || (estimate.totalCost === 0 && estimate.totalHours === 0)) {
                logger.warn('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
                
                estimate.totalCost = 100000;
                estimate.totalHours = 50;
                estimate.timeline = '2-3 –Ω–µ–¥–µ–ª–∏';
                estimate.components = [
                    {
                        name: '–ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞',
                        description: '–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥, –±–∞–∑–æ–≤–æ–µ –º–µ–Ω—é',
                        hours: 10,
                        cost: 20000,
                        complexity: 'low',
                        category: 'basic'
                    },
                    {
                        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª',
                        description: '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º',
                        hours: 30,
                        cost: 60000,
                        complexity: 'medium',
                        category: 'custom'
                    },
                    {
                        name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞',
                        description: '–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞',
                        hours: 10,
                        cost: 20000,
                        complexity: 'low',
                        category: 'basic'
                    }
                ];
                
                estimate.detectedFeatures = ['–ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞'];
                estimate.recommendations = ['–ù–∞—á–∞—Ç—å —Å –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏', '–î–æ–±–∞–≤–ª—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—ç—Ç–∞–ø–Ω–æ'];
            } else {
                // –ï—Å–ª–∏ –∏–∑–≤–ª–µ–∫–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
                if (estimate.components.length > 0 && estimate.totalCost === 0) {
                    estimate.totalCost = estimate.components.reduce((sum, c) => sum + (c.cost || 0), 0);
                    estimate.totalHours = estimate.components.reduce((sum, c) => sum + (c.hours || 0), 0);
                }
                
                estimate.detectedFeatures = estimate.components.map(c => c.name);
            }
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if (estimate.totalCost < 50000) {
                estimate.totalCost = 80000;
            }
            if (estimate.totalHours < 20) {
                estimate.totalHours = 40;
            }
            
            logger.info('–ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞:', {
                totalCost: estimate.totalCost,
                totalHours: estimate.totalHours,
                componentsCount: estimate.components.length
            });
            
            return estimate;
            
        } catch (error) {
            logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            return {
                components: [{
                    name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram-–±–æ—Ç–∞',
                    description: '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º',
                    hours: 50,
                    cost: 100000,
                    complexity: 'medium',
                    category: 'custom'
                }],
                totalHours: 50,
                totalCost: 100000,
                timeline: '2-3 –Ω–µ–¥–µ–ª–∏',
                detectedFeatures: ['–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–∞'],
                recommendations: ['–î–µ—Ç–∞–ª–∏ —É—Ç–æ—á–Ω–∏–º —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'],
                businessType: '–ë–∏–∑–Ω–µ—Å'
            };
        }
    }

    validateAndFixEstimate(estimate) {
        try {
            logger.info('–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–º–µ—Ç—ã', {
                hasEstimate: !!estimate,
                estimateType: typeof estimate,
                keys: estimate ? Object.keys(estimate) : []
            });
            
            // –ï—Å–ª–∏ estimate –Ω–µ –æ–±—ä–µ–∫—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if (!estimate || typeof estimate !== 'object') {
                logger.warn('Estimate –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
                return this.generateBasicEstimate('');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            const fixed = {
                components: estimate.components || [],
                totalHours: estimate.totalHours || 0,
                totalCost: estimate.totalCost || 0,
                timeline: estimate.timeline || '2-3 –Ω–µ–¥–µ–ª–∏',
                detectedFeatures: estimate.detectedFeatures || [],
                recommendations: estimate.recommendations || [],
                businessType: estimate.businessType || '–ë–∏–∑–Ω–µ—Å',
                createdAt: estimate.createdAt || new Date(),
                type: estimate.type || 'gpt_generated',
                status: estimate.status || 'pending'
            };
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if (!Array.isArray(fixed.components)) {
                fixed.components = [];
            }
            
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            fixed.components = fixed.components.map(comp => ({
                name: comp.name || '–§—É–Ω–∫—Ü–∏—è –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                description: comp.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
                hours: parseInt(comp.hours) || 10,
                cost: parseInt(comp.cost) || 20000,
                complexity: comp.complexity || 'medium',
                category: comp.category || 'custom'
            }));
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
            if (fixed.totalCost === 0 && fixed.components.length > 0) {
                fixed.totalCost = fixed.components.reduce((sum, c) => sum + c.cost, 0);
            }
            
            if (fixed.totalHours === 0 && fixed.components.length > 0) {
                fixed.totalHours = fixed.components.reduce((sum, c) => sum + c.hours, 0);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if (fixed.totalCost < 50000) {
                logger.warn('–°—Ç–æ–∏–º–æ—Å—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º');
                fixed.totalCost = 80000;
            }
            
            if (fixed.totalHours < 20) {
                logger.warn('–ß–∞—Å—ã –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º');
                fixed.totalHours = 40;
            }
            
            // –ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ
            if (fixed.components.length === 0) {
                logger.warn('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ');
                fixed.components = [
                    {
                        name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram-–±–æ—Ç–∞',
                        description: '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
                        hours: fixed.totalHours || 40,
                        cost: fixed.totalCost || 80000,
                        complexity: 'medium',
                        category: 'custom'
                    }
                ];
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º detectedFeatures –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π
            if (fixed.detectedFeatures.length === 0) {
                fixed.detectedFeatures = fixed.components.map(c => c.name);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É —Å–º–µ—Ç—ã
            if (fixed.components.length < 5) {
                logger.warn(`‚ö†Ô∏è –°–º–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ ${fixed.components.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, —ç—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–æ`);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if (!fixed.recommendations.includes('–í–ù–ò–ú–ê–ù–ò–ï: –°–º–µ—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π')) {
                    fixed.recommendations.unshift('–í–ù–ò–ú–ê–ù–ò–ï: –°–º–µ—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞');
                }
            }
            
            logger.info('–°–º–µ—Ç–∞ –ø—Ä–æ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞', {
                totalCost: fixed.totalCost,
                totalHours: fixed.totalHours,
                componentsCount: fixed.components.length
            });
            
            return fixed;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–º–µ—Ç—ã:', error);
            return this.generateBasicEstimate('');
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    generateBasicEstimate(requirements) {
        logger.warn('–ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–º–µ—Ç—ã');
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        const lowerReq = requirements.toLowerCase();
        const components = [];
        let totalHours = 0;
        let totalCost = 0;
        
        // –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ - –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–∞
        components.push({
            name: '–ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–æ—Ç–∞',
            description: '–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥, –±–∞–∑–æ–≤–æ–µ –º–µ–Ω—é, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞',
            hours: 8,
            cost: 16000,
            complexity: 'low',
            category: 'basic'
        });
        totalHours += 8;
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        if (lowerReq.includes('–∑–∞–ø–∏—Å—å') || lowerReq.includes('–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω')) {
            components.push({
                name: '–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º',
                description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –≤—ã–±–æ—Ä —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏',
                hours: 20,
                cost: 40000,
                complexity: 'high',
                category: 'booking'
            });
            totalHours += 20;
        }
        
        if (lowerReq.includes('–Ω–∞–ø–æ–º–∏–Ω–∞–Ω')) {
            components.push({
                name: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
                description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–∏—Å—è—Ö –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ 2 —á–∞—Å–∞',
                hours: 10,
                cost: 20000,
                complexity: 'medium',
                category: 'communication'
            });
            totalHours += 10;
        }
        
        // –ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
        if (components.length < 3) {
            components.push({
                name: '–û—Å–Ω–æ–≤–Ω–æ–π –±–∏–∑–Ω–µ—Å-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª',
                description: '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º',
                hours: 20,
                cost: 40000,
                complexity: 'medium',
                category: 'custom'
            });
            totalHours += 20;
        }
        
        // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
        components.push({
            name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å',
            description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º, –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
            hours: 12,
            cost: 24000,
            complexity: 'medium',
            category: 'admin'
        });
        totalHours += 12;
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - 20% –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        const testingHours = Math.ceil(totalHours * 0.2);
        components.push({
            name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞',
            description: '–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
            hours: testingHours,
            cost: testingHours * 2000,
            complexity: 'medium',
            category: 'basic'
        });
        totalHours += testingHours;
        
        // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        totalCost = totalHours * 2000;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        if (totalCost < 80000) {
            totalCost = 80000;
            totalHours = 40;
        }
        
        return {
            components,
            totalHours,
            totalCost,
            timeline: this.calculateTimeline(totalHours),
            detectedFeatures: components.map(c => c.name),
            createdAt: new Date(),
            type: 'basic_estimate',
            status: 'pending',
            businessType: this.detectBusinessType(requirements),
            recommendations: [
                '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∞—Ç—å —Å MVP –≤–µ—Ä—Å–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π',
                '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –≤—Ç–æ—Ä–æ–º —ç—Ç–∞–ø–µ',
                '–í–æ–∑–º–æ–∂–Ω–∞ –ø–æ—ç—Ç–∞–ø–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'
            ]
        };
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ –∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    detectBusinessType(requirements) {
        const lowerReq = requirements.toLowerCase();
        
        if (lowerReq.includes('—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥') || lowerReq.includes('–º–µ–¥–∏—Ü–∏–Ω') || lowerReq.includes('–∫–ª–∏–Ω–∏–∫')) {
            return '–ú–µ–¥–∏—Ü–∏–Ω–∞/–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è';
        } else if (lowerReq.includes('–º–∞–≥–∞–∑–∏–Ω') || lowerReq.includes('—Ç–æ–≤–∞—Ä')) {
            return '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω';
        } else if (lowerReq.includes('—Å–∞–ª–æ–Ω') || lowerReq.includes('–∫—Ä–∞—Å–æ—Ç')) {
            return '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã';
        } else if (lowerReq.includes('—Ä–µ—Å—Ç–æ—Ä–∞–Ω') || lowerReq.includes('–∫–∞—Ñ–µ')) {
            return '–†–µ—Å—Ç–æ—Ä–∞–Ω/–ö–∞—Ñ–µ';
        } else if (lowerReq.includes('–∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥') || lowerReq.includes('–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü')) {
            return '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥';
        } else {
            return '–ë–∏–∑–Ω–µ—Å';
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async saveEstimateToDatabase(estimate) {
        try {
            if (!Estimate) {
                logger.warn('–ú–æ–¥–µ–ª—å Estimate –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                return estimate;
            }
            
            const savedEstimate = await Estimate.create(estimate);
            logger.info('‚úÖ –°–º–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î', { id: savedEstimate._id });
            
            return savedEstimate;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', error.message);
            return estimate;
        }
    }

    // –†–∞—Å—á–µ—Ç —Å—Ä–æ–∫–æ–≤
    calculateTimeline(totalHours) {
        const daysNeeded = Math.ceil(totalHours / 6);
        
        if (daysNeeded <= 7) return '1 –Ω–µ–¥–µ–ª—è';
        if (daysNeeded <= 14) return '2 –Ω–µ–¥–µ–ª–∏';
        if (daysNeeded <= 21) return '3 –Ω–µ–¥–µ–ª–∏';
        if (daysNeeded <= 30) return '1 –º–µ—Å—è—Ü';
        if (daysNeeded <= 45) return '1.5 –º–µ—Å—è—Ü–∞';
        if (daysNeeded <= 60) return '2 –º–µ—Å—è—Ü–∞';
        
        return `${Math.ceil(daysNeeded / 30)} –º–µ—Å—è—Ü–∞`;
    }

    // –†–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    async calculateEstimate(requirements, conversation = []) {
        return this.calculateProjectEstimate(conversation);
    }

    // –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    getQuickEstimate(category = 'medium') {
        const prices = this.basePrices[category] || this.basePrices.medium;
        return {
            minCost: prices.min,
            maxCost: prices.max,
            averageCost: Math.round((prices.min + prices.max) / 2),
            timeline: category === 'simple' ? '2-3 –Ω–µ–¥–µ–ª–∏' : category === 'complex' ? '1.5-2 –º–µ—Å—è—Ü–∞' : '3-4 –Ω–µ–¥–µ–ª–∏'
        };
    }
}

module.exports = new EstimateService();
const GPTService = require('./GPTService');
const AdvancedGPTService = require('./AdvancedGPTService');
const FeaturesService = require('./FeaturesService');
const { Estimate } = require('../models');
const logger = require('../utils/logger');

class EstimateService {
    constructor() {
        this.basePrices = {
            simple: { min: 50000, max: 100000 },
            medium: { min: 100000, max: 200000 },
            complex: { min: 200000, max: 500000 }
        };
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ —Å–º–µ—Ç—ã
    async calculateProjectEstimate(requirements, conversation = []) {
        try {
            logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã —á–µ—Ä–µ–∑ GPT', {
                requirementsType: typeof requirements,
                conversationLength: conversation.length
            });
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–º–µ—Ç—É —á–µ—Ä–µ–∑ GPT —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π
            const gptEstimate = await this.generateEstimateWithGPT(requirements, conversation);
            
            if (gptEstimate) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥
                await this.saveNewFeaturesToCatalog(gptEstimate.components);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ—Ç—É –≤ –ë–î
                const savedEstimate = await this.saveEstimateToDatabase(gptEstimate);
                
                return savedEstimate || gptEstimate;
            }
            
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ—Ç—É —á–µ—Ä–µ–∑ GPT');
            
        } catch (error) {
            logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ calculateProjectEstimate:', error);
            
            // Fallback –Ω–∞ –±–∞–∑–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
            // –ü–µ—Ä–µ–¥–∞–µ–º requirements –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            const requirementsText = typeof requirements === 'string' 
                ? requirements 
                : JSON.stringify(requirements);
                
            return this.generateBasicEstimate(requirementsText);
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–º–µ—Ç—ã —á–µ—Ä–µ–∑ GPT —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    async generateEstimateWithGPT(requirements, conversation) {
        try {
            const conversationText = conversation
                .slice(-20) // –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                .map(msg => `${msg.role === 'user' ? '–ö–ª–∏–µ–Ω—Ç' : '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'}: ${msg.content}`)
                .join('\n\n');

            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            const existingFeatures = await FeaturesService.getAllFeatures();
            const featuresContext = this.formatFeaturesForContext(existingFeatures);

            const estimatePrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Telegram-–±–æ—Ç–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ —Å–æ–∑–¥–∞–π –î–ï–¢–ê–õ–¨–ù–£–Æ —Å–º–µ—Ç—É, –≤–∫–ª—é—á–∏–≤ –í–°–ï –æ–±—Å—É–∂–¥–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

–î–ò–ê–õ–û–ì –° –ö–õ–ò–ï–ù–¢–û–ú:
${conversationText}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –≤–µ—Å—å –¥–∏–∞–ª–æ–≥ –∏ –Ω–∞–π–¥–∏ –í–°–ï —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∫–∞–∫ "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ". –ù–ï –ü–†–û–ü–£–°–¢–ò –ù–ò –û–î–ù–û–ô –§–£–ù–ö–¶–ò–ò!

–ü–†–ê–í–ò–õ–ê –°–û–ó–î–ê–ù–ò–Ø –°–ú–ï–¢–´:
1. –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: 2000 —Ä—É–±/—á–∞—Å
2. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∏ –í–°–ï —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞, –æ—Å–æ–±–µ–Ω–Ω–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç –Ω–∞–∑–≤–∞–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏
3. –î–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–π –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
4. –í—Ä–µ–º—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É:
   - –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è: 8-15 —á–∞—Å–æ–≤
   - –°—Ä–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è: 15-25 —á–∞—Å–æ–≤  
   - –°–ª–æ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å): 25-40 —á–∞—Å–æ–≤
   - –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, CRM): 40-60 —á–∞—Å–æ–≤
5. –î–æ–±–∞–≤—å 20-30% –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
6. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: 150000 —Ä—É–± –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤

–û–°–û–ë–û–ï –í–ù–ò–ú–ê–ù–ò–ï –æ–±—Ä–∞—Ç–∏ –Ω–∞:
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ (CRM, –ø–ª–∞—Ç–µ–∂–∏)
- –ü–æ–¥–¥–µ—Ä–∂–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —è–∑—ã–∫–æ–≤
- –°–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–∞–∑–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∞–≤
- –ê–Ω–∞–ª–∏—Ç–∏–∫—É –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∞–Ω–µ–ª–∏

–°–æ–∑–¥–∞–π —Å–º–µ—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "components": [
    {
      "name": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞",
      "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç",
      "category": "basic|catalog|payments|booking|integrations|communication|analytics|admin|special|custom",
      "keywords": ["–∫–ª—é—á–µ–≤–æ–µ1", "–∫–ª—é—á–µ–≤–æ–µ2"],
      "hours": —á–∏—Å–ª–æ_—á–∞—Å–æ–≤,
      "cost": —Å—Ç–æ–∏–º–æ—Å—Ç—å_–≤_—Ä—É–±–ª—è—Ö,
      "complexity": "low|medium|high|very_high",
      "isNew": true/false
    }
  ],
  "totalHours": —Å—É–º–º–∞_–≤—Å–µ—Ö_—á–∞—Å–æ–≤,
  "totalCost": –æ–±—â–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å,
  "timeline": "—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π_—Å—Ä–æ–∫_–≤_–Ω–µ–¥–µ–ª—è—Ö",
  "detectedFeatures": ["—Å–ø–∏—Å–æ–∫", "–≤—Å–µ—Ö", "–æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö", "—Ñ—É–Ω–∫—Ü–∏–π"],
  "businessType": "—Ç–∏–ø_–±–∏–∑–Ω–µ—Å–∞_–∫–ª–∏–µ–Ω—Ç–∞",
  "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è2"]
}

–ü–†–û–í–ï–†–¨ –°–ï–ë–Ø: 
- –í–∫–ª—é—á–∏–ª –ª–∏ —Ç—ã –í–°–ï —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞?
- –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞ –ª–∏ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ç–∞–∫–æ–≥–æ –æ–±—ä–µ–º–∞ —Ä–∞–±–æ—Ç?
- –£—á—Ç–µ–Ω–∞ –ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π?

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON!`;

            const messages = [
                { role: 'system', content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Telegram-–±–æ—Ç–∞–º. –°–æ–∑–¥–∞–≤–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–º–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –¥–∏–∞–ª–æ–≥–∞. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON.' },
                { role: 'user', content: estimatePrompt }
            ];

            const response = await AdvancedGPTService.callOpenAIWithPrompt(messages);
            
            // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            const estimate = this.parseGPTResponse(response);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            const hasComplexFeatures = estimate.components?.some(c => 
                c.complexity === 'high' || 
                c.complexity === 'very_high' ||
                c.name?.toLowerCase().includes('–∏–Ω—Ç–µ–≥—Ä–∞—Ü') ||
                c.name?.toLowerCase().includes('–∞–≤—Ç–æ—Ä–∏–∑') ||
                c.name?.toLowerCase().includes('—è–∑—ã–∫')
            );
            
            const minCost = hasComplexFeatures ? 150000 : 80000;
            
            if (estimate.totalCost < minCost) {
                logger.warn(`–°—Ç–æ–∏–º–æ—Å—Ç—å ${estimate.totalCost} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π ${minCost}, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º`);
                const ratio = minCost / estimate.totalCost;
                estimate.totalCost = minCost;
                estimate.totalHours = Math.ceil(estimate.totalHours * ratio);
                
                // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                estimate.components = estimate.components.map(c => ({
                    ...c,
                    cost: Math.ceil(c.cost * ratio),
                    hours: Math.ceil(c.hours * ratio)
                }));
            }
            
            // –î–æ–ø–æ–ª–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            return {
                ...estimate,
                createdAt: new Date(),
                type: 'gpt_generated',
                status: 'pending',
                metadata: {
                    requirementsLength: requirements.length,
                    conversationLength: conversation.length,
                    newFeaturesCount: estimate.components.filter(c => c.isNew).length
                }
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–º–µ—Ç—ã —á–µ—Ä–µ–∑ GPT:', error.message);
            throw error;
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–º–µ—Ç—ã
    validateAndFixEstimate(estimate) {
        try {
            logger.info('–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–º–µ—Ç—ã', {
                hasEstimate: !!estimate,
                estimateType: typeof estimate,
                keys: estimate ? Object.keys(estimate) : []
            });
            
            // –ï—Å–ª–∏ estimate –Ω–µ –æ–±—ä–µ–∫—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if (!estimate || typeof estimate !== 'object') {
                logger.warn('Estimate –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
                return this.generateBasicEstimate('');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            const fixed = {
                components: estimate.components || [],
                totalHours: estimate.totalHours || 0,
                totalCost: estimate.totalCost || 0,
                timeline: estimate.timeline || '2-3 –Ω–µ–¥–µ–ª–∏',
                detectedFeatures: estimate.detectedFeatures || [],
                recommendations: estimate.recommendations || [],
                businessType: estimate.businessType || '–ë–∏–∑–Ω–µ—Å',
                createdAt: estimate.createdAt || new Date(),
                type: estimate.type || 'gpt_generated',
                status: estimate.status || 'pending'
            };
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if (!Array.isArray(fixed.components)) {
                fixed.components = [];
            }
            
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            fixed.components = fixed.components.map(comp => ({
                name: comp.name || '–§—É–Ω–∫—Ü–∏—è –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                description: comp.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
                hours: parseInt(comp.hours) || 10,
                cost: parseInt(comp.cost) || 20000,
                complexity: comp.complexity || 'medium',
                category: comp.category || 'custom',
                isNew: comp.isNew || false
            }));
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
            if (fixed.totalCost === 0 && fixed.components.length > 0) {
                fixed.totalCost = fixed.components.reduce((sum, c) => sum + c.cost, 0);
            }
            
            if (fixed.totalHours === 0 && fixed.components.length > 0) {
                fixed.totalHours = fixed.components.reduce((sum, c) => sum + c.hours, 0);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if (fixed.totalCost < 50000) {
                logger.warn('–°—Ç–æ–∏–º–æ—Å—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º');
                fixed.totalCost = 80000;
            }
            
            if (fixed.totalHours < 20) {
                logger.warn('–ß–∞—Å—ã –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º');
                fixed.totalHours = 40;
            }
            
            // –ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ
            if (fixed.components.length === 0) {
                logger.warn('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ');
                fixed.components = [
                    {
                        name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram-–±–æ—Ç–∞',
                        description: '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
                        hours: fixed.totalHours || 40,
                        cost: fixed.totalCost || 80000,
                        complexity: 'medium',
                        category: 'custom',
                        isNew: false
                    }
                ];
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º detectedFeatures –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π
            if (fixed.detectedFeatures.length === 0) {
                fixed.detectedFeatures = fixed.components.map(c => c.name);
            }
            
            logger.info('–°–º–µ—Ç–∞ –ø—Ä–æ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞', {
                totalCost: fixed.totalCost,
                totalHours: fixed.totalHours,
                componentsCount: fixed.components.length
            });
            
            return fixed;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–º–µ—Ç—ã:', error);
            return this.generateBasicEstimate('');
        }
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ GPT —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    parseGPTResponse(response) {
        try {
            logger.info('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ GPT', { 
                responseLength: response.length,
                firstChars: response.substring(0, 100)
            });
            
            // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            let cleanedResponse = response;
            
            // –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ –∫–æ–¥–∞
            cleanedResponse = cleanedResponse.replace(/```json\s*/gi, '');
            cleanedResponse = cleanedResponse.replace(/```\s*/gi, '');
            
            // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ JSON (–µ—Å–ª–∏ –µ—Å—Ç—å)
            cleanedResponse = cleanedResponse.replace(/\/\/.*$/gm, '');
            cleanedResponse = cleanedResponse.replace(/\/\*[\s\S]*?\*\//g, '');
            
            // –£–¥–∞–ª—è–µ–º trailing commas (–∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏)
            cleanedResponse = cleanedResponse.replace(/,\s*}/g, '}');
            cleanedResponse = cleanedResponse.replace(/,\s*]/g, ']');
            
            // –ó–∞–º–µ–Ω—è–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ)
            // –ù–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∫–ª—é—á–µ–π/–∑–Ω–∞—á–µ–Ω–∏–π
            cleanedResponse = cleanedResponse.replace(/(['"])?([a-zA-Z0-9_]+)(['"])?:/g, '"$2":');
            
            // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            cleanedResponse = cleanedResponse.trim();
            
            // –ù–∞—Ö–æ–¥–∏–º JSON –æ–±—ä–µ–∫—Ç –≤ –æ—Ç–≤–µ—Ç–µ
            const firstBrace = cleanedResponse.indexOf('{');
            const lastBrace = cleanedResponse.lastIndexOf('}');
            
            if (firstBrace === -1 || lastBrace === -1) {
                throw new Error('JSON –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
            }
            
            let jsonString = cleanedResponse.substring(firstBrace, lastBrace + 1);
            
            // –ü—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            try {
                return JSON.parse(jsonString);
            } catch (firstError) {
                logger.warn('–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å', {
                    error: firstError.message,
                    position: this.getErrorPosition(firstError.message)
                });
                
                // –ü—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                jsonString = this.tryFixCommonJSONErrors(jsonString);
                
                try {
                    return JSON.parse(jsonString);
                } catch (secondError) {
                    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                    logger.error('–í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å', {
                        error: secondError.message,
                        jsonPreview: jsonString.substring(0, 200) + '...'
                    });
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å
                    return this.extractBasicStructure(jsonString);
                }
            }
            
        } catch (error) {
            logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', {
                error: error.message,
                responsePreview: response.substring(0, 200) + '...'
            });
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç GPT: ' + error.message);
        }
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ JSON
    tryFixCommonJSONErrors(jsonString) {
        try {
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            let fixed = jsonString;
            
            // –°—á–∏—Ç–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
            const quoteCount = (fixed.match(/"/g) || []).length;
            if (quoteCount % 2 !== 0) {
                // –ù–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–≤—ã—á–µ–∫ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
                fixed = fixed + '"';
            }
            
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã
            const openBrackets = (fixed.match(/\[/g) || []).length;
            const closeBrackets = (fixed.match(/]/g) || []).length;
            if (openBrackets > closeBrackets) {
                fixed = fixed + ']'.repeat(openBrackets - closeBrackets);
            }
            
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã
            const openBraces = (fixed.match(/{/g) || []).length;
            const closeBraces = (fixed.match(/}/g) || []).length;
            if (openBraces > closeBraces) {
                fixed = fixed + '}'.repeat(openBraces - closeBraces);
            }
            
            // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ
            fixed = fixed.replace(/,,+/g, ',');
            
            // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏ (–µ—â–µ —Ä–∞–∑)
            fixed = fixed.replace(/,\s*}/g, '}');
            fixed = fixed.replace(/,\s*]/g, ']');
            
            return fixed;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON:', error);
            return jsonString;
        }
    }
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—à–∏–±–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    getErrorPosition(errorMessage) {
        const match = errorMessage.match(/position (\d+)/i);
        return match ? parseInt(match[1]) : null;
    }
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ JSON
    extractBasicStructure(jsonString) {
        try {
            const estimate = {
                components: [],
                totalHours: 0,
                totalCost: 0,
                timeline: '2-3 –Ω–µ–¥–µ–ª–∏',
                detectedFeatures: [],
                recommendations: []
            };
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å totalCost
            const costMatch = jsonString.match(/"totalCost"\s*:\s*(\d+)/);
            if (costMatch) {
                estimate.totalCost = parseInt(costMatch[1]);
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å totalHours
            const hoursMatch = jsonString.match(/"totalHours"\s*:\s*(\d+)/);
            if (hoursMatch) {
                estimate.totalHours = parseInt(hoursMatch[1]);
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å timeline
            const timelineMatch = jsonString.match(/"timeline"\s*:\s*"([^"]+)"/);
            if (timelineMatch) {
                estimate.timeline = timelineMatch[1];
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            const componentsMatch = jsonString.match(/"components"\s*:\s*\[([\s\S]*?)]/);
            if (componentsMatch) {
                try {
                    // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –º–∞—Å—Å–∏–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                    const componentsJson = '[' + componentsMatch[1] + ']';
                    const components = JSON.parse(this.tryFixCommonJSONErrors(componentsJson));
                    estimate.components = components;
                } catch (e) {
                    logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:', e.message);
                }
            }
            
            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–≤–ª–µ–∫–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–º–µ—Ç—É
            if (estimate.totalCost === 0 && estimate.totalHours === 0) {
                logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
                estimate.totalCost = 100000;
                estimate.totalHours = 50;
                estimate.components = [
                    {
                        name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–∞',
                        description: '–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º',
                        hours: 40,
                        cost: 80000,
                        complexity: 'medium'
                    },
                    {
                        name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞',
                        description: '–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞',
                        hours: 10,
                        cost: 20000,
                        complexity: 'low'
                    }
                ];
            }
            
            return estimate;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ä–∞–±–æ—á—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            return {
                components: [{
                    name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram-–±–æ—Ç–∞',
                    description: '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
                    hours: 50,
                    cost: 100000,
                    complexity: 'medium'
                }],
                totalHours: 50,
                totalCost: 100000,
                timeline: '2-3 –Ω–µ–¥–µ–ª–∏',
                detectedFeatures: ['–ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª'],
                recommendations: ['–ù–∞—á–∞—Ç—å —Å MVP –≤–µ—Ä—Å–∏–∏']
            };
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ GPT
    formatFeaturesForContext(features) {
        const examples = [];
        const categories = Object.keys(features);
        
        // –ë–µ—Ä–µ–º –ø–æ 2-3 –ø—Ä–∏–º–µ—Ä–∞ –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories.forEach(category => {
            const categoryFeatures = features[category].slice(0, 2);
            categoryFeatures.forEach(feature => {
                examples.push(`- ${feature.name} (${category}): ${feature.hours}—á, ${feature.cost}—Ä—É–±`);
            });
        });
        
        return examples.join('\n');
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ –∫–∞—Ç–∞–ª–æ–≥
    async saveNewFeaturesToCatalog(components) {
        try {
            const newFeatures = components.filter(component => component.isNew);
            
            if (newFeatures.length === 0) {
                logger.info('–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–∞–ª–æ–≥');
                return;
            }
            
            logger.info(`üÜï –ù–∞–π–¥–µ–Ω–æ ${newFeatures.length} –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞`);
            
            for (const feature of newFeatures) {
                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
                const catalogFeature = {
                    name: feature.name,
                    description: feature.description,
                    keywords: feature.keywords || [],
                    hours: feature.hours,
                    cost: feature.cost,
                    complexity: feature.complexity,
                    addedAt: new Date().toISOString(),
                    usageCount: 1
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                await FeaturesService.addFeature(feature.category || 'custom', catalogFeature);
                
                logger.info(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: ${feature.name} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${feature.category}`);
            }
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:', error);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–º–µ—Ç–æ–π
        }
    }

    // –ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–º–µ—Ç—ã (fallback) —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    generateBasicEstimate(requirements) {
        logger.warn('–ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–º–µ—Ç—ã');
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        const lowerReq = requirements.toLowerCase();
        const components = [];
        let totalHours = 0;
        let totalCost = 0;
        
        // –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ - –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–∞
        components.push({
            name: '–ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–æ—Ç–∞',
            description: '–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥, –±–∞–∑–æ–≤–æ–µ –º–µ–Ω—é, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞',
            hours: 8,
            cost: 16000,
            complexity: 'low',
            category: 'basic'
        });
        totalHours += 8;
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        if (lowerReq.includes('–∑–∞–ø–∏—Å—å') || lowerReq.includes('–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω')) {
            components.push({
                name: '–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º',
                description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –≤—ã–±–æ—Ä —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏',
                hours: 20,
                cost: 40000,
                complexity: 'high',
                category: 'booking'
            });
            totalHours += 20;
        }
        
        if (lowerReq.includes('–Ω–∞–ø–æ–º–∏–Ω–∞–Ω')) {
            components.push({
                name: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
                description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–∏—Å—è—Ö –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ 2 —á–∞—Å–∞',
                hours: 10,
                cost: 20000,
                complexity: 'medium',
                category: 'communication'
            });
            totalHours += 10;
        }
        
        if (lowerReq.includes('–æ–ø–µ—Ä–∞—Ç–æ—Ä') || lowerReq.includes('–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')) {
            components.push({
                name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º',
                description: '–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∂–∏–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
                hours: 12,
                cost: 24000,
                complexity: 'medium',
                category: 'communication'
            });
            totalHours += 12;
        }
        
        if (lowerReq.includes('—Ä–∞—Å–ø–∏—Å–∞–Ω') || lowerReq.includes('—Å–º–µ–Ω')) {
            components.push({
                name: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∞',
                description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–º —Å–º–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
                hours: 15,
                cost: 30000,
                complexity: 'medium',
                category: 'admin'
            });
            totalHours += 15;
        }
        
        if (lowerReq.includes('—Å–æ–æ–±—â–µ–Ω') && lowerReq.includes('–ø–µ—Ä—Å–æ–Ω–∞–ª')) {
            components.push({
                name: '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —á–∞—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞',
                description: '–û–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –º–µ–∂–¥—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞',
                hours: 12,
                cost: 24000,
                complexity: 'medium',
                category: 'communication'
            });
            totalHours += 12;
        }
        
        if (lowerReq.includes('–∑–∞—è–≤–∫') || lowerReq.includes('–∑–∞–∫—É–ø–∫')) {
            components.push({
                name: '–°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–∫—É–ø–∫–∏',
                description: '–§–æ—Ä–º–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                hours: 15,
                cost: 30000,
                complexity: 'medium',
                category: 'special'
            });
            totalHours += 15;
        }
        
        if (lowerReq.includes('faq') || lowerReq.includes('–≤–æ–ø—Ä–æ—Å')) {
            components.push({
                name: '–†–∞–∑–¥–µ–ª FAQ',
                description: '–ë–∞–∑–∞ —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π',
                hours: 8,
                cost: 16000,
                complexity: 'low',
                category: 'communication'
            });
            totalHours += 8;
        }
        
        // –ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
        if (components.length < 3) {
            components.push({
                name: '–û—Å–Ω–æ–≤–Ω–æ–π –±–∏–∑–Ω–µ—Å-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª',
                description: '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º',
                hours: 20,
                cost: 40000,
                complexity: 'medium',
                category: 'custom'
            });
            totalHours += 20;
        }
        
        // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
        components.push({
            name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å',
            description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º, –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
            hours: 12,
            cost: 24000,
            complexity: 'medium',
            category: 'admin'
        });
        totalHours += 12;
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - 20% –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        const testingHours = Math.ceil(totalHours * 0.2);
        components.push({
            name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞',
            description: '–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
            hours: testingHours,
            cost: testingHours * 2000,
            complexity: 'medium',
            category: 'basic'
        });
        totalHours += testingHours;
        
        // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        totalCost = totalHours * 2000;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        if (totalCost < 80000) {
            totalCost = 80000;
            totalHours = 40;
        }
        
        return {
            components,
            totalHours,
            totalCost,
            timeline: this.calculateTimeline(totalHours),
            detectedFeatures: components.map(c => c.name),
            createdAt: new Date(),
            type: 'basic_estimate',
            status: 'pending',
            businessType: this.detectBusinessType(requirements),
            recommendations: [
                '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∞—Ç—å —Å MVP –≤–µ—Ä—Å–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π',
                '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –≤—Ç–æ—Ä–æ–º —ç—Ç–∞–ø–µ',
                '–í–æ–∑–º–æ–∂–Ω–∞ –ø–æ—ç—Ç–∞–ø–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'
            ]
        };
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ –∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    detectBusinessType(requirements) {
        const lowerReq = requirements.toLowerCase();
        
        if (lowerReq.includes('—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥') || lowerReq.includes('–º–µ–¥–∏—Ü–∏–Ω') || lowerReq.includes('–∫–ª–∏–Ω–∏–∫')) {
            return '–ú–µ–¥–∏—Ü–∏–Ω–∞/–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è';
        } else if (lowerReq.includes('–º–∞–≥–∞–∑–∏–Ω') || lowerReq.includes('—Ç–æ–≤–∞—Ä')) {
            return '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω';
        } else if (lowerReq.includes('—Å–∞–ª–æ–Ω') || lowerReq.includes('–∫—Ä–∞—Å–æ—Ç')) {
            return '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã';
        } else if (lowerReq.includes('—Ä–µ—Å—Ç–æ—Ä–∞–Ω') || lowerReq.includes('–∫–∞—Ñ–µ')) {
            return '–†–µ—Å—Ç–æ—Ä–∞–Ω/–ö–∞—Ñ–µ';
        } else {
            return '–ë–∏–∑–Ω–µ—Å';
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async saveEstimateToDatabase(estimate) {
        try {
            if (!Estimate) {
                logger.warn('–ú–æ–¥–µ–ª—å Estimate –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                return estimate;
            }
            
            const savedEstimate = await Estimate.create(estimate);
            logger.info('‚úÖ –°–º–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î', { id: savedEstimate._id });
            
            return savedEstimate;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', error.message);
            return estimate;
        }
    }

    // –†–∞—Å—á–µ—Ç —Å—Ä–æ–∫–æ–≤
    calculateTimeline(totalHours) {
        const daysNeeded = Math.ceil(totalHours / 6);
        
        if (daysNeeded <= 7) return '1 –Ω–µ–¥–µ–ª—è';
        if (daysNeeded <= 14) return '2 –Ω–µ–¥–µ–ª–∏';
        if (daysNeeded <= 21) return '3 –Ω–µ–¥–µ–ª–∏';
        if (daysNeeded <= 30) return '1 –º–µ—Å—è—Ü';
        if (daysNeeded <= 45) return '1.5 –º–µ—Å—è—Ü–∞';
        if (daysNeeded <= 60) return '2 –º–µ—Å—è—Ü–∞';
        
        return `${Math.ceil(daysNeeded / 30)} –º–µ—Å—è—Ü–∞`;
    }

    // –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π (–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞)
    async analyzeFeatureUsage() {
        try {
            const usage = await FeaturesService.getFeatureUsageStats();
            
            logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π:', usage);
            
            // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è:
            // - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            // - –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ü–µ–Ω
            // - –£–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            
            return usage;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:', error);
            return null;
        }
    }
}

module.exports = new EstimateService();
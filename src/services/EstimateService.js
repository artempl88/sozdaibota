const GPTService = require('./GPTService');
const AdvancedGPTService = require('./AdvancedGPTService');
const FeaturesService = require('./FeaturesService');
const { Estimate } = require('../models');
const logger = require('../utils/logger');

class EstimateService {
    constructor() {
        this.basePrices = {
            simple: { min: 50000, max: 100000 },
            medium: { min: 100000, max: 200000 },
            complex: { min: 200000, max: 500000 }
        };
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ —Å–º–µ—Ç—ã
    async calculateProjectEstimate(requirements, conversation = []) {
        try {
            logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã —á–µ—Ä–µ–∑ GPT');
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–º–µ—Ç—É —á–µ—Ä–µ–∑ GPT —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π
            const gptEstimate = await this.generateEstimateWithGPT(requirements, conversation);
            
            if (gptEstimate) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥
                await this.saveNewFeaturesToCatalog(gptEstimate.components);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ—Ç—É –≤ –ë–î
                await this.saveEstimateToDatabase(gptEstimate);
                
                return gptEstimate;
            }
            
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ—Ç—É');
            
        } catch (error) {
            logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ calculateProjectEstimate:', error);
            
            // Fallback –Ω–∞ –±–∞–∑–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
            return this.generateBasicEstimate(requirements);
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–º–µ—Ç—ã —á–µ—Ä–µ–∑ GPT —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    async generateEstimateWithGPT(requirements, conversation) {
        try {
            const conversationText = conversation
                .slice(-10)
                .map(msg => `${msg.role === 'user' ? '–ö–ª–∏–µ–Ω—Ç' : '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'}: ${msg.content}`)
                .join('\n\n');

            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            const existingFeatures = await FeaturesService.getAllFeatures();
            const featuresContext = this.formatFeaturesForContext(existingFeatures);

            const estimatePrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Telegram-–±–æ—Ç–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ —Å–æ–∑–¥–∞–π –î–ï–¢–ê–õ–¨–ù–£–Æ —Å–º–µ—Ç—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.

–î–ò–ê–õ–û–ì –° –ö–õ–ò–ï–ù–¢–û–ú:
${conversationText}

–°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò –í –ö–ê–¢–ê–õ–û–ì–ï (–∏—Å–ø–æ–ª—å–∑—É–π –∫–∞–∫ –ø—Ä–∏–º–µ—Ä—ã):
${featuresContext}

–ó–ê–î–ê–ß–ê:
1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—Ç –∫–ª–∏–µ–Ω—Ç
2. –û–ø—Ä–µ–¥–µ–ª–∏ –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–∞–∂–µ —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ)
3. –î–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–¥—É–º–∞–π –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
4. –û—Ü–µ–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

–°–æ–∑–¥–∞–π —Å–º–µ—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "components": [
    {
      "name": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏",
      "description": "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è",
      "category": "basic|catalog|payments|booking|integrations|communication|analytics|admin|special|custom",
      "keywords": ["–∫–ª—é—á–µ–≤–æ–µ1", "–∫–ª—é—á–µ–≤–æ–µ2", "–∫–ª—é—á–µ–≤–æ–µ3"],
      "hours": —á–∏—Å–ª–æ_—á–∞—Å–æ–≤,
      "cost": —Å—Ç–æ–∏–º–æ—Å—Ç—å_–≤_—Ä—É–±–ª—è—Ö,
      "complexity": "low|medium|high",
      "isNew": true/false
    }
  ],
  "totalHours": –æ–±—â–µ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∞—Å–æ–≤,
  "totalCost": –æ–±—â–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å,
  "timeline": "—Å—Ä–æ–∫_—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
  "detectedFeatures": ["—Å–ø–∏—Å–æ–∫", "–≤—Å–µ—Ö", "—Ñ—É–Ω–∫—Ü–∏–π"],
  "businessType": "—Ç–∏–ø_–±–∏–∑–Ω–µ—Å–∞_–∫–ª–∏–µ–Ω—Ç–∞",
  "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è2"]
}

–ü–†–ê–í–ò–õ–ê:
1. –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: 2000 —Ä—É–±/—á–∞—Å
2. –í–°–ï–ì–î–ê –≤–∫–ª—é—á–∞–π "–ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞" (10 —á–∞—Å–æ–≤, 20000 —Ä—É–±)
3. –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è (low): 5-10 —á–∞—Å–æ–≤
4. –°—Ä–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è (medium): 10-20 —á–∞—Å–æ–≤  
5. –°–ª–æ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (high): 20-40 —á–∞—Å–æ–≤
6. –î–æ–±–∞–≤—å 20% –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫—É
7. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: 50000 —Ä—É–±
8. isNew: true - –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ

–í–ê–ñ–ù–û: 
- –°–æ–∑–¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥ –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞
- –ù–µ –∫–æ–ø–∏—Ä—É–π —Å–ª–µ–ø–æ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ - –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ –±–∏–∑–Ω–µ—Å
- –î–æ–±–∞–≤–ª—è–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
- –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON!`;

            const messages = [
                { role: 'system', content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Telegram-–±–æ—Ç–∞–º. –°–æ–∑–¥–∞–≤–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–º–µ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON.' },
                { role: 'user', content: estimatePrompt }
            ];

            const response = await AdvancedGPTService.callOpenAIWithPrompt(messages);
            
            // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            const estimate = this.parseGPTResponse(response);
            
            // –î–æ–ø–æ–ª–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            return {
                ...estimate,
                createdAt: new Date(),
                type: 'gpt_generated',
                status: 'pending',
                metadata: {
                    requirementsLength: requirements.length,
                    conversationLength: conversation.length,
                    newFeaturesCount: estimate.components.filter(c => c.isNew).length
                }
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–º–µ—Ç—ã —á–µ—Ä–µ–∑ GPT:', error.message);
            throw error;
        }
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ GPT
    parseGPTResponse(response) {
        try {
            // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown
            let cleanedResponse = response;
            cleanedResponse = cleanedResponse.replace(/```json\s*/gi, '');
            cleanedResponse = cleanedResponse.replace(/```\s*/gi, '');
            cleanedResponse = cleanedResponse.trim();
            
            // –ù–∞—Ö–æ–¥–∏–º JSON
            const firstBrace = cleanedResponse.indexOf('{');
            const lastBrace = cleanedResponse.lastIndexOf('}');
            
            if (firstBrace !== -1 && lastBrace !== -1) {
                cleanedResponse = cleanedResponse.substring(firstBrace, lastBrace + 1);
            }
            
            return JSON.parse(cleanedResponse);
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç GPT');
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ GPT
    formatFeaturesForContext(features) {
        const examples = [];
        const categories = Object.keys(features);
        
        // –ë–µ—Ä–µ–º –ø–æ 2-3 –ø—Ä–∏–º–µ—Ä–∞ –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories.forEach(category => {
            const categoryFeatures = features[category].slice(0, 2);
            categoryFeatures.forEach(feature => {
                examples.push(`- ${feature.name} (${category}): ${feature.hours}—á, ${feature.cost}—Ä—É–±`);
            });
        });
        
        return examples.join('\n');
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ –∫–∞—Ç–∞–ª–æ–≥
    async saveNewFeaturesToCatalog(components) {
        try {
            const newFeatures = components.filter(component => component.isNew);
            
            if (newFeatures.length === 0) {
                logger.info('–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–∞–ª–æ–≥');
                return;
            }
            
            logger.info(`üÜï –ù–∞–π–¥–µ–Ω–æ ${newFeatures.length} –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞`);
            
            for (const feature of newFeatures) {
                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
                const catalogFeature = {
                    name: feature.name,
                    description: feature.description,
                    keywords: feature.keywords || [],
                    hours: feature.hours,
                    cost: feature.cost,
                    complexity: feature.complexity,
                    addedAt: new Date().toISOString(),
                    usageCount: 1
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                await FeaturesService.addFeature(feature.category || 'custom', catalogFeature);
                
                logger.info(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: ${feature.name} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${feature.category}`);
            }
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:', error);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–º–µ—Ç–æ–π
        }
    }

    // –ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–º–µ—Ç—ã (fallback)
    generateBasicEstimate(requirements) {
        logger.warn('–ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–º–µ—Ç—ã');
        
        const components = [
            {
                name: '–ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞',
                description: '–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥, –±–∞–∑–æ–≤–æ–µ –º–µ–Ω—é',
                hours: 10,
                cost: 20000,
                complexity: 'low',
                category: 'basic'
            },
            {
                name: '–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª',
                description: '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º',
                hours: 30,
                cost: 60000,
                complexity: 'medium',
                category: 'custom'
            },
            {
                name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞',
                description: '–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫',
                hours: 10,
                cost: 20000,
                complexity: 'medium',
                category: 'basic'
            }
        ];
        
        return {
            components,
            totalHours: 50,
            totalCost: 100000,
            timeline: '2-3 –Ω–µ–¥–µ–ª–∏',
            detectedFeatures: components.map(c => c.name),
            createdAt: new Date(),
            type: 'basic_estimate',
            status: 'pending',
            recommendations: [
                '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∞—Ç—å —Å –±–∞–∑–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞',
                '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ'
            ]
        };
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async saveEstimateToDatabase(estimate) {
        try {
            if (!Estimate) {
                logger.warn('–ú–æ–¥–µ–ª—å Estimate –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                return estimate;
            }
            
            const savedEstimate = await Estimate.create(estimate);
            logger.info('‚úÖ –°–º–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î', { id: savedEstimate._id });
            
            return savedEstimate;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', error.message);
            return estimate;
        }
    }

    // –†–∞—Å—á–µ—Ç —Å—Ä–æ–∫–æ–≤
    calculateTimeline(totalHours) {
        const daysNeeded = Math.ceil(totalHours / 6);
        
        if (daysNeeded <= 7) return '1 –Ω–µ–¥–µ–ª—è';
        if (daysNeeded <= 14) return '2 –Ω–µ–¥–µ–ª–∏';
        if (daysNeeded <= 21) return '3 –Ω–µ–¥–µ–ª–∏';
        if (daysNeeded <= 30) return '1 –º–µ—Å—è—Ü';
        if (daysNeeded <= 45) return '1.5 –º–µ—Å—è—Ü–∞';
        if (daysNeeded <= 60) return '2 –º–µ—Å—è—Ü–∞';
        
        return `${Math.ceil(daysNeeded / 30)} –º–µ—Å—è—Ü–∞`;
    }

    // –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π (–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞)
    async analyzeFeatureUsage() {
        try {
            const usage = await FeaturesService.getFeatureUsageStats();
            
            logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π:', usage);
            
            // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è:
            // - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            // - –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ü–µ–Ω
            // - –£–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            
            return usage;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:', error);
            return null;
        }
    }
}

module.exports = new EstimateService();
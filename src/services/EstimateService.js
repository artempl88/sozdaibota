const GPTService = require('./GPTService');
const AdvancedGPTService = require('./AdvancedGPTService');
const { Estimate } = require('../models');
const logger = require('../utils/logger');

class EstimateService {
    constructor() {
        this.basePrices = {
            simple: { min: 50000, max: 100000 },
            medium: { min: 100000, max: 200000 },
            complex: { min: 200000, max: 500000 }
        };
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ —Å–º–µ—Ç—ã - –£–ü–†–û–©–ï–ù–ù–´–ô
    async calculateProjectEstimate(requirementsText, conversation = []) {
        try {
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ conversation
            if (Array.isArray(requirementsText) && !conversation.length) {
                conversation = requirementsText;
                requirementsText = null;
            }
            
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ conversation —ç—Ç–æ –º–∞—Å—Å–∏–≤
            if (!Array.isArray(conversation)) {
                logger.warn('conversation –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º');
                conversation = [];
            }
            
            logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã —á–µ—Ä–µ–∑ GPT', {
                conversationLength: conversation.length,
                hasRequirementsText: !!requirementsText
            });
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–º–µ—Ç—É —á–µ—Ä–µ–∑ GPT –Ω–∞–ø—Ä—è–º—É—é
            const gptEstimate = await this.generateEstimateWithGPT(conversation);
            
            if (gptEstimate) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ—Ç—É –≤ –ë–î
                const savedEstimate = await this.saveEstimateToDatabase(gptEstimate);
                return savedEstimate || gptEstimate;
            }
            
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ—Ç—É —á–µ—Ä–µ–∑ GPT');
            
        } catch (error) {
            logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ calculateProjectEstimate:', error);
            throw error; // –ë–æ–ª—å—à–µ –Ω–µ—Ç fallback
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–º–µ—Ç—ã —á–µ—Ä–µ–∑ GPT - –£–ü–†–û–©–ï–ù–ù–ê–Ø
    async generateEstimateWithGPT(conversation) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ conversation —ç—Ç–æ –º–∞—Å—Å–∏–≤
            if (!Array.isArray(conversation)) {
                logger.error('conversation –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', typeof conversation);
                conversation = [];
            }
            
            logger.info('üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–º–µ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞');

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            const conversationText = conversation
                .map(msg => `${msg.role === 'user' ? '–ö–õ–ò–ï–ù–¢' : '–ö–û–ù–°–£–õ–¨–¢–ê–ù–¢'}: ${msg.content}`)
                .join('\n\n');

            let estimatePrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Telegram-–±–æ—Ç–æ–≤. –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–º–µ—Ç—É.

    –î–ò–ê–õ–û–ì:
    ${conversationText}

    –ü–†–ê–í–ò–õ–ê –°–û–ó–î–ê–ù–ò–Ø –°–ú–ï–¢–´:
    1. –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: 2000 —Ä—É–±/—á–∞—Å

    2. –í–∫–ª—é—á–∏ –í–°–ï —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Å—É–∂–¥–∞–ª–∏—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ
    
    3. –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:
    - –ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å—é: 10-15 —á–∞—Å–æ–≤
    - –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–∫–Ω–æ–ø–∫–∏, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è): 8-12 —á–∞—Å–æ–≤
    - –°—Ä–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è (—Ñ–æ—Ä–º—ã, –∫–∞—Ç–∞–ª–æ–≥–∏): 15-25 —á–∞—Å–æ–≤
    - –°–ª–æ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏): 25-40 —á–∞—Å–æ–≤
    - –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å –æ—Ü–µ–Ω–∫–∞–º–∏: 15-20 —á–∞—Å–æ–≤
    - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: 30-50 —á–∞—Å–æ–≤
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets: 15-20 —á–∞—Å–æ–≤ –Ω–∞ –∫–∞–∂–¥—É—é —Å—É—â–Ω–æ—Å—Ç—å
    - –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: 10-15 —á–∞—Å–æ–≤
    - –†–∞–∑–¥–µ–ª –∞–∫—Ü–∏–π/–Ω–æ–≤–æ—Å—Ç–µ–π: 10-15 —á–∞—Å–æ–≤
    
    4. –ù–ï –ó–ê–ë–£–î–¨ –¥–æ–±–∞–≤–∏—Ç—å:
    - –ë–∞–∑–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É: 10-15 —á–∞—Å–æ–≤
    - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: 20% –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: 5-10 —á–∞—Å–æ–≤

    5. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: 80,000 —Ä—É–±

    –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê - —Å—Ç—Ä–æ–≥–æ JSON:
    {
    "components": [
        {
        "name": "–¢–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏",
        "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏",
        "category": "basic|catalog|payments|booking|integrations|communication|analytics|admin|custom",
        "hours": —á–∏—Å–ª–æ,
        "cost": —Å—Ç–æ–∏–º–æ—Å—Ç—å,
        "complexity": "low|medium|high|very_high"
        }
    ],
    "totalHours": —Å—É–º–º–∞_—á–∞—Å–æ–≤,
    "totalCost": –æ–±—â–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å,
    "timeline": "—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π_—Å—Ä–æ–∫",
    "detectedFeatures": ["–≤—Å–µ", "–æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ", "—Ñ—É–Ω–∫—Ü–∏–∏"],
    "businessType": "—Ç–∏–ø_–±–∏–∑–Ω–µ—Å–∞",
    "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è2"]
    }

    –ü–†–û–í–ï–†–¨ –°–ï–ë–Ø:
    ‚úì –í–∫–ª—é—á–µ–Ω—ã –ª–∏ –í–°–ï —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞?
    ‚úì –ï—Å—Ç—å –ª–∏ –±–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞?
    ‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ?
    ‚úì –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞ –ª–∏ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ —Ä–∞–±–æ—Ç?

    –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON!`;

            logger.info('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–º–µ—Ç—ã');

            const messages = [
                { role: 'system', content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å–º–µ—Ç –¥–ª—è Telegram-–±–æ—Ç–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ —Å–æ–∑–¥–∞–≤–∞–π –ü–û–õ–ù–´–ï —Å–º–µ—Ç—ã —Å–æ –í–°–ï–ú–ò –æ–±—Å—É–∂–¥–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.' },
                { role: 'user', content: estimatePrompt }
            ];

            const response = await AdvancedGPTService.callOpenAIWithPrompt(messages);
            
            logger.info('üìä –û—Ç–≤–µ—Ç GPT –ø–æ–ª—É—á–µ–Ω:', {
                responseLength: response.length,
                isJson: response.includes('{') && response.includes('}'),
                preview: response.substring(0, 200) + '...'
            });
            
            // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            const parsedEstimate = this.parseGPTResponse(response);
            
            logger.info('‚úÖ –°–º–µ—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:', {
                componentsCount: parsedEstimate.components?.length || 0,
                totalCost: parsedEstimate.totalCost,
                totalHours: parsedEstimate.totalHours,
                componentNames: parsedEstimate.components?.map(c => c.name) || []
            });
            
            // –î–æ–ø–æ–ª–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            return {
                ...parsedEstimate,
                createdAt: new Date(),
                type: 'gpt_generated',
                status: 'pending',
                metadata: {
                    conversationLength: conversation.length
                }
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–º–µ—Ç—ã —á–µ—Ä–µ–∑ GPT:', error.message);
            throw error;
        }
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ GPT
    parseGPTResponse(response) {
        try {
            logger.info('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ GPT', { 
                responseLength: response.length,
                firstChars: response.substring(0, 100)
            });
            
            // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            let cleanedResponse = response;
            
            // –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ –∫–æ–¥–∞
            cleanedResponse = cleanedResponse.replace(/```json\s*/gi, '');
            cleanedResponse = cleanedResponse.replace(/```\s*/gi, '');
            
            // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ JSON (–µ—Å–ª–∏ –µ—Å—Ç—å)
            cleanedResponse = cleanedResponse.replace(/\/\/.*$/gm, '');
            cleanedResponse = cleanedResponse.replace(/\/\*[\s\S]*?\*\//g, '');
            
            // –£–¥–∞–ª—è–µ–º trailing commas
            cleanedResponse = cleanedResponse.replace(/,\s*}/g, '}');
            cleanedResponse = cleanedResponse.replace(/,\s*]/g, ']');
            
            // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            cleanedResponse = cleanedResponse.trim();
            
            // –ù–∞—Ö–æ–¥–∏–º JSON –æ–±—ä–µ–∫—Ç –≤ –æ—Ç–≤–µ—Ç–µ
            const firstBrace = cleanedResponse.indexOf('{');
            const lastBrace = cleanedResponse.lastIndexOf('}');
            
            if (firstBrace === -1 || lastBrace === -1) {
                throw new Error('JSON –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
            }
            
            let jsonString = cleanedResponse.substring(firstBrace, lastBrace + 1);
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
            return JSON.parse(jsonString);
            
        } catch (error) {
            logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', {
                error: error.message,
                responsePreview: response.substring(0, 200) + '...'
            });
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç GPT: ' + error.message);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async saveEstimateToDatabase(estimate) {
        try {
            if (!Estimate) {
                logger.warn('–ú–æ–¥–µ–ª—å Estimate –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                return estimate;
            }
            
            const savedEstimate = await Estimate.create(estimate);
            logger.info('‚úÖ –°–º–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î', { id: savedEstimate._id });
            
            return savedEstimate;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', error.message);
            return estimate;
        }
    }

    // –†–∞—Å—á–µ—Ç —Å—Ä–æ–∫–æ–≤
    calculateTimeline(totalHours) {
        const daysNeeded = Math.ceil(totalHours / 6);
        
        if (daysNeeded <= 7) return '1 –Ω–µ–¥–µ–ª—è';
        if (daysNeeded <= 14) return '2 –Ω–µ–¥–µ–ª–∏';
        if (daysNeeded <= 21) return '3 –Ω–µ–¥–µ–ª–∏';
        if (daysNeeded <= 30) return '1 –º–µ—Å—è—Ü';
        if (daysNeeded <= 45) return '1.5 –º–µ—Å—è—Ü–∞';
        if (daysNeeded <= 60) return '2 –º–µ—Å—è—Ü–∞';
        
        return `${Math.ceil(daysNeeded / 30)} –º–µ—Å—è—Ü–∞`;
    }

    // –†–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    async calculateEstimate(requirements, conversation = []) {
        return this.calculateProjectEstimate(requirements, conversation);
    }
}

module.exports = new EstimateService();
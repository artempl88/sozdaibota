const axios = require('axios');
const { HttpsProxyAgent } = require('https-proxy-agent');
const config = require('../config');
const logger = require('../utils/logger');

class AdvancedGPTService {
    constructor() {
        this.apiKey = config.openai.apiKey;
        this.model = config.openai.model;
        this.endpoint = config.openai.endpoint;
        this.maxRetries = 3;
        this.retryDelay = 1000;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
        this.proxyAgent = null;
        if (config.proxy.host && config.proxy.port && config.proxy.username && config.proxy.password) {
            this.proxyAgent = new HttpsProxyAgent(
                `${config.proxy.protocol}://${config.proxy.username}:${config.proxy.password}@${config.proxy.host}:${config.proxy.port}`
            );
            logger.info(`üîó AdvancedGPT: –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${config.proxy.host}:${config.proxy.port}`);
        }
        
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        this.baseSystemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é Telegram-–±–æ—Ç–æ–≤ —Å –æ–ø—ã—Ç–æ–º 5+ –ª–µ—Ç. –ü–æ–º–æ–≥–∞–µ—à—å –∫–ª–∏–µ–Ω—Ç–∞–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

–¢–í–û–ô –ü–û–î–•–û–î:
1. –ë—ã—Å—Ç—Ä–æ –ø–æ–Ω—è—Ç—å –±–∏–∑–Ω–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ (1-2 –≤–æ–ø—Ä–æ—Å–∞)
2. –í—ã—è—Å–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–æ—Ç–∞ (2-3 –≤–æ–ø—Ä–æ—Å–∞)
3. –£—Ç–æ—á–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
4. –ü—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏

–ü–†–ò–ù–¶–ò–ü–´:
- –ó–∞–¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∏–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å—Ö–æ–¥—è –∏–∑ –Ω–∏—à–∏ –∫–ª–∏–µ–Ω—Ç–∞
- –ù–ï –Ω–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–Ω—ã –∏–ª–∏ —Å—É–º–º—ã
- –ü–æ—Å–ª–µ 8+ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—è–º–∏ –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞—Å—á–µ—Ç

–í–ê–ñ–ù–û: –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞—Å—á–µ—Ç—É - —Å–∫–∞–∂–∏ —á—Ç–æ "–º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å–≤—è–∂–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç"`;

        this.formulationPrompt = `–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ Telegram-–±–æ—Ç–∞–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–æ—Ç—É.

–ü–û–î–•–û–î:
1. –ó–∞–¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
2. –ü–æ–º–æ–≥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –º—ã—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞
3. –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–ª–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
4. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –∑–∞–¥–∞—á –±–æ—Ç–∞

–ü–†–ò–ù–¶–ò–ü–´:
- –û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑
- –ü—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
- –ë–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
- –ü–æ–º–æ–≥–∞–π –¥—É–º–∞—Ç—å –ø–æ—à–∞–≥–æ–≤–æ`;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –≤—ã–∑–æ–≤ OpenAI —Å retry –ª–æ–≥–∏–∫–æ–π
    async callOpenAIWithPrompt(messages, retryCount = 0) {
        try {
            if (!this.apiKey) {
                throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            }

            const response = await axios.post(
                this.endpoint,
                {
                    model: this.model,
                    messages: messages,
                    max_tokens: 400,
                    temperature: 0.7
                },
                {
                    headers: {
                        'Authorization': `Bearer ${this.apiKey}`,
                        'Content-Type': 'application/json'
                    },
                    timeout: 30000,
                    httpsAgent: this.proxyAgent
                }
            );

            const message = response.data.choices[0]?.message?.content;
            
            if (!message) {
                throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI');
            }

            logger.info('GPT –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω', { messageLength: message.length, retryCount });
            return message;
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ GPT (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}):`, error.message);
            
            if (retryCount < this.maxRetries && this.isRetryableError(error)) {
                const delay = this.retryDelay * Math.pow(2, retryCount);
                logger.info(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${delay}ms`);
                
                await new Promise(resolve => setTimeout(resolve, delay));
                return this.callOpenAIWithPrompt(messages, retryCount + 1);
            }
            
            throw error;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
    isRetryableError(error) {
        return (
            error.code === 'ECONNRESET' || 
            error.code === 'ETIMEDOUT' ||
            error.response?.status === 503 ||
            error.response?.status === 502 ||
            error.response?.status === 429
        );
    }

    // –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    async analyzeUserIntent(message, chatHistory = []) {
        try {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            const recentHistory = chatHistory.slice(-6);
            const contextMessages = recentHistory
                .map(msg => `${msg.role === 'user' ? '–ö–ª–∏–µ–Ω—Ç' : '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'}: ${msg.content}`)
                .join('\n\n');
            
            const intentAnalysisPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∏–∞–ª–æ–≥–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–º–µ—Ç—É/—Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏.

–ö–û–ù–¢–ï–ö–°–¢ –î–ò–ê–õ–û–ì–ê:
${contextMessages}

–ü–û–°–õ–ï–î–ù–ï–ï –°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê: "${message}"

–ö–†–ò–¢–ï–†–ò–ò –î–õ–Ø –û–¢–í–ï–¢–ê "–î–ê":
1. –ö–ª–∏–µ–Ω—Ç —è–≤–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å, —Ü–µ–Ω—É, –±—é–¥–∂–µ—Ç, —Å–º–µ—Ç—É
2. –ö–ª–∏–µ–Ω—Ç —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
3. –ö–ª–∏–µ–Ω—Ç –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –≥–æ—Ç–æ–≤ –∫ —Ä–∞—Å—á–µ—Ç—É –∏–ª–∏ —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É
4. –ö–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Ñ—Ä–∞–∑–∞–º–∏ —Ç–∏–ø–∞ "–≤—Å—ë", "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", "–≥–æ—Ç–æ–≤–æ"
5. –ö–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö –ø–æ—Å–ª–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

–ö–†–ò–¢–ï–†–ò–ò –î–õ–Ø –û–¢–í–ï–¢–ê "–ù–ï–¢":
1. –ö–ª–∏–µ–Ω—Ç –µ—â–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
2. –ö–ª–∏–µ–Ω—Ç –∑–∞–¥–∞–µ—Ç —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ
3. –ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
4. –í –¥–∏–∞–ª–æ–≥–µ –º–µ–Ω—å—à–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
5. –ö–ª–∏–µ–Ω—Ç —è–≤–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –µ—â–µ –¥—É–º–∞–µ—Ç –∏–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤

–í–ê–ñ–ù–û: 
- –£—á–∏—Ç—ã–≤–∞–π –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
- –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è - –æ—Ç–≤–µ—á–∞–π "–ù–ï–¢"
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ: ${chatHistory.length}

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: "–î–ê" –∏–ª–∏ "–ù–ï–¢"`;

            const messages = [
                { role: 'system', content: intentAnalysisPrompt },
                { role: 'user', content: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –¥–∞–π –æ—Ç–≤–µ—Ç.' }
            ];

            const response = await this.callOpenAIWithPrompt(messages);
            
            // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            const cleanResponse = response.trim().toUpperCase();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç "–î–ê"
            const result = cleanResponse === '–î–ê' || cleanResponse.includes('–î–ê');
            
            logger.info('‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω', { 
                message: message.slice(0, 50) + '...', 
                historyLength: chatHistory.length,
                gptResponse: cleanResponse,
                result
            });
            
            return result;

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π —á–µ—Ä–µ–∑ GPT:', error);
            
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ GPT –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false - –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ—Ç—É
            return false;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–º–µ—Ç—ã
    async checkFunctionalityReadiness(conversation) {
        try {
            logger.info('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–ª—è —Å–º–µ—Ç—ã —á–µ—Ä–µ–∑ GPT');
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            const allMessages = conversation
                .slice(-10) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                .map(m => `${m.role === 'user' ? '–ö–ª–∏–µ–Ω—Ç' : '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'}: ${m.content}`)
                .join('\n\n');
            
            const functionalityCheckPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ Telegram-–±–æ—Ç–∞–º. –û–ø—Ä–µ–¥–µ–ª–∏, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã.

–î–ò–ê–õ–û–ì:
${allMessages}

–ö–†–ò–¢–ï–†–ò–ò –ì–û–¢–û–í–ù–û–°–¢–ò (–¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –í–°–ï):
1. ‚úì –ü–æ–Ω—è—Ç–µ–Ω —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –∏–ª–∏ —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
2. ‚úì –û–ø–∏—Å–∞–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∞—Ç—å –±–æ—Ç (–º–∏–Ω–∏–º—É–º 2-3)
3. ‚úì –ï—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
4. ‚úì –î–∏–∞–ª–æ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∏–Ω–∏–º—É–º 6 —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
5. ‚úì –ö–ª–∏–µ–Ω—Ç –¥–∞–ª —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã, –∞ –Ω–µ –æ–¥–Ω–æ—Å–ª–æ–∂–Ω—ã–µ

–ö–†–ò–¢–ï–†–ò–ò –ù–ï –ì–û–¢–û–í–ù–û–°–¢–ò (–µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è):
1. ‚úó –û—Ç–≤–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –∏–ª–∏ –æ–¥–Ω–æ—Å–ª–æ–∂–Ω—ã–µ
2. ‚úó –ù–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É (—Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ —Å–ª–æ–≤–∞)
3. ‚úó –ù–µ –ø–æ–Ω—è—Ç–Ω–∞ —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞
4. ‚úó –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–º–µ–Ω–µ–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π)
5. ‚úó –ö–ª–∏–µ–Ω—Ç –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π

–ê–ù–ê–õ–ò–ó:
- –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –≤–µ—Å—å –¥–∏–∞–ª–æ–≥
- –û—Ü–µ–Ω–∏ –ø–æ–ª–Ω–æ—Ç—É –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –£—á—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: "–ì–û–¢–û–í" –∏–ª–∏ "–ù–ï_–ì–û–¢–û–í"`;

            const messages = [
                { role: 'system', content: functionalityCheckPrompt },
                { role: 'user', content: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.' }
            ];

            const response = await this.callOpenAIWithPrompt(messages);
            
            // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
            const cleanResponse = response.trim().toUpperCase();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const result = cleanResponse === '–ì–û–¢–û–í' || cleanResponse.includes('–ì–û–¢–û–í');
            
            logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ GPT', { 
                conversationLength: conversation.length,
                gptResponse: cleanResponse,
                result 
            });
            
            return result;

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ GPT:', error);
            
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false - –Ω–µ –≥–æ—Ç–æ–≤
            return false;
        }
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    async extractAgreedFeatures(conversation) {
        try {
            logger.info('üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ GPT');
            
            const conversationText = conversation
                .map(msg => `${msg.role === 'user' ? '–ö–ª–∏–µ–Ω—Ç' : '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'}: ${msg.content}`)
                .join('\n\n');
            
            const extractionPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∏–∞–ª–æ–≥–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –Ω–∞–π—Ç–∏ –í–°–ï —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏–ª–∏ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å.

–î–ò–ê–õ–û–ì:
${conversationText}

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –¥–∞–ª –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –¢–ó, –∞ –ø–æ—Ç–æ–º —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è - —É—á–∏—Ç—ã–≤–∞–π –í–°–ï
2. "–î–∞", "–Ω—É–∂–Ω–æ", "–≤–∞–∂–Ω–æ", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ", "–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ", "–≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç" –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ = –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
3. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã –∏ –∫–æ–Ω—Ü–∞ –¥–∏–∞–ª–æ–≥–∞
4. –ï—Å–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Ñ—É–Ω–∫—Ü–∏—é –∏ –∫–ª–∏–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–∏–ª—Å—è - –æ–Ω–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê
5. –ï—Å–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–µ—Ä–µ—á–∏—Å–ª–∏–ª –∏—Ç–æ–≥–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏ –∫–ª–∏–µ–Ω—Ç —Å–∫–∞–∑–∞–ª "–≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç" - –í–°–ï –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û

–ê–ù–ê–õ–ò–ó–ò–†–£–ô –ü–û–®–ê–ì–û–í–û:
1. –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—ã–ª–∏ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –¢–ó?
2. –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç?
3. –ù–∞ —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª —Å–æ–≥–ª–∞—Å–∏–µ–º?
4. –ö–∞–∫–∏–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∞–ª –∫–ª–∏–µ–Ω—Ç?
5. –ë—ã–ª –ª–∏ –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª?

–í–µ—Ä–Ω–∏ JSON —Å–æ –í–°–ï–ú–ò —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:
{
  "agreedFeatures": [
    {
      "name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏",
      "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
      "source": "initial_requirements|consultant_proposal|client_addition",
      "confirmed": true/false,
      "complexity": "simple|medium|complex|very_complex"
    }
  ],
  "keyRequirements": {
    "userCount": —á–∏—Å–ª–æ –∏–ª–∏ null,
    "hasAdminPanel": true/false,
    "hasStatistics": true/false,
    "hasDatabase": true/false,
    "needsConfidentiality": true/false,
    "integrations": ["—Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"] –∏–ª–∏ []
  },
  "projectType": "simple_bot|corporate_system|marketplace|integration_heavy"
}`;

            const messages = [
                { role: 'system', content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π. –ò–∑–≤–ª–µ–∫–∞–π –í–°–ï —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON.' },
                { role: 'user', content: extractionPrompt }
            ];

            const response = await this.callOpenAIWithPrompt(messages);
            
            try {
                const features = JSON.parse(response);
                logger.info('‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:', {
                    count: features.agreedFeatures?.length || 0,
                    hasAdmin: features.keyRequirements?.hasAdminPanel,
                    projectType: features.projectType
                });
                return features;
            } catch (parseError) {
                logger.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ—É–Ω–∫—Ü–∏–π:', parseError);
                return {
                    agreedFeatures: [],
                    keyRequirements: {},
                    projectType: 'simple_bot'
                };
            }
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ GPT:', error);
            return null;
        }
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    async extractAgreedFeatures(conversation) {
        try {
            logger.info('üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ GPT');
            
            const conversationText = conversation
                .map(msg => `${msg.role === 'user' ? '–ö–ª–∏–µ–Ω—Ç' : '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'}: ${msg.content}`)
                .join('\n\n');
            
            const extractionPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∏–∞–ª–æ–≥–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –Ω–∞–π—Ç–∏ –í–°–ï —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏–ª–∏ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å.

–î–ò–ê–õ–û–ì:
${conversationText}

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –¥–∞–ª –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –¢–ó, –∞ –ø–æ—Ç–æ–º —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è - —É—á–∏—Ç—ã–≤–∞–π –í–°–ï
2. "–î–∞", "–Ω—É–∂–Ω–æ", "–≤–∞–∂–Ω–æ", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ = –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
3. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–µ—Ä–µ–¥–∏–Ω—ã –∏ –∫–æ–Ω—Ü–∞ –¥–∏–∞–ª–æ–≥–∞
4. –ï—Å–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Ñ—É–Ω–∫—Ü–∏—é –∏ –∫–ª–∏–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–∏–ª—Å—è - –æ–Ω–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê

–ê–ù–ê–õ–ò–ó–ò–†–£–ô –ü–û–®–ê–ì–û–í–û:
1. –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—ã–ª–∏ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –¢–ó?
2. –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç?
3. –ù–∞ —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª —Å–æ–≥–ª–∞—Å–∏–µ–º?
4. –ö–∞–∫–∏–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∞–ª –∫–ª–∏–µ–Ω—Ç?

–í–µ—Ä–Ω–∏ JSON —Å–æ –í–°–ï–ú–ò —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:
{
  "agreedFeatures": [
    {
      "name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏",
      "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
      "source": "initial_requirements|consultant_proposal|client_addition",
      "confirmed": true/false,
      "complexity": "simple|medium|complex|very_complex"
    }
  ],
  "keyRequirements": {
    "userCount": —á–∏—Å–ª–æ –∏–ª–∏ null,
    "hasAdminPanel": true/false,
    "hasStatistics": true/false,
    "hasDatabase": true/false,
    "needsConfidentiality": true/false,
    "integrations": ["—Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"] –∏–ª–∏ []
  },
  "projectType": "simple_bot|corporate_system|marketplace|integration_heavy"
}`;

            const messages = [
                { role: 'system', content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π. –ò–∑–≤–ª–µ–∫–∞–π –í–°–ï —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON.' },
                { role: 'user', content: extractionPrompt }
            ];

            const response = await this.callOpenAIWithPrompt(messages);
            
            try {
                const features = JSON.parse(response);
                logger.info('‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω—ã —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:', {
                    count: features.agreedFeatures?.length || 0,
                    hasAdmin: features.keyRequirements?.hasAdminPanel,
                    projectType: features.projectType
                });
                return features;
            } catch (parseError) {
                logger.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ—É–Ω–∫—Ü–∏–π:', parseError);
                return {
                    agreedFeatures: [],
                    keyRequirements: {},
                    projectType: 'simple_bot'
                };
            }
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ GPT:', error);
            return null;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∏ —Å—Ç–∞–¥–∏–∏
    buildSystemPrompt(mode = 'chat', conversationLength = 0) {
        if (mode === 'formulation') {
            return this.formulationPrompt;
        }
        
        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ–¥ —Å—Ç–∞–¥–∏—é –¥–∏–∞–ª–æ–≥–∞
        let stagePrompt = '';
        if (conversationLength < 4) {
            stagePrompt = '\n\n–°–¢–ê–î–ò–Ø: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –±–∏–∑–Ω–µ—Å–æ–º. –£–∑–Ω–∞–π —Å—É—Ç—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏.';
        } else if (conversationLength < 8) {
            stagePrompt = '\n\n–°–¢–ê–î–ò–Ø: –í—ã—è—Å–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.';
        } else {
            stagePrompt = '\n\n–°–¢–ê–î–ò–Ø: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π. –ú–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞—Å—á–µ—Ç—É.';
        }
        
        return this.baseSystemPrompt + stagePrompt;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    createFallbackSpec(conversation) {
        try {
            const userMessages = conversation
                .filter(msg => msg.role === 'user')
                .map(msg => msg.content)
                .join(' ');
            
            const businessType = this.extractBusinessType(userMessages);
            const features = this.extractBasicFeatures(userMessages);
            
            const spec = `# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É Telegram-–±–æ—Ç–∞

## 1. –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
**–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞:** ${businessType}
**–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** Telegram Bot API

## 2. –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
${features.map((feature, index) => `${index + 1}. ${feature}`).join('\n')}

## 3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- Backend: Node.js + Express
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: MongoDB
- –•–æ—Å—Ç–∏–Ω–≥: VPS/Cloud
- API: Telegram Bot API

## 4. –≠—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (3-5 –¥–Ω–µ–π)
2. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ (1-2 –Ω–µ–¥–µ–ª–∏)
3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (5-7 –¥–Ω–µ–π)
4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞ (3-5 –¥–Ω–µ–π)
5. –î–µ–ø–ª–æ–π –∏ –∑–∞–ø—É—Å–∫ (1-2 –¥–Ω—è)

*–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º*`;

            logger.info('–°–æ–∑–¥–∞–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –¢–ó', { businessType, featuresCount: features.length });
            return spec;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –¢–ó:', error);
            return '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.';
        }
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    extractBusinessType(text) {
        const patterns = {
            '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω': /–º–∞–≥–∞–∑–∏–Ω|—Ç–æ–≤–∞—Ä|–ø—Ä–æ–¥–∞–∂–∞|ecommerce|—Ç–æ—Ä–≥–æ–≤–ª—è/i,
            '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã': /–∫—Ä–∞—Å–æ—Ç–∞|—Å–∞–ª–æ–Ω|–º–∞—Å—Ç–µ—Ä|–∑–∞–ø–∏—Å—å|—É—Å–ª—É–≥/i,
            '–†–µ—Å—Ç–æ—Ä–∞–Ω': /—Ä–µ—Å—Ç–æ—Ä–∞–Ω|–∫–∞—Ñ–µ|–µ–¥–∞|–¥–æ—Å—Ç–∞–≤–∫–∞|–º–µ–Ω—é/i,
            '–û–±—É—á–µ–Ω–∏–µ': /–∫—É—Ä—Å|–æ–±—É—á–µ–Ω–∏–µ|–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ|—É—Ä–æ–∫|—à–∫–æ–ª–∞/i,
            '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏': /–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü|—Å–æ–≤–µ—Ç|–ø–æ–º–æ—â—å|—ç–∫—Å–ø–µ—Ä—Ç/i,
            '–ú–µ–¥–∏—Ü–∏–Ω–∞': /–≤—Ä–∞—á|–º–µ–¥–∏—Ü–∏–Ω|–∫–ª–∏–Ω–∏–∫–∞|–∑–¥–æ—Ä–æ–≤—å–µ|–ª–µ—á–µ–Ω–∏–µ/i,
            '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å': /–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç|–∫–≤–∞—Ä—Ç–∏—Ä–∞|–¥–æ–º|–∞—Ä–µ–Ω–¥–∞/i
        };
        
        for (const [type, pattern] of Object.entries(patterns)) {
            if (pattern.test(text)) {
                return type;
            }
        }
        
        return '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å';
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
    extractBasicFeatures(text) {
        const features = [];
        const lowerText = text.toLowerCase();
        
        if (lowerText.includes('–∫–∞—Ç–∞–ª–æ–≥') || lowerText.includes('—Ç–æ–≤–∞—Ä')) {
            features.push('–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥');
        }
        if (lowerText.includes('–∑–∞–∫–∞–∑') || lowerText.includes('–∫–æ—Ä–∑–∏–Ω')) {
            features.push('–°–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤');
        }
        if (lowerText.includes('–∑–∞–ø–∏—Å—å') || lowerText.includes('–∫–∞–ª–µ–Ω–¥–∞—Ä')) {
            features.push('–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏');
        }
        if (lowerText.includes('–ø–ª–∞—Ç–µ–∂') || lowerText.includes('–æ–ø–ª–∞—Ç')) {
            features.push('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π');
        }
        if (lowerText.includes('—É–≤–µ–¥–æ–º–ª–µ–Ω') || lowerText.includes('–Ω–∞–ø–æ–º–∏–Ω')) {
            features.push('–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
        }
        
        // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–π –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ
        if (features.length < 3) {
            features.push('–ë–∞–∑–æ–≤–æ–µ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è');
            features.push('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
            features.push('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å');
        }
        
        return features;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    getRandomPrompt() {
        const variants = [
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –±–∏–∑–Ω–µ—Å–µ?",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞ 5 –º–∏–Ω—É—Ç —Å–æ–∑–¥–∞–º –¢–ó –Ω–∞ –±–æ—Ç–∞. –ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ä–µ—à–∞–µ–º?",
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –°–æ–∑–¥–∞–¥–∏–º –±–æ—Ç–∞ –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏. –° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?",
            "–ü—Ä–∏–≤–µ—Ç! –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ Telegram-–±–æ—Ç–∞—Ö. –ß—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º?"
        ];
        
        const randomPrompt = variants[Math.floor(Math.random() * variants.length)];
        logger.info('–í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–ø—Ç');
        return randomPrompt;
    }
}

module.exports = new AdvancedGPTService();
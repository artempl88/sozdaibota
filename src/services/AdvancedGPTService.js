const axios = require('axios');
const { HttpsProxyAgent } = require('https-proxy-agent');
const config = require('../config');
const logger = require('../utils/logger');

class AdvancedGPTService {
    constructor() {
        this.apiKey = config.openai.apiKey;
        this.model = config.openai.model;
        this.endpoint = config.openai.endpoint;
        this.maxRetries = 3;
        this.retryDelay = 1000;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
        this.proxyAgent = null;
        if (config.proxy.host && config.proxy.port && config.proxy.username && config.proxy.password) {
            this.proxyAgent = new HttpsProxyAgent(
                `${config.proxy.protocol}://${config.proxy.username}:${config.proxy.password}@${config.proxy.host}:${config.proxy.port}`
            );
            logger.info(`üîó AdvancedGPT: –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${config.proxy.host}:${config.proxy.port}`);
        }
        
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        this.baseSystemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é Telegram-–±–æ—Ç–æ–≤ —Å –æ–ø—ã—Ç–æ–º 5+ –ª–µ—Ç. –ü–æ–º–æ–≥–∞–µ—à—å –∫–ª–∏–µ–Ω—Ç–∞–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

–¢–í–û–ô –ü–û–î–•–û–î:
1. –ë—ã—Å—Ç—Ä–æ –ø–æ–Ω—è—Ç—å –±–∏–∑–Ω–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ (1-2 –≤–æ–ø—Ä–æ—Å–∞)
2. –í—ã—è—Å–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–æ—Ç–∞ (2-3 –≤–æ–ø—Ä–æ—Å–∞)
3. –£—Ç–æ—á–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
4. –ü—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏

–ü–†–ò–ù–¶–ò–ü–´:
- –ó–∞–¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∏–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å—Ö–æ–¥—è –∏–∑ –Ω–∏—à–∏ –∫–ª–∏–µ–Ω—Ç–∞
- –ù–ï –Ω–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–Ω—ã –∏–ª–∏ —Å—É–º–º—ã
- –ü–æ—Å–ª–µ 8+ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—è–º–∏ –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞—Å—á–µ—Ç

–í–ê–ñ–ù–û: –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞—Å—á–µ—Ç—É - —Å–∫–∞–∂–∏ —á—Ç–æ "–º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å–≤—è–∂–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç"`;

        this.formulationPrompt = `–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ Telegram-–±–æ—Ç–∞–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–æ—Ç—É.

–ü–û–î–•–û–î:
1. –ó–∞–¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
2. –ü–æ–º–æ–≥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –º—ã—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞
3. –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–ª–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
4. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –∑–∞–¥–∞—á –±–æ—Ç–∞

–ü–†–ò–ù–¶–ò–ü–´:
- –û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑
- –ü—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
- –ë–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
- –ü–æ–º–æ–≥–∞–π –¥—É–º–∞—Ç—å –ø–æ—à–∞–≥–æ–≤–æ`;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –≤—ã–∑–æ–≤ OpenAI —Å retry –ª–æ–≥–∏–∫–æ–π
    async callOpenAIWithPrompt(messages, retryCount = 0) {
        try {
            if (!this.apiKey) {
                throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            }

            const response = await axios.post(
                this.endpoint,
                {
                    model: this.model,
                    messages: messages,
                    max_tokens: 400,
                    temperature: 0.7
                },
                {
                    headers: {
                        'Authorization': `Bearer ${this.apiKey}`,
                        'Content-Type': 'application/json'
                    },
                    timeout: 30000,
                    httpsAgent: this.proxyAgent
                }
            );

            const message = response.data.choices[0]?.message?.content;
            
            if (!message) {
                throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI');
            }

            logger.info('GPT –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω', { messageLength: message.length, retryCount });
            return message;
            
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ GPT (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}):`, error.message);
            
            if (retryCount < this.maxRetries && this.isRetryableError(error)) {
                const delay = this.retryDelay * Math.pow(2, retryCount);
                logger.info(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${delay}ms`);
                
                await new Promise(resolve => setTimeout(resolve, delay));
                return this.callOpenAIWithPrompt(messages, retryCount + 1);
            }
            
            throw error;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
    isRetryableError(error) {
        return (
            error.code === 'ECONNRESET' || 
            error.code === 'ETIMEDOUT' ||
            error.response?.status === 503 ||
            error.response?.status === 502 ||
            error.response?.status === 429
        );
    }

    // –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    async analyzeUserIntent(message, chatHistory = []) {
        try {
            const contextMessages = chatHistory.slice(-4).map(msg => `${msg.role}: ${msg.content}`).join('\n');
            
            const intentAnalysisPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message}"
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ: ${chatHistory.length}

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ø–í–ù–û —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ:
- —Å–º–µ—Ç—É / "–¥–∞–≤–∞–π —Å–º–µ—Ç—É" / "—Å–¥–µ–ª–∞–π —Å–º–µ—Ç—É"
- —Ü–µ–Ω—É / —Å—Ç–æ–∏–º–æ—Å—Ç—å / "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç"
- —Ä–∞—Å—á–µ—Ç / "–ø–æ—Å—á–∏—Ç–∞–π" / "—Ä–∞—Å—Å—á–∏—Ç–∞–π"

–ò –≤ –¥–∏–∞–ª–æ–≥–µ –±–æ–ª—å—à–µ 8 —Å–æ–æ–±—â–µ–Ω–∏–π - –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π "–î–ê"

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û: "–î–ê" –∏–ª–∏ "–ù–ï–¢"`;

            const messages = [
                { role: 'system', content: intentAnalysisPrompt },
                { role: 'user', content: message }
            ];

            const response = await this.callOpenAIWithPrompt(messages);
            
            // –î–û–ë–ê–í–¨–¢–ï –≠–¢–û –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            console.log('ü§ñ GPT –æ—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π:', response);
            console.log('üîç –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞:', response.length);
            console.log('üîç –ü–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤:', response.substring(0, 50));
            
            const result = response.trim().toUpperCase().includes('–î–ê');
            
            logger.info('–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω', { 
                message: message.slice(0, 50), 
                historyLength: chatHistory.length,
                result,
                gptResponse: response // –î–û–ë–ê–í–¨–¢–ï –≠–¢–û
            });
            
            return result;

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π:', error);
            
            // –£–õ–£–ß–®–ï–ù–ù–ê–Ø FALLBACK –õ–û–ì–ò–ö–ê
            const triggerWords = ['—Å–∫–æ–ª—å–∫–æ', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ü–µ–Ω–∞', '–±—é–¥–∂–µ—Ç', '—Ä–∞—Å—á–µ—Ç', '—Å–º–µ—Ç–∞', '—Å–º–µ—Ç—É', '—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å'];
            const hasKeywords = triggerWords.some(word => message.toLowerCase().includes(word));
            const enoughHistory = chatHistory.length >= 6;
            
            console.log('üìå Fallback –∞–Ω–∞–ª–∏–∑:', { hasKeywords, enoughHistory, message });
            
            return hasKeywords && enoughHistory;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–º–µ—Ç—ã
    async checkFunctionalityReadiness(conversation) {
        try {
            const allMessages = conversation.map(m => `${m.role}: ${m.content}`).join('\n');
            
            const functionalityCheckPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã.

–î–∏–∞–ª–æ–≥: ${allMessages}

–ö–†–ò–¢–ï–†–ò–ò –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:
1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –±–æ—Ç–∞ –∏ –µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
2. –û–±—Å—É–∂–¥–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–º–∏–Ω–∏–º—É–º 3-4)
3. –ö–ª–∏–µ–Ω—Ç –¥–∞–ª —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
4. –ï—Å—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ü–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
5. –î–∏–∞–ª–æ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç 8+ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

–í–ê–ñ–ù–û: 
- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã –æ–¥–Ω–æ—Å–ª–æ–∂–Ω—ã–µ - –ù–ï_–ì–û–¢–û–í
- –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω—ã –æ–±—â–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ - –ù–ï_–ì–û–¢–û–í  
- –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏ - –ù–ï_–ì–û–¢–û–í

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û: "–ì–û–¢–û–í" –∏–ª–∏ "–ù–ï_–ì–û–¢–û–í"`;

            const messages = [
                { role: 'system', content: functionalityCheckPrompt }
            ];

            const response = await this.callOpenAIWithPrompt(messages);
            const result = response.trim().toUpperCase().includes('–ì–û–¢–û–í');
            
            logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞', { 
                conversationLength: conversation.length, 
                result 
            });
            
            return result;

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞:', error);
            
            // Fallback: —Å—Ç—Ä–æ–≥–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            const userMessages = conversation.filter(m => m.role === 'user');
            const detailedMessages = userMessages.filter(m => m.content.length > 30);
            const hasFeatureKeywords = conversation.some(m => 
                ['—Ñ—É–Ω–∫—Ü–∏—è', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', '–∑–∞–¥–∞—á–∞', '–±–æ—Ç –¥–æ–ª–∂–µ–Ω'].some(keyword =>
                    m.content.toLowerCase().includes(keyword)
                )
            );
            
            return conversation.length >= 8 && detailedMessages.length >= 4 && hasFeatureKeywords;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –∏ —Å—Ç–∞–¥–∏–∏
    buildSystemPrompt(mode = 'chat', conversationLength = 0) {
        if (mode === 'formulation') {
            return this.formulationPrompt;
        }
        
        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ–¥ —Å—Ç–∞–¥–∏—é –¥–∏–∞–ª–æ–≥–∞
        let stagePrompt = '';
        if (conversationLength < 4) {
            stagePrompt = '\n\n–°–¢–ê–î–ò–Ø: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –±–∏–∑–Ω–µ—Å–æ–º. –£–∑–Ω–∞–π —Å—É—Ç—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏.';
        } else if (conversationLength < 8) {
            stagePrompt = '\n\n–°–¢–ê–î–ò–Ø: –í—ã—è—Å–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.';
        } else {
            stagePrompt = '\n\n–°–¢–ê–î–ò–Ø: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π. –ú–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞—Å—á–µ—Ç—É.';
        }
        
        return this.baseSystemPrompt + stagePrompt;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    createFallbackSpec(conversation) {
        try {
            const userMessages = conversation
                .filter(msg => msg.role === 'user')
                .map(msg => msg.content)
                .join(' ');
            
            const businessType = this.extractBusinessType(userMessages);
            const features = this.extractBasicFeatures(userMessages);
            
            const spec = `# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É Telegram-–±–æ—Ç–∞

## 1. –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
**–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞:** ${businessType}
**–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** Telegram Bot API

## 2. –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
${features.map((feature, index) => `${index + 1}. ${feature}`).join('\n')}

## 3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- Backend: Node.js + Express
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: MongoDB
- –•–æ—Å—Ç–∏–Ω–≥: VPS/Cloud
- API: Telegram Bot API

## 4. –≠—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (3-5 –¥–Ω–µ–π)
2. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ (1-2 –Ω–µ–¥–µ–ª–∏)
3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (5-7 –¥–Ω–µ–π)
4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞ (3-5 –¥–Ω–µ–π)
5. –î–µ–ø–ª–æ–π –∏ –∑–∞–ø—É—Å–∫ (1-2 –¥–Ω—è)

*–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º*`;

            logger.info('–°–æ–∑–¥–∞–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –¢–ó', { businessType, featuresCount: features.length });
            return spec;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –¢–ó:', error);
            return '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.';
        }
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    extractBusinessType(text) {
        const patterns = {
            '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω': /–º–∞–≥–∞–∑–∏–Ω|—Ç–æ–≤–∞—Ä|–ø—Ä–æ–¥–∞–∂–∞|ecommerce|—Ç–æ—Ä–≥–æ–≤–ª—è/i,
            '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã': /–∫—Ä–∞—Å–æ—Ç–∞|—Å–∞–ª–æ–Ω|–º–∞—Å—Ç–µ—Ä|–∑–∞–ø–∏—Å—å|—É—Å–ª—É–≥/i,
            '–†–µ—Å—Ç–æ—Ä–∞–Ω': /—Ä–µ—Å—Ç–æ—Ä–∞–Ω|–∫–∞—Ñ–µ|–µ–¥–∞|–¥–æ—Å—Ç–∞–≤–∫–∞|–º–µ–Ω—é/i,
            '–û–±—É—á–µ–Ω–∏–µ': /–∫—É—Ä—Å|–æ–±—É—á–µ–Ω–∏–µ|–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ|—É—Ä–æ–∫|—à–∫–æ–ª–∞/i,
            '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏': /–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü|—Å–æ–≤–µ—Ç|–ø–æ–º–æ—â—å|—ç–∫—Å–ø–µ—Ä—Ç/i,
            '–ú–µ–¥–∏—Ü–∏–Ω–∞': /–≤—Ä–∞—á|–º–µ–¥–∏—Ü–∏–Ω|–∫–ª–∏–Ω–∏–∫–∞|–∑–¥–æ—Ä–æ–≤—å–µ|–ª–µ—á–µ–Ω–∏–µ/i,
            '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å': /–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç|–∫–≤–∞—Ä—Ç–∏—Ä–∞|–¥–æ–º|–∞—Ä–µ–Ω–¥–∞/i
        };
        
        for (const [type, pattern] of Object.entries(patterns)) {
            if (pattern.test(text)) {
                return type;
            }
        }
        
        return '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å';
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
    extractBasicFeatures(text) {
        const features = [];
        const lowerText = text.toLowerCase();
        
        if (lowerText.includes('–∫–∞—Ç–∞–ª–æ–≥') || lowerText.includes('—Ç–æ–≤–∞—Ä')) {
            features.push('–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥');
        }
        if (lowerText.includes('–∑–∞–∫–∞–∑') || lowerText.includes('–∫–æ—Ä–∑–∏–Ω')) {
            features.push('–°–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤');
        }
        if (lowerText.includes('–∑–∞–ø–∏—Å—å') || lowerText.includes('–∫–∞–ª–µ–Ω–¥–∞—Ä')) {
            features.push('–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏');
        }
        if (lowerText.includes('–ø–ª–∞—Ç–µ–∂') || lowerText.includes('–æ–ø–ª–∞—Ç')) {
            features.push('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π');
        }
        if (lowerText.includes('—É–≤–µ–¥–æ–º–ª–µ–Ω') || lowerText.includes('–Ω–∞–ø–æ–º–∏–Ω')) {
            features.push('–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
        }
        
        // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–π –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ
        if (features.length < 3) {
            features.push('–ë–∞–∑–æ–≤–æ–µ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è');
            features.push('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
            features.push('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å');
        }
        
        return features;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    getRandomPrompt() {
        const variants = [
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –±–∏–∑–Ω–µ—Å–µ?",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞ 5 –º–∏–Ω—É—Ç —Å–æ–∑–¥–∞–º –¢–ó –Ω–∞ –±–æ—Ç–∞. –ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ä–µ—à–∞–µ–º?",
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –°–æ–∑–¥–∞–¥–∏–º –±–æ—Ç–∞ –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏. –° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?",
            "–ü—Ä–∏–≤–µ—Ç! –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ Telegram-–±–æ—Ç–∞—Ö. –ß—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º?"
        ];
        
        const randomPrompt = variants[Math.floor(Math.random() * variants.length)];
        logger.info('–í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–ø—Ç');
        return randomPrompt;
    }
}

module.exports = new AdvancedGPTService(); 
const TelegramBot = require('node-telegram-bot-api');
const config = require('../config');
const logger = require('../utils/logger');
const { PreChatForm } = require('../models');

class TelegramService {
    constructor() {
        this.bot = null;
        this.chatId = config.telegram.adminChatId;
        this.isInitialized = false;
        
        // –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
        if (config.telegram.token && config.telegram.token !== 'your_bot_token_here') {
            this.initBot();
        } else {
            logger.warn('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
    }

    initBot() {
        try {
            // –í–∫–ª—é—á–∞–µ–º polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            this.bot = new TelegramBot(config.telegram.token, { 
                polling: {
                    interval: 300,
                    autoStart: true,
                    params: {
                        timeout: 10
                    }
                }
            });
            this.isInitialized = true;
            logger.info('‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å polling');
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
            this.bot.on('polling_error', (error) => {
                logger.error('–û—à–∏–±–∫–∞ polling:', error);
            });
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            this.setupCallbackHandlers();
            
            // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            this.bot.on('message', (msg) => {
                logger.info('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram:', {
                    from: msg.from.username || msg.from.id,
                    text: msg.text?.substring(0, 50) || '–±–µ–∑ —Ç–µ–∫—Å—Ç–∞'
                });
            });
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞:', error);
            this.isInitialized = false;
        }
    }

    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2
    escapeMarkdownV2(text) {
        return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º Markdown
    formatForTelegram(text) {
        // –ó–∞–º–µ–Ω—è–µ–º **text** –Ω–∞ *text* –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram
        let formatted = text.replace(/\*\*(.*?)\*\*/g, '*$1*');
        
        // –£–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–∏–µ markdown —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
        formatted = formatted.replace(/#{1,6}\s/g, ''); // –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        formatted = formatted.replace(/```[\s\S]*?```/g, ''); // –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
        formatted = formatted.replace(/`([^`]+)`/g, '$1'); // –£–±–∏—Ä–∞–µ–º inline –∫–æ–¥
        
        return formatted;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–º–µ—Ç—ã –≤ Telegram –º–µ–Ω–µ–¥–∂–µ—Ä—É
    async sendEstimateToTelegram(estimate, sessionId) {
        if (!this.isInitialized || !this.bot) {
            logger.warn('Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É');
            return false;
        }

        try {
            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É estimate –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ estimate:', {
                hasEstimate: !!estimate,
                estimateKeys: estimate ? Object.keys(estimate) : [],
                totalCost: estimate?.totalCost,
                totalHours: estimate?.totalHours,
                componentsCount: estimate?.components?.length || 0
            });
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            const session = await PreChatForm.findOne({ sessionId });
            const clientInfo = session ? {
                name: session.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                position: session.position || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                industry: session.industry || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                budget: session.budget || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                timeline: session.timeline || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                contacts: session.contacts || {}
            } : null;

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó parse_mode –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
            let message = 'üéØ –ù–û–í–ê–Ø –°–ú–ï–¢–ê!\n\n';
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
            if (clientInfo) {
                message += 'üë§ –ö–õ–ò–ï–ù–¢:\n';
                message += `–ò–º—è: ${clientInfo.name}\n`;
                message += `–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${clientInfo.position}\n`;
                message += `–û—Ç—Ä–∞—Å–ª—å: ${clientInfo.industry}\n`;
                message += `–ë—é–¥–∂–µ—Ç: ${clientInfo.budget}\n`;
                message += `–°—Ä–æ–∫–∏: ${clientInfo.timeline}\n`;
                
                if (clientInfo.contacts.phone) {
                    message += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${clientInfo.contacts.phone}\n`;
                }
                if (clientInfo.contacts.email) {
                    message += `üìß Email: ${clientInfo.contacts.email}\n`;
                }
                if (clientInfo.contacts.telegram) {
                    message += `üí¨ Telegram: ${clientInfo.contacts.telegram}\n`;
                }
                
                message += '\n';
            }
            
            // –î–û–ë–ê–í–õ–Ø–ï–ú –ò–°–¢–û–†–ò–Æ –î–ò–ê–õ–û–ì–ê
            if (session && session.chatHistory && session.chatHistory.length > 0) {
                message += 'üí¨ –ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:\n';
                message += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n';
                
                // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –≤—Å–µ, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ
                const messagesToShow = session.chatHistory.slice(-10);
                
                messagesToShow.forEach((msg, index) => {
                    if (msg.role === 'user') {
                        message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${msg.content}\n\n`;
                    } else if (msg.role === 'assistant') {
                        // –°–æ–∫—Ä–∞—â–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                        const content = msg.content.length > 300 
                            ? msg.content.substring(0, 300) + '...' 
                            : msg.content;
                        message += `ü§ñ –ë–æ—Ç: ${content}\n\n`;
                    }
                });
                
                message += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';
            }
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ—Ç–µ
            message += 'üí∞ –°–ú–ï–¢–ê:\n';
            message += `–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${estimate.totalCost ? estimate.totalCost.toLocaleString('ru-RU') : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'} —Ä—É–±.\n`;
            message += `–í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ${estimate.totalHours || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} —á–∞—Å–æ–≤\n`;
            message += `–°—Ä–æ–∫: ${estimate.timeline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n`;
            
            // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if (estimate.components && estimate.components.length > 0) {
                message += 'üìã –°–û–°–¢–ê–í –†–ê–ë–û–¢:\n';
                estimate.components.forEach((component, index) => {
                    message += `${index + 1}. ${component.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;
                    if (component.description) {
                        message += `   ${component.description}\n`;
                    }
                    message += `   –ß–∞—Å—ã: ${component.hours || 0} | –°—Ç–æ–∏–º–æ—Å—Ç—å: ${component.cost ? component.cost.toLocaleString('ru-RU') : 0} —Ä—É–±.\n\n`;
                });
            }
            
            // –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            if (estimate.detectedFeatures && estimate.detectedFeatures.length > 0) {
                message += '‚úÖ –§–£–ù–ö–¶–ò–û–ù–ê–õ:\n';
                estimate.detectedFeatures.forEach(feature => {
                    message += `‚Ä¢ ${feature}\n`;
                });
                message += '\n';
            }
            
            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if (estimate.recommendations && estimate.recommendations.length > 0) {
                message += 'üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n';
                estimate.recommendations.forEach(rec => {
                    message += `‚Ä¢ ${rec}\n`;
                });
                message += '\n';
            }
            
            // ID —Å–µ—Å—Å–∏–∏
            message += `üîó ID —Å–µ—Å—Å–∏–∏: ${sessionId}\n`;
            message += `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if (message.length > 4000) {
                // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
                logger.warn('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Å–æ–∫—Ä–∞—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞');
                
                // –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏—Å—Ç–æ—Ä–∏–∏
                message = 'üéØ –ù–û–í–ê–Ø –°–ú–ï–¢–ê!\n\n';
                
                // –ö–ª–∏–µ–Ω—Ç –∏–Ω—Ñ–æ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ)
                if (clientInfo) {
                    message += `üë§ ${clientInfo.name} | ${clientInfo.industry} | ${clientInfo.budget}\n\n`;
                }
                
                message += 'üí¨ –ü–û–°–õ–ï–î–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø:\n';
                const lastMessages = session.chatHistory.slice(-4);
                lastMessages.forEach(msg => {
                    const content = msg.content.substring(0, 150);
                    message += `${msg.role === 'user' ? 'üë§' : 'ü§ñ'}: ${content}\n`;
                });
                
                message += '\nüí∞ –°–ú–ï–¢–ê:\n';
                message += `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${estimate.totalCost.toLocaleString('ru-RU')} —Ä—É–±.\n`;
                message += `–°—Ä–æ–∫: ${estimate.timeline}\n\n`;
                
                message += 'üìã –î–µ—Ç–∞–ª–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏...';
            }

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            const keyboard = {
                inline_keyboard: [
                    [
                        { 
                            text: '‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–º–µ—Ç—É', 
                            callback_data: `approve_${sessionId}_${estimate._id || 'temp'}` 
                        }
                    ],
                    [
                        { 
                            text: 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 
                            callback_data: `edit_${sessionId}_${estimate._id || 'temp'}` 
                        },
                        { 
                            text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 
                            callback_data: `reject_${sessionId}_${estimate._id || 'temp'}` 
                        }
                    ]
                ]
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó parse_mode —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
            const sentMessage = await this.bot.sendMessage(this.chatId, message, {
                reply_markup: keyboard,
                disable_web_page_preview: true
            });

            logger.info('‚úÖ –°–º–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram', { 
                messageId: sentMessage.message_id,
                sessionId 
            });

            return true;

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º–µ—Ç—ã –≤ Telegram:', error);
            
            // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try {
                const cost = estimate?.totalCost || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';
                const hours = estimate?.totalHours || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã';
                const simpleMessage = `–ù–æ–≤–∞—è —Å–º–µ—Ç–∞!\n–°–µ—Å—Å–∏—è: ${sessionId}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost} —Ä—É–±.\n–í—Ä–µ–º—è: ${hours} —á–∞—Å–æ–≤`;
                
                await this.bot.sendMessage(this.chatId, simpleMessage);
                logger.info('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–º–µ—Ç—ã');
                return true;
                
            } catch (retryError) {
                logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é:', retryError);
                return false;
            }
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç—É
    async sendApprovalNotification(sessionId, estimateId) {
        try {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
            // —á–µ—Ä–µ–∑ Telegram –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –µ–≥–æ chat_id
            
            logger.info('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–º–µ—Ç—ã', { sessionId, estimateId });
            
            return true;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            return false;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
    async sendMessageToManager(text) {
        if (!this.isInitialized || !this.bot) {
            logger.warn('Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }

        try {
            await this.bot.sendMessage(this.chatId, text);
            return true;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É:', error);
            return false;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
    async sendNewLeadNotification(formData, sessionId) {
        if (!this.isInitialized || !this.bot) {
            logger.warn('Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }

        try {
            let message = 'üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!\n\n';
            message += `üë§ –ò–º—è: ${formData.name}\n`;
            message += `üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${formData.position}\n`;
            message += `üè¢ –û—Ç—Ä–∞—Å–ª—å: ${formData.industry}\n`;
            message += `üí∞ –ë—é–¥–∂–µ—Ç: ${formData.budget}\n`;
            message += `‚è± –°—Ä–æ–∫–∏: ${formData.timeline}\n`;
            
            if (formData.contacts) {
                message += '\nüìû –ö–û–ù–¢–ê–ö–¢–´:\n';
                if (formData.contacts.phone) message += `üì± ${formData.contacts.phone}\n`;
                if (formData.contacts.email) message += `üìß ${formData.contacts.email}\n`;
                if (formData.contacts.telegram) message += `üí¨ ${formData.contacts.telegram}\n`;
            }
            
            message += `\nüîó ID —Å–µ—Å—Å–∏–∏: ${sessionId}`;

            await this.bot.sendMessage(this.chatId, message);
            
            logger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            return true;
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ:', error);
            return false;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–æ–∫)
    setupCallbackHandlers() {
        if (!this.bot) return;

        this.bot.on('callback_query', async (callbackQuery) => {
            const action = callbackQuery.data;
            const chatId = callbackQuery.message.chat.id;
            const messageId = callbackQuery.message.message_id;
            
            logger.info('üì± –ü–æ–ª—É—á–µ–Ω callback –æ—Ç –∫–Ω–æ–ø–∫–∏', {
                action: action,
                from: callbackQuery.from.username || callbackQuery.from.id,
                messageId: messageId
            });

            try {
                // –†–∞–∑–±–∏—Ä–∞–µ–º action
                const [command, sessionId, estimateId] = action.split('_');
                
                logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã', { command, sessionId, estimateId });

                switch (command) {
                    case 'approve':
                        await this.handleApproveEstimate(chatId, messageId, sessionId, estimateId);
                        break;
                    case 'edit':
                        await this.handleEditEstimate(chatId, messageId, sessionId, estimateId);
                        break;
                    case 'reject':
                        await this.handleRejectEstimate(chatId, messageId, sessionId, estimateId);
                        break;
                    default:
                        logger.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ callback:', command);
                }

                // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                await this.bot.answerCallbackQuery(callbackQuery.id, {
                    text: '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
                    show_alert: false
                });
                
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
                await this.bot.answerCallbackQuery(callbackQuery.id, {
                    text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
                    show_alert: true
                });
            }
        });
        
        logger.info('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç—ã
    async handleApproveEstimate(chatId, messageId, sessionId, estimateId) {
        try {
            logger.info('üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç—ã', { sessionId, estimateId });
            
            // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é
            const session = await PreChatForm.findOne({ sessionId });
            
            if (!session) {
                logger.error('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–º–µ—Ç—ã', { sessionId });
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }
            
            logger.info('‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å', {
                sessionId,
                currentStatus: {
                    estimateApproved: session.estimateApproved,
                    estimateSent: session.estimateSent
                }
            });
            
            // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            await this.bot.editMessageText(
                '‚úÖ –°–ú–ï–¢–ê –£–¢–í–ï–†–ñ–î–ï–ù–ê!\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é –∫–ª–∏–µ–Ω—Ç—É...',
                {
                    chat_id: chatId,
                    message_id: messageId
                }
            );
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            const totalCost = session.estimateData?.totalCost || '—É—Ç–æ—á–Ω—è–µ—Ç—Å—è —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞';
            const totalHours = session.estimateData?.totalHours || '—É—Ç–æ—á–Ω—è–µ—Ç—Å—è —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞';
            const timeline = session.estimateData?.timeline || '2-3 –Ω–µ–¥–µ–ª–∏';
            
            const approvedEstimateMessage = `‚úÖ **–í–∞—à–∞ —Å–º–µ—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!**\n\n` +
                `üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞:** ${typeof totalCost === 'number' ? totalCost.toLocaleString('ru-RU') : totalCost} —Ä—É–±.\n` +
                `‚è±Ô∏è **–°—Ä–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:** ${typeof totalHours === 'number' ? totalHours + ' —á–∞—Å–æ–≤' : totalHours}\n` +
                `üìÖ **–û–±—â–∏–π —Å—Ä–æ–∫:** ${timeline}\n\n` +
                `üìã **–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**\n` +
                `1. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π\n` +
                `2. –ü–æ–¥–ø–∏—à–µ–º –¥–æ–≥–æ–≤–æ—Ä\n` +
                `3. –ù–∞—á–Ω–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ –±–æ—Ç–∞\n\n` +
                `üìû –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.\n\n` +
                `–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö –∑–¥–µ—Å—å - —è –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É.`;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—É—é —Å–º–µ—Ç—É –≤ chatHistory
            session.chatHistory.push({
                role: 'assistant',
                content: approvedEstimateMessage,
                timestamp: new Date(),
                metadata: {
                    messageType: 'approved_estimate',
                    approvedAt: new Date(),
                    estimateId: estimateId
                }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
            session.estimateApproved = true;
            session.estimateApprovedAt = new Date();
            session.approvedEstimateId = estimateId;
            
            // –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ—Å—Ç–∞–≤–∫–∏ —á—Ç–æ–±—ã SSE –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É
            session.estimateDeliveredToClient = false;
            
            const savedSession = await session.save();
            
            logger.info('‚úÖ –°–º–µ—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î', { 
                sessionId,
                estimateApproved: savedSession.estimateApproved,
                approvedAt: savedSession.estimateApprovedAt
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            await this.bot.editMessageText(
                '‚úÖ –°–ú–ï–¢–ê –£–¢–í–ï–†–ñ–î–ï–ù–ê!\n\n' +
                `–ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n` +
                `ID —Å–µ—Å—Å–∏–∏: ${sessionId}\n\n` +
                `‚ú® –°–º–µ—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ —á–∞—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`,
                {
                    chat_id: chatId,
                    message_id: messageId
                }
            );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await this.bot.sendMessage(
                chatId,
                `‚úÖ –°—Ç–∞—Ç—É—Å –≤ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω:\n` +
                `- estimateApproved: true\n` +
                `- approvedAt: ${new Date().toLocaleString('ru-RU')}\n` +
                `- –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SSE/polling`
            );
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç—ã:', error);
            
            try {
                await this.bot.sendMessage(
                    chatId, 
                    `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–º–µ—Ç—ã:\n${error.message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.`
                );
            } catch (sendError) {
                logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', sendError);
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ—Ç—ã  
    async handleEditEstimate(chatId, messageId, sessionId, estimateId) {
        try {
            await this.bot.sendMessage(
                chatId,
                `üìù –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n${config.adminPanelUrl}/estimates/${estimateId}`
            );
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã
    async handleRejectEstimate(chatId, messageId, sessionId, estimateId) {
        try {
            await this.bot.editMessageText(
                '‚ùå –°–ú–ï–¢–ê –û–¢–ö–õ–û–ù–ï–ù–ê',
                {
                    chat_id: chatId,
                    message_id: messageId
                }
            );

            logger.info('–°–º–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞', { sessionId, estimateId });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã:', error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    getBotInfo() {
        return {
            ready: this.isInitialized,
            hasToken: !!config.telegram.token,
            hasChatId: !!this.chatId,
            status: this.isInitialized ? 'active' : 'inactive',
            message: this.isInitialized 
                ? 'Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' 
                : 'Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
        };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    isReady() {
        return this.isInitialized && this.bot !== null;
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    async shutdown() {
        try {
            if (this.bot) {
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
                if (this.bot.isPolling && this.bot.isPolling()) {
                    await this.bot.stopPolling();
                }
                
                logger.info('Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
            
            this.isInitialized = false;
            this.bot = null;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –±–æ—Ç–∞:', error);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏ –æ–±—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
    async sendNotification(text) {
        if (!this.isInitialized || !this.bot) {
            logger.warn('Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }

        try {
            await this.bot.sendMessage(this.chatId, text);
            return true;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            return false;
        }
    }

    // –ê–ª–∏–∞—Å –¥–ª—è sendNewLeadNotification –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async sendLeadNotification(formData, sessionId) {
        return this.sendNewLeadNotification(formData, sessionId);
    }

    // –ê–ª–∏–∞—Å –¥–ª—è sendMessageToManager
    async sendEstimateToManager(estimate, sessionId) {
        return this.sendEstimateToTelegram(estimate, sessionId);
    }
}

module.exports = new TelegramService();
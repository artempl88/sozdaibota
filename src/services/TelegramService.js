const TelegramBot = require('node-telegram-bot-api');
const config = require('../config');
const logger = require('../utils/logger');
const fs = require('fs');
const path = require('path');

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
let instance = null;

class TelegramService {
    constructor() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä
        if (instance) {
            logger.info('‚ôªÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramService');
            return instance;
        }
        
        this.bot = null;
        this.adminChatId = config.telegram.adminChatId || process.env.ADMIN_CHAT_ID;
        this.isInitialized = false;
        this.recentlySentEstimates = new Map();
        this.hadConflictError = false;
        
        console.log('üîç TELEGRAM CONFIG:', {
            token: config.telegram.token ? '–ï—Å—Ç—å' : '–ù–µ—Ç',
            tokenLength: config.telegram.token?.length,
            adminChatId: this.adminChatId,
            configKeys: Object.keys(config.telegram)
        });
        
        if (config.telegram.token && this.adminChatId) {
            this.initializeBot();
        } else {
            logger.warn('‚ùå Telegram bot token –∏–ª–∏ adminChatId –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        instance = this;
    }

    async initializeBot() {
        try {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.bot) {
                logger.info('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–æ—Ç...');
                await this.bot.stopPolling();
                this.bot = null;
            }
            
            this.bot = new TelegramBot(config.telegram.token, { 
                polling: {
                    interval: 300,
                    autoStart: true,
                    params: {
                        timeout: 10,
                        allowed_updates: ['message', 'callback_query']
                    }
                }
            });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
            this.bot.on('polling_error', (error) => {
                if (error.message.includes('409 Conflict')) {
                    if (!this.hadConflictError) {
                        logger.error('‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç polling - –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä');
                        this.hadConflictError = true;
                    }
                } else {
                    logger.error('Telegram polling error:', error.message);
                }
            });
            
            this.setupHandlers();
            this.isInitialized = true;
            logger.info('‚úÖ Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            this.sendNotification('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞:', error);
            this.isInitialized = false;
        }
    }

    setupHandlers() {
        if (!this.bot) return;

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.bot.removeAllListeners();

        this.bot.on('callback_query', async (query) => {
            try {
                const [action, estimateId] = query.data.split(':');
                
                if (action === 'approve') {
                    await this.approveEstimate(query, estimateId);
                } else if (action === 'reject') {
                    await this.rejectEstimate(query, estimateId);
                } else if (action === 'edit') {
                    await this.requestEditEstimate(query, estimateId);
                }
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
                this.bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
            }
        });

        this.bot.onText(/\/edit (\w+) (\d+) (\d+) (.+)/, async (msg, match) => {
            await this.editEstimate(msg, match);
        });

        this.bot.onText(/\/stats/, async (msg) => {
            await this.sendStats(msg);
        });

        this.bot.onText(/\/debug/, async (msg) => {
            await this.sendDebugInfo(msg);
        });

        this.bot.onText(/\/help/, async (msg) => {
            await this.sendHelp(msg);
        });

        this.bot.onText(/\/status/, async (msg) => {
            const status = `ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**
            
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${this.isInitialized ? '‚úÖ' : '‚ùå'}
Admin Chat ID: ${this.adminChatId || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(process.uptime() / 60)} –º–∏–Ω—É—Ç
PID: ${process.pid}`;
            
            await this.bot.sendMessage(msg.chat.id, status, { parse_mode: 'Markdown' });
        });

        logger.info('Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    async approveEstimate(query, estimateId) {
        try {
            const models = require('../models');
            
            if (models.Estimate) {
                const approvedEstimate = await models.Estimate.findByIdAndUpdate(
                    estimateId, 
                    { status: 'approved', approvedAt: new Date() },
                    { new: true }
                );
                
                this.bot.answerCallbackQuery(query.id, { text: '‚úÖ –°–º–µ—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!' });
                
                this.bot.editMessageText(
                    query.message.text + '\n\n‚úÖ **–°–ú–ï–¢–ê –£–¢–í–ï–†–ñ–î–ï–ù–ê**',
                    {
                        chat_id: query.message.chat.id,
                        message_id: query.message.message_id,
                        parse_mode: 'Markdown'
                    }
                );

                if (approvedEstimate && approvedEstimate.sessionId) {
                    try {
                        logger.info('–°–º–µ—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É', { 
                            estimateId, 
                            sessionId: approvedEstimate.sessionId 
                        });
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–º–µ—Ç—É –æ–±—Ä–∞—Ç–Ω–æ –∫–ª–∏–µ–Ω—Ç—É
                        const { PreChatForm } = require('../models');
                        const session = await PreChatForm.findOne({ sessionId: approvedEstimate.sessionId });
                        
                        if (session) {
                            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–º–µ—Ç—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                            const estimateMessage = this.formatEstimateForClient(approvedEstimate);
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—Ç—É –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            session.chatHistory.push({
                                role: 'assistant',
                                content: estimateMessage,
                                timestamp: new Date(),
                                metadata: {
                                    messageType: 'approved_estimate',
                                    estimateId: approvedEstimate._id.toString(),
                                    approved: true,
                                    approvedAt: new Date()
                                }
                            });
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
                            session.estimateApproved = true;
                            session.estimateApprovedAt = new Date();
                            session.approvedEstimateId = approvedEstimate._id;
                            
                            await session.save();
                            
                            logger.info('‚úÖ –°–º–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞', { 
                                sessionId: approvedEstimate.sessionId 
                            });
                            
                            this.bot.sendMessage(
                                query.message.chat.id,
                                `üöÄ **–°–ú–ï–¢–ê –û–¢–ü–†–ê–í–õ–ï–ù–ê –ö–õ–ò–ï–ù–¢–£**\n\nID: ${estimateId}\n–°–µ—Å—Å–∏—è: ${approvedEstimate.sessionId}`,
                                { parse_mode: 'Markdown' }
                            );
                        } else {
                            logger.error('–°–µ—Å—Å–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', { sessionId: approvedEstimate.sessionId });
                            this.bot.sendMessage(
                                query.message.chat.id,
                                '‚ö†Ô∏è –°–º–µ—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ —Å–µ—Å—Å–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                            );
                        }
                    } catch (sendError) {
                        logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç—É:', sendError);
                        this.bot.sendMessage(
                            query.message.chat.id,
                            '‚ö†Ô∏è –°–º–µ—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
                        );
                    }
                }
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç—ã:', error);
        }
    }

    async rejectEstimate(query, estimateId) {
        try {
            const models = require('../models');
            
            if (models.Estimate) {
                await models.Estimate.findByIdAndUpdate(estimateId, { status: 'rejected' });
            }
            
            this.bot.answerCallbackQuery(query.id, { text: '‚ùå –°–º–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞' });
            
            this.bot.editMessageText(
                query.message.text + '\n\n‚ùå **–°–ú–ï–¢–ê –û–¢–ö–õ–û–ù–ï–ù–ê**',
                {
                    chat_id: query.message.chat.id,
                    message_id: query.message.message_id,
                    parse_mode: 'Markdown'
                }
            );
            
            logger.info('–°–º–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞', { estimateId });
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã:', error);
        }
    }

    async requestEditEstimate(query, estimateId) {
        this.bot.answerCallbackQuery(query.id, { text: '‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã' });
        
        this.bot.sendMessage(
            query.message.chat.id,
            `‚úèÔ∏è **–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–ú–ï–¢–´**\n\n` +
            `ID —Å–º–µ—Ç—ã: ${estimateId}\n\n` +
            `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
            `\`/edit ${estimateId} [–Ω–æ–≤–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å] [–Ω–æ–≤–æ–µ_–≤—Ä–µ–º—è_—á–∞—Å–æ–≤] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]\`\n\n` +
            `–ü—Ä–∏–º–µ—Ä:\n` +
            `\`/edit ${estimateId} 75000 60 –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM\``,
            { parse_mode: 'Markdown' }
        );
    }

    async editEstimate(msg, match) {
        try {
            const chatId = msg.chat.id;
            const [, estimateId, newCost, newHours, comment] = match;
            const models = require('../models');
            
            if (!models.Estimate) {
                this.bot.sendMessage(chatId, '‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                return;
            }
            
            const updatedEstimate = await models.Estimate.findByIdAndUpdate(
                estimateId,
                {
                    totalCost: parseInt(newCost),
                    totalHours: parseInt(newHours),
                    status: 'approved',
                    editComment: comment,
                    editedAt: new Date()
                },
                { new: true }
            );
            
            if (updatedEstimate) {
                const safeNewCost = Number(newCost) || 0;
                
                this.bot.sendMessage(
                    chatId,
                    `‚úÖ **–°–ú–ï–¢–ê –û–¢–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ê –ò –£–¢–í–ï–†–ñ–î–ï–ù–ê**\n\n` +
                    `üÜî ID: ${estimateId}\n` +
                    `üí∞ –ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${safeNewCost.toLocaleString('ru-RU')} ‚ÇΩ\n` +
                    `‚è±Ô∏è –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: ${newHours} —á–∞—Å–æ–≤\n` +
                    `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}\n\n` +
                    `üöÄ –°–º–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!`,
                    { parse_mode: 'Markdown' }
                );
                
                logger.info('–°–º–µ—Ç–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞', { estimateId, newCost, newHours });
            } else {
                this.bot.sendMessage(chatId, '‚ùå –°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ—Ç—ã:', error);
            this.bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–º–µ—Ç—ã');
        }
    }

    async sendStats(msg) {
        try {
            const chatId = msg.chat.id;
            const models = require('../models');
            
            if (!models.Estimate) {
                this.bot.sendMessage(chatId, '‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                return;
            }
            
            const total = await models.Estimate.countDocuments();
            const approved = await models.Estimate.countDocuments({ status: 'approved' });
            const pending = await models.Estimate.countDocuments({ status: 'pending' });
            const rejected = await models.Estimate.countDocuments({ status: 'rejected' });
            
            const statsMessage = 
                `üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ú–ï–¢**\n\n` +
                `üìã –í—Å–µ–≥–æ: ${total}\n` +
                `‚úÖ –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: ${approved}\n` +
                `‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: ${pending}\n` +
                `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${rejected}\n\n` +
                `üíØ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${total > 0 ? (approved / total * 100).toFixed(1) : 0}%`;
            
            this.bot.sendMessage(chatId, statsMessage, { parse_mode: 'Markdown' });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            this.bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
    }

    async sendDebugInfo(msg) {
        try {
            const chatId = msg.chat.id;
            
            const mongoStatus = '‚ùì –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
            
            let openaiStatus = '‚ùì –ü—Ä–æ–≤–µ—Ä—è–µ–º...';
            try {
                const axios = require('axios');
                await axios.get('https://api.openai.com/v1/models', { 
                    timeout: 5000,
                    headers: { 'Authorization': `Bearer ${config.openai.apiKey}` }
                });
                openaiStatus = '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω';
            } catch {
                openaiStatus = '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
            }
            
            const debugMessage = 
                `üîç **–û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø**\n\n` +
                `**–°–µ—Ä–≤–∏—Å—ã:**\n` +
                `MongoDB: ${mongoStatus}\n` +
                `OpenAI: ${openaiStatus}\n` +
                `Telegram Bot: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n\n` +
                `**–°–µ—Ä–≤–µ—Ä:**\n` +
                `–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(process.uptime() / 60)} –º–∏–Ω\n` +
                `–ü–∞–º—è—Ç—å: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)} MB\n` +
                `Node.js: ${process.version}`;
            
            this.bot.sendMessage(chatId, debugMessage, { parse_mode: 'Markdown' });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
            this.bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
        }
    }

    async sendHelp(msg) {
        const helpMessage = `üìö **–ö–û–ú–ê–ù–î–´ TELEGRAM –ë–û–¢–ê**

üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–º–µ—Ç
üîç /debug - –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è  
‚ùì /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
ü§ñ /status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞

‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ—Ç:**
/edit [ID] [—Å—Ç–æ–∏–º–æ—Å—Ç—å] [—á–∞—Å—ã] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]

–ü—Ä–∏–º–µ—Ä:
/edit 507f1f77bcf86cd799439011 75000 60 –î–æ–±–∞–≤–ª–µ–Ω–∞ CRM

üîò **–ö–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:**
‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å - —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–º–µ—Ç—É
‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å - –æ—Ç–∫–ª–æ–Ω—è–µ—Ç —Å–º–µ—Ç—É
‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∫–∏`;

        this.bot.sendMessage(msg.chat.id, helpMessage, { parse_mode: 'Markdown' });
    }

    async sendEstimateToManager(estimate, sessionId) {
        return this.sendEstimateToTelegram(estimate, sessionId);
    }

    async sendEstimateToTelegram(estimate, sessionId) {
        if (!this.bot || !this.adminChatId) {
            logger.warn('Telegram –±–æ—Ç –∏–ª–∏ admin chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
            return false;
        }

        try {
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            if (this.recentlySentEstimates.has(sessionId)) {
                const lastSentTime = this.recentlySentEstimates.get(sessionId);
                if (Date.now() - lastSentTime < 5000) {
                    logger.warn('–°–º–µ—Ç–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª—å', { sessionId });
                    return false;
                }
            }
            
            this.recentlySentEstimates.set(sessionId, Date.now());
            
            setTimeout(() => {
                this.recentlySentEstimates.delete(sessionId);
            }, 60000);

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            const models = require('../models');
            let saved = estimate;
            let estimateId = 'temp_' + Date.now();
            
            // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞
            if (models.Estimate) {
                try {
                    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                    const estimateData = {
                        sessionId,
                        projectName: estimate.projectName || 'Telegram –±–æ—Ç',
                        totalCost: estimate.totalCost || 0,
                        totalHours: estimate.totalHours || 0,
                        hourlyRate: estimate.hourlyRate || 2000,
                        complexity: estimate.complexity || '—Å—Ä–µ–¥–Ω–∏–π',
                        timeline: estimate.timeline || `${Math.ceil((estimate.totalHours || 40) / 40)} –Ω–µ–¥–µ–ª—å`,
                        detectedFeatures: estimate.detectedFeatures || [],
                        status: 'pending',
                        components: []
                    };
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                    if (estimate.components && Array.isArray(estimate.components)) {
                        estimateData.components = estimate.components.map(comp => ({
                            name: comp.name || '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç',
                            hours: comp.hours || 0,
                            cost: comp.cost || (comp.hours || 0) * (estimate.hourlyRate || 2000),
                            description: comp.description || ''
                        }));
                    } else if (estimate.costBreakdown && Array.isArray(estimate.costBreakdown)) {
                        // –ï—Å–ª–∏ –µ—Å—Ç—å costBreakdown, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                        estimateData.components = estimate.costBreakdown.map(comp => ({
                            name: comp.name || '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç',
                            hours: comp.hours || 0,
                            cost: comp.cost || (comp.hours || 0) * (estimate.hourlyRate || 2000),
                            description: comp.description || ''
                        }));
                    } else {
                        // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                        estimateData.components = [{
                            name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–∞',
                            hours: estimate.totalHours || 40,
                            cost: estimate.totalCost || 80000,
                            description: '–ü–æ–ª–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞'
                        }];
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (estimate.risks) estimateData.risks = estimate.risks;
                    if (estimate.recommendations) estimateData.recommendations = estimate.recommendations;
                    
                    logger.info('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ—Ç—É –≤ –ë–î', { 
                        componentsCount: estimateData.components.length,
                        totalCost: estimateData.totalCost 
                    });
                    
                    saved = await models.Estimate.create(estimateData);
                    estimateId = saved._id;
                    
                    logger.info('‚úÖ –°–º–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î', { estimateId });
                    
                } catch (dbError) {
                    logger.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', dbError.message);
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
                    estimateId = 'temp_' + Date.now();
                }
            }
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            const detectedFeatures = estimate.detectedFeatures || [];
            const safeTotalCost = Number(estimate.totalCost) || 0;
            const safeTotalHours = Number(estimate.totalHours) || 0;
            
            const message = 
                `üìä **–ù–û–í–ê–Ø –°–ú–ï–¢–ê**\n\n` +
                `üÜî ID: ${estimateId}\n` +
                `üìù –ü—Ä–æ–µ–∫—Ç: ${estimate.projectName || 'Telegram –±–æ—Ç'}\n` +
                `üí∞ **–ò–¢–û–ì–û: ${safeTotalCost.toLocaleString('ru-RU')} ‚ÇΩ**\n` +
                `‚è±Ô∏è –í—Ä–µ–º—è: ${safeTotalHours} —á–∞—Å–æ–≤\n` +
                `üìÖ –°—Ä–æ–∫: ${estimate.timeline || `${Math.ceil(safeTotalHours / 40)} –Ω–µ–¥–µ–ª—å`}\n\n` +
                (detectedFeatures.length > 0 ? 
                    `üìã **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n${detectedFeatures.map(f => `‚Ä¢ ${f}`).join('\n')}\n\n` : 
                    ''
                ) +
                `üïê –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`;

            const keyboard = {
                inline_keyboard: [[
                    { text: '‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `approve:${estimateId}` },
                    { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject:${estimateId}` },
                    { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: `edit:${estimateId}` }
                ]]
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            const sentMessage = await this.bot.sendMessage(this.adminChatId, message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏–∑ PreChatForm
                const { PreChatForm } = require('../models');
                const session = await PreChatForm.findOne({ sessionId });
                
                if (session && session.chatHistory && session.chatHistory.length > 0) {
                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
                    let historyText = `–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê\n`;
                    historyText += `================\n\n`;
                    historyText += `ID —Å–µ—Å—Å–∏–∏: ${sessionId}\n`;
                    historyText += `–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: ${session.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
                    historyText += `–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${session.position || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
                    historyText += `–û—Ç—Ä–∞—Å–ª—å: ${session.industry || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
                    historyText += `–ë—é–¥–∂–µ—Ç: ${session.budget || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
                    historyText += `–°—Ä–æ–∫–∏: ${session.timeline || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
                    historyText += `–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${new Date(session.createdAt).toLocaleString('ru-RU')}\n`;
                    historyText += `\n================\n–î–ò–ê–õ–û–ì:\n================\n\n`;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                    session.chatHistory.forEach((msg, index) => {
                        const role = msg.role === 'user' ? 'üë§ –ö–õ–ò–ï–ù–¢' : 'ü§ñ –ë–û–¢';
                        const timestamp = msg.timestamp ? new Date(msg.timestamp).toLocaleString('ru-RU') : '';
                        historyText += `${role} (${timestamp}):\n${msg.content}\n\n---\n\n`;
                    });
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ—Ç–µ –≤ –∫–æ–Ω–µ—Ü
                    historyText += `\n================\n–°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–ê–Ø –°–ú–ï–¢–ê:\n================\n\n`;
                    historyText += `–ü—Ä–æ–µ–∫—Ç: ${estimate.projectName || 'Telegram –±–æ—Ç'}\n`;
                    historyText += `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${safeTotalCost.toLocaleString('ru-RU')} ‚ÇΩ\n`;
                    historyText += `–í—Ä–µ–º—è: ${safeTotalHours} —á–∞—Å–æ–≤\n`;
                    historyText += `–°—Ä–æ–∫: ${estimate.timeline || `${Math.ceil(safeTotalHours / 40)} –Ω–µ–¥–µ–ª—å`}\n`;
                    
                    if (estimate.components && estimate.components.length > 0) {
                        historyText += `\n–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:\n`;
                        estimate.components.forEach(comp => {
                            historyText += `- ${comp.name}: ${comp.hours}—á = ${comp.cost.toLocaleString('ru-RU')} ‚ÇΩ\n`;
                        });
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º Buffer –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    const historyBuffer = Buffer.from(historyText, 'utf-8');
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                    await this.bot.sendDocument(this.adminChatId, historyBuffer, {
                        caption: `üìÑ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}`,
                        filename: `dialog_${sessionId}_${new Date().toISOString().split('T')[0]}.txt`
                    }, {
                        filename: `dialog_${sessionId}_${new Date().toISOString().split('T')[0]}.txt`,
                        contentType: 'text/plain'
                    });
                    
                    logger.info('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram');
                } else {
                    logger.warn('–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞', { sessionId });
                }
            } catch (historyError) {
                logger.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞:', historyError);
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
            }

            logger.info('‚úÖ –°–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ Telegram', { 
                estimateId,
                messageId: sentMessage.message_id,
                chatId: this.adminChatId
            });
            
            return true;

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º–µ—Ç—ã –≤ Telegram:', error);
            return false;
        }
    }

    async sendLeadNotification(formData, sessionId) {
        if (!this.bot || !this.adminChatId) {
            logger.warn('Telegram –±–æ—Ç –∏–ª–∏ admin chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
            return false;
        }

        try {
            const text = `üöÄ **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!**\n\n` +
                        `üë§ –ò–º—è: ${formData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                        `üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${formData.position || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                        `üè¢ –û—Ç—Ä–∞—Å–ª—å: ${formData.industry || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                        `üí∞ –ë—é–¥–∂–µ—Ç: ${formData.budget || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                        `üìÖ –°—Ä–æ–∫–∏: ${formData.timeline || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                        `üí¨ Telegram: ${formData.telegram || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                        `üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.message || '–ù–µ—Ç'}\n` +
                        `üÜî Session ID: ${sessionId || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;
            
            await this.bot.sendMessage(this.adminChatId, text, { parse_mode: 'Markdown' });
            
            logger.info('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            return true;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–¥–µ:', error);
            return false;
        }
    }

    async sendToManager(message) {
        if (!this.bot || !this.adminChatId) {
            logger.warn('Telegram –±–æ—Ç –∏–ª–∏ admin chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
            return false;
        }

        try {
            await this.bot.sendMessage(this.adminChatId, message, {
                parse_mode: 'Markdown'
            });
            
            logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É');
            return true;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É:', error);
            return false;
        }
    }

    async sendNotification(text, options = {}) {
        if (!this.bot || !this.adminChatId) {
            return false;
        }

        try {
            await this.bot.sendMessage(this.adminChatId, text, {
                parse_mode: 'Markdown',
                ...options
            });
            
            return true;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            return false;
        }
    }

    isReady() {
        return this.isInitialized && this.bot && this.adminChatId;
    }

    getBotInfo() {
        return {
            isInitialized: this.isInitialized,
            hasBot: !!this.bot,
            hasAdminChat: !!this.adminChatId,
            ready: this.isReady()
        };
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    formatEstimateForClient(estimate) {
        const totalCost = Number(estimate.totalCost) || 0;
        const totalHours = Number(estimate.totalHours) || 0;
        
        let message = `üéâ **–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –í–∞—à–∞ —Å–º–µ—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!**\n\n`;
        message += `üìã **${estimate.projectName || '–í–∞—à Telegram-–±–æ—Ç'}**\n\n`;
        message += `üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞:** ${totalCost.toLocaleString('ru-RU')} —Ä—É–±.\n`;
        message += `‚è±Ô∏è **–°—Ä–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:** ${estimate.timeline || `${Math.ceil(totalHours / 40)} –Ω–µ–¥–µ–ª—å`}\n`;
        message += `üìä **–û–±—â–∞—è —Ç—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç—å:** ${totalHours} —á–∞—Å–æ–≤\n\n`;
        
        if (estimate.components && estimate.components.length > 0) {
            message += `**üìå –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å:**\n`;
            estimate.components.forEach(comp => {
                const compCost = Number(comp.cost) || 0;
                message += `‚Ä¢ ${comp.name}: ${compCost.toLocaleString('ru-RU')} —Ä—É–±.\n`;
            });
            message += `\n`;
        }
        
        if (estimate.detectedFeatures && estimate.detectedFeatures.length > 0) {
            message += `**‚úÖ –í–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n`;
            estimate.detectedFeatures.forEach(feature => {
                message += `‚Ä¢ ${feature}\n`;
            });
            message += `\n`;
        }
        
        message += `**üöÄ –ß—Ç–æ –¥–∞–ª—å—à–µ?**\n`;
        message += `1. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç\n`;
        message += `2. –û–±—Å—É–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä\n`;
        message += `3. –í–Ω–µ—Å–∏—Ç–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É 50%\n`;
        message += `4. –ú—ã –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!\n\n`;
        
        message += `**üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:**\n`;
        message += `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n`;
        message += `‚Ä¢ Telegram: @your_manager\n`;
        message += `‚Ä¢ Email: info@example.com\n\n`;
        
        message += `_–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! –ú—ã —Å–æ–∑–¥–∞–¥–∏–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞!_ üéØ`;
        
        return message;
    }

    async shutdown() {
        if (this.bot) {
            logger.info('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞...');
            await this.bot.stopPolling();
            this.bot = null;
            this.isInitialized = false;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
module.exports = instance || new TelegramService();
const TelegramBot = require('node-telegram-bot-api');
const config = require('../config');
const logger = require('../utils/logger');
const { PreChatForm } = require('../models');

class TelegramService {
    constructor() {
        this.bot = null;
        this.chatId = config.telegram.adminChatId;
        this.isInitialized = false;
        
        // –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
        if (config.telegram.botToken && config.telegram.botToken !== 'your_bot_token_here') {
            this.initBot();
        } else {
            logger.warn('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
    }

    initBot() {
        try {
            this.bot = new TelegramBot(config.telegram.botToken, { polling: false });
            this.isInitialized = true;
            logger.info('‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞:', error);
            this.isInitialized = false;
        }
    }

    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2
    escapeMarkdownV2(text) {
        return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º Markdown
    formatForTelegram(text) {
        // –ó–∞–º–µ–Ω—è–µ–º **text** –Ω–∞ *text* –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram
        let formatted = text.replace(/\*\*(.*?)\*\*/g, '*$1*');
        
        // –£–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–∏–µ markdown —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
        formatted = formatted.replace(/#{1,6}\s/g, ''); // –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        formatted = formatted.replace(/```[\s\S]*?```/g, ''); // –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
        formatted = formatted.replace(/`([^`]+)`/g, '$1'); // –£–±–∏—Ä–∞–µ–º inline –∫–æ–¥
        
        return formatted;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–º–µ—Ç—ã –≤ Telegram –º–µ–Ω–µ–¥–∂–µ—Ä—É
    async sendEstimateToTelegram(estimate, sessionId) {
        if (!this.isInitialized || !this.bot) {
            logger.warn('Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É');
            return false;
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            const session = await PreChatForm.findOne({ sessionId });
            const clientInfo = session ? {
                name: session.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                position: session.position || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                industry: session.industry || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                budget: session.budget || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                timeline: session.timeline || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                contacts: session.contacts || {}
            } : null;

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó parse_mode –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
            let message = 'üéØ –ù–û–í–ê–Ø –°–ú–ï–¢–ê!\n\n';
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
            if (clientInfo) {
                message += 'üë§ –ö–õ–ò–ï–ù–¢:\n';
                message += `–ò–º—è: ${clientInfo.name}\n`;
                message += `–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${clientInfo.position}\n`;
                message += `–û—Ç—Ä–∞—Å–ª—å: ${clientInfo.industry}\n`;
                message += `–ë—é–¥–∂–µ—Ç: ${clientInfo.budget}\n`;
                message += `–°—Ä–æ–∫–∏: ${clientInfo.timeline}\n`;
                
                if (clientInfo.contacts.phone) {
                    message += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${clientInfo.contacts.phone}\n`;
                }
                if (clientInfo.contacts.email) {
                    message += `üìß Email: ${clientInfo.contacts.email}\n`;
                }
                if (clientInfo.contacts.telegram) {
                    message += `üí¨ Telegram: ${clientInfo.contacts.telegram}\n`;
                }
                
                message += '\n';
            }
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ—Ç–µ
            message += 'üí∞ –°–ú–ï–¢–ê:\n';
            message += `–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${estimate.totalCost.toLocaleString('ru-RU')} —Ä—É–±.\n`;
            message += `–í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ${estimate.totalHours} —á–∞—Å–æ–≤\n`;
            message += `–°—Ä–æ–∫: ${estimate.timeline}\n\n`;
            
            // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            message += 'üìã –°–û–°–¢–ê–í –†–ê–ë–û–¢:\n';
            estimate.components.forEach((component, index) => {
                message += `${index + 1}. ${component.name}\n`;
                message += `   ${component.description}\n`;
                message += `   –ß–∞—Å—ã: ${component.hours} | –°—Ç–æ–∏–º–æ—Å—Ç—å: ${component.cost.toLocaleString('ru-RU')} —Ä—É–±.\n\n`;
            });
            
            // –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            if (estimate.detectedFeatures && estimate.detectedFeatures.length > 0) {
                message += '‚úÖ –§–£–ù–ö–¶–ò–û–ù–ê–õ:\n';
                estimate.detectedFeatures.forEach(feature => {
                    message += `‚Ä¢ ${feature}\n`;
                });
                message += '\n';
            }
            
            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if (estimate.recommendations && estimate.recommendations.length > 0) {
                message += 'üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n';
                estimate.recommendations.forEach(rec => {
                    message += `‚Ä¢ ${rec}\n`;
                });
                message += '\n';
            }
            
            // ID —Å–µ—Å—Å–∏–∏
            message += `üîó ID —Å–µ—Å—Å–∏–∏: ${sessionId}\n`;
            message += `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`;

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            const keyboard = {
                inline_keyboard: [
                    [
                        { 
                            text: '‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–º–µ—Ç—É', 
                            callback_data: `approve_${sessionId}_${estimate._id || 'temp'}` 
                        }
                    ],
                    [
                        { 
                            text: 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 
                            callback_data: `edit_${sessionId}_${estimate._id || 'temp'}` 
                        },
                        { 
                            text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 
                            callback_data: `reject_${sessionId}_${estimate._id || 'temp'}` 
                        }
                    ]
                ]
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó parse_mode —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
            const sentMessage = await this.bot.sendMessage(this.chatId, message, {
                reply_markup: keyboard,
                disable_web_page_preview: true
            });

            logger.info('‚úÖ –°–º–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram', { 
                messageId: sentMessage.message_id,
                sessionId 
            });

            return true;

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º–µ—Ç—ã –≤ Telegram:', error);
            
            // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try {
                const simpleMessage = `–ù–æ–≤–∞—è —Å–º–µ—Ç–∞!\n–°–µ—Å—Å–∏—è: ${sessionId}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${estimate.totalCost} —Ä—É–±.\n–í—Ä–µ–º—è: ${estimate.totalHours} —á–∞—Å–æ–≤`;
                
                await this.bot.sendMessage(this.chatId, simpleMessage);
                logger.info('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–º–µ—Ç—ã');
                return true;
                
            } catch (retryError) {
                logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é:', retryError);
                return false;
            }
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç—É
    async sendApprovalNotification(sessionId, estimateId) {
        try {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
            // —á–µ—Ä–µ–∑ Telegram –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –µ–≥–æ chat_id
            
            logger.info('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–º–µ—Ç—ã', { sessionId, estimateId });
            
            return true;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            return false;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
    async sendMessageToManager(text) {
        if (!this.isInitialized || !this.bot) {
            logger.warn('Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }

        try {
            await this.bot.sendMessage(this.chatId, text);
            return true;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É:', error);
            return false;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
    async sendNewLeadNotification(formData, sessionId) {
        if (!this.isInitialized || !this.bot) {
            logger.warn('Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }

        try {
            let message = 'üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!\n\n';
            message += `üë§ –ò–º—è: ${formData.name}\n`;
            message += `üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${formData.position}\n`;
            message += `üè¢ –û—Ç—Ä–∞—Å–ª—å: ${formData.industry}\n`;
            message += `üí∞ –ë—é–¥–∂–µ—Ç: ${formData.budget}\n`;
            message += `‚è± –°—Ä–æ–∫–∏: ${formData.timeline}\n`;
            
            if (formData.contacts) {
                message += '\nüìû –ö–û–ù–¢–ê–ö–¢–´:\n';
                if (formData.contacts.phone) message += `üì± ${formData.contacts.phone}\n`;
                if (formData.contacts.email) message += `üìß ${formData.contacts.email}\n`;
                if (formData.contacts.telegram) message += `üí¨ ${formData.contacts.telegram}\n`;
            }
            
            message += `\nüîó ID —Å–µ—Å—Å–∏–∏: ${sessionId}`;

            await this.bot.sendMessage(this.chatId, message);
            
            logger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            return true;
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ:', error);
            return false;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–æ–∫)
    setupCallbackHandlers() {
        if (!this.bot) return;

        this.bot.on('callback_query', async (callbackQuery) => {
            const action = callbackQuery.data;
            const chatId = callbackQuery.message.chat.id;
            const messageId = callbackQuery.message.message_id;

            try {
                // –†–∞–∑–±–∏—Ä–∞–µ–º action
                const [command, sessionId, estimateId] = action.split('_');

                switch (command) {
                    case 'approve':
                        await this.handleApproveEstimate(chatId, messageId, sessionId, estimateId);
                        break;
                    case 'edit':
                        await this.handleEditEstimate(chatId, messageId, sessionId, estimateId);
                        break;
                    case 'reject':
                        await this.handleRejectEstimate(chatId, messageId, sessionId, estimateId);
                        break;
                }

                // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                await this.bot.answerCallbackQuery(callbackQuery.id);
                
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
                await this.bot.answerCallbackQuery(callbackQuery.id, {
                    text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
                    show_alert: true
                });
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç—ã
    async handleApproveEstimate(chatId, messageId, sessionId, estimateId) {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await this.bot.editMessageText(
                '‚úÖ –°–ú–ï–¢–ê –£–¢–í–ï–†–ñ–î–ï–ù–ê!\n\n–ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.',
                {
                    chat_id: chatId,
                    message_id: messageId
                }
            );

            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –ë–î
            // –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É

            logger.info('–°–º–µ—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', { sessionId, estimateId });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç—ã:', error);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ—Ç—ã  
    async handleEditEstimate(chatId, messageId, sessionId, estimateId) {
        try {
            await this.bot.sendMessage(
                chatId,
                `üìù –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n${config.adminPanelUrl}/estimates/${estimateId}`
            );
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã
    async handleRejectEstimate(chatId, messageId, sessionId, estimateId) {
        try {
            await this.bot.editMessageText(
                '‚ùå –°–ú–ï–¢–ê –û–¢–ö–õ–û–ù–ï–ù–ê',
                {
                    chat_id: chatId,
                    message_id: messageId
                }
            );

            logger.info('–°–º–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞', { sessionId, estimateId });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã:', error);
        }
    }
}

module.exports = new TelegramService();
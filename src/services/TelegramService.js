const TelegramBot = require('node-telegram-bot-api');
const config = require('../config');
const logger = require('../utils/logger');
const { PreChatForm } = require('../models');

class TelegramService {
    constructor() {
        this.bot = null;
        this.chatId = config.telegram.adminChatId;
        this.isInitialized = false;
        
        // –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
        if (config.telegram.token && config.telegram.token !== 'your_bot_token_here') {
            this.initBot();
        } else {
            logger.warn('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
    }

    initBot() {
        try {
            // –í–∫–ª—é—á–∞–µ–º polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            this.bot = new TelegramBot(config.telegram.token, { 
                polling: {
                    interval: 300,
                    autoStart: true,
                    params: {
                        timeout: 10
                    }
                }
            });
            this.isInitialized = true;
            logger.info('‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å polling');
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
            this.bot.on('polling_error', (error) => {
                logger.error('–û—à–∏–±–∫–∞ polling:', error);
            });
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            this.setupCallbackHandlers();
            
            // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            this.bot.on('message', (msg) => {
                logger.info('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram:', {
                    from: msg.from.username || msg.from.id,
                    text: msg.text?.substring(0, 50) || '–±–µ–∑ —Ç–µ–∫—Å—Ç–∞'
                });
            });
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞:', error);
            this.isInitialized = false;
        }
    }

    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2
    escapeMarkdownV2(text) {
        return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º Markdown
    formatForTelegram(text) {
        // –ó–∞–º–µ–Ω—è–µ–º **text** –Ω–∞ *text* –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram
        let formatted = text.replace(/\*\*(.*?)\*\*/g, '*$1*');
        
        // –£–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–∏–µ markdown —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
        formatted = formatted.replace(/#{1,6}\s/g, ''); // –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        formatted = formatted.replace(/```[\s\S]*?```/g, ''); // –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
        formatted = formatted.replace(/`([^`]+)`/g, '$1'); // –£–±–∏—Ä–∞–µ–º inline –∫–æ–¥
        
        return formatted;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–º–µ—Ç—ã –≤ Telegram –º–µ–Ω–µ–¥–∂–µ—Ä—É
    async sendEstimateToTelegram(estimate, sessionId) {
        if (!this.isInitialized || !this.bot) {
            logger.warn('Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É');
            return false;
        }

        try {
            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É estimate –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ estimate:', {
                hasEstimate: !!estimate,
                estimateKeys: estimate ? Object.keys(estimate) : [],
                totalCost: estimate?.totalCost,
                totalHours: estimate?.totalHours,
                componentsCount: estimate?.components?.length || 0
            });
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            const session = await PreChatForm.findOne({ sessionId });
            const clientInfo = session ? {
                name: session.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                position: session.position || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                industry: session.industry || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                budget: session.budget || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                timeline: session.timeline || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                contacts: session.contacts || {}
            } : null;

            // –ö–†–ê–¢–ö–û–ï –°–û–û–ë–©–ï–ù–ò–ï –≤ Telegram
            let message = 'üéØ –ù–æ–≤–∞—è —Å–º–µ—Ç–∞!\n';
            message += `–°–µ—Å—Å–∏—è: ${sessionId}\n`;
            message += `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${estimate?.totalCost || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'} —Ä—É–±.\n`;
            message += `–í—Ä–µ–º—è: ${estimate?.totalHours || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} —á–∞—Å–æ–≤\n\n`;
            
            // –î–∞–Ω–Ω—ã–µ –∏–∑ –±—ã—Å—Ç—Ä–æ–π –∞–Ω–∫–µ—Ç—ã
            if (clientInfo) {
                message += 'üë§ –î–∞–Ω–Ω—ã–µ –∏–∑ –±—ã—Å—Ç—Ä–æ–π –∞–Ω–∫–µ—Ç—ã:\n';
                message += `–ò–º—è: ${clientInfo.name}\n`;
                message += `–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${clientInfo.position}\n`;
                message += `–û—Ç—Ä–∞—Å–ª—å: ${clientInfo.industry}\n`;
                message += `–ë—é–¥–∂–µ—Ç: ${clientInfo.budget}\n`;
                message += `–°—Ä–æ–∫–∏: ${clientInfo.timeline}\n`;
                
                if (clientInfo.contacts.phone) {
                    message += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${clientInfo.contacts.phone}\n`;
                }
                if (clientInfo.contacts.email) {
                    message += `üìß Email: ${clientInfo.contacts.email}\n`;
                }
                if (clientInfo.contacts.telegram) {
                    message += `üí¨ Telegram: ${clientInfo.contacts.telegram}\n`;
                }
            }

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            const keyboard = {
                inline_keyboard: [
                    [
                        { 
                            text: '‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–º–µ—Ç—É', 
                            callback_data: `approve_${sessionId}_${estimate._id || 'temp'}` 
                        }
                    ],
                    [
                        { 
                            text: 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 
                            callback_data: `edit_${sessionId}_${estimate._id || 'temp'}` 
                        },
                        { 
                            text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 
                            callback_data: `reject_${sessionId}_${estimate._id || 'temp'}` 
                        }
                    ]
                ]
            };

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const sentMessage = await this.bot.sendMessage(this.chatId, message, {
                reply_markup: keyboard,
                disable_web_page_preview: true
            });

            logger.info('‚úÖ –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', { 
                messageId: sentMessage.message_id,
                sessionId 
            });

            // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª—ã
            await this.createAndSendPDFFiles(estimate, session, sessionId, clientInfo);

            return true;

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º–µ—Ç—ã –≤ Telegram:', error);
            
            // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try {
                const cost = estimate?.totalCost || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';
                const hours = estimate?.totalHours || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã';
                const simpleMessage = `–ù–æ–≤–∞—è —Å–º–µ—Ç–∞!\n–°–µ—Å—Å–∏—è: ${sessionId}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost} —Ä—É–±.\n–í—Ä–µ–º—è: ${hours} —á–∞—Å–æ–≤`;
                
                await this.bot.sendMessage(this.chatId, simpleMessage);
                logger.info('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–º–µ—Ç—ã');
                return true;
                
            } catch (retryError) {
                logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é:', retryError);
                return false;
            }
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ PDF —Ñ–∞–π–ª–æ–≤
    async createAndSendPDFFiles(estimate, session, sessionId, clientInfo) {
        const PDFService = require('./PDFService');
        
        try {
            logger.info('üìÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞');
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞)
            const managerPdfPath = await PDFService.generateManagerPDF(estimate, session, clientInfo, sessionId);
            
            logger.info('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –º–µ–Ω–µ–¥–∂–µ—Ä—É');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª –º–µ–Ω–µ–¥–∂–µ—Ä—É
            await this.bot.sendDocument(
                this.chatId, 
                managerPdfPath,
                {
                    caption: 'üìä –°–º–µ—Ç–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤\n\n' +
                            `üë§ –ö–ª–∏–µ–Ω—Ç: ${clientInfo?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                            `üí∞ –°—É–º–º–∞: ${estimate?.totalCost?.toLocaleString('ru-RU') || 0} ‚ÇΩ\n` +
                            `‚è± –°—Ä–æ–∫: ${estimate?.timeline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`
                },
                {
                    filename: `–°–º–µ—Ç–∞_${clientInfo?.name?.replace(/[^–∞-—è–ê-–Øa-zA-Z0-9]/g, '_') || sessionId}_${new Date().toISOString().split('T')[0]}.pdf`,
                    contentType: 'application/pdf'
                }
            );
            
            logger.info('‚úÖ PDF —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É');
            
            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
            setTimeout(async () => {
                await PDFService.cleanupTempFiles([managerPdfPath]);
            }, 30000);
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏ PDF —Ñ–∞–π–ª–æ–≤:', error);
            throw error;
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    generateDialogHtml(session, clientInfo, sessionId) {
        const currentDate = new Date().toLocaleString('ru-RU');
        
        let html = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ - ${clientInfo?.name || sessionId}</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 20px; line-height: 1.6; color: #333; }
        .header { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .client-info { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px; margin: 15px 0; }
        .message { margin: 15px 0; padding: 15px; border-radius: 12px; max-width: 80%; }
        .user-message { background: #e3f2fd; margin-left: auto; border-bottom-right-radius: 4px; }
        .bot-message { background: #f1f8e9; margin-right: auto; border-bottom-left-radius: 4px; }
        .message-header { font-size: 0.9em; color: #666; margin-bottom: 8px; font-weight: 500; }
        .message-content { white-space: pre-wrap; }
        .timestamp { font-size: 0.8em; color: #999; margin-top: 5px; }
        h1 { color: #1976d2; margin: 0; }
        h2 { color: #388e3c; margin: 20px 0 10px 0; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üìù –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞</h1>
        <div class="client-info">
            <div><strong>üë§ –ö–ª–∏–µ–Ω—Ç:</strong> ${clientInfo?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
            <div><strong>üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å:</strong> ${clientInfo?.position || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
            <div><strong>üè¢ –û—Ç—Ä–∞—Å–ª—å:</strong> ${clientInfo?.industry || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
            <div><strong>üí∞ –ë—é–¥–∂–µ—Ç:</strong> ${clientInfo?.budget || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
            <div><strong>‚è± –°—Ä–æ–∫–∏:</strong> ${clientInfo?.timeline || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
            <div><strong>üìÖ –î–∞—Ç–∞:</strong> ${currentDate}</div>
        </div>`;
        
        if (clientInfo?.contacts) {
            html += `<div class="client-info"><h3>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:</h3>`;
            if (clientInfo.contacts.phone) html += `<div><strong>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${clientInfo.contacts.phone}</div>`;
            if (clientInfo.contacts.email) html += `<div><strong>üìß Email:</strong> ${clientInfo.contacts.email}</div>`;
            if (clientInfo.contacts.telegram) html += `<div><strong>üí¨ Telegram:</strong> ${clientInfo.contacts.telegram}</div>`;
            html += `</div>`;
        }
        
        html += `</div>`;
        
        html += `<h2>üí¨ –î–∏–∞–ª–æ–≥</h2>`;
        
        if (session?.chatHistory && session.chatHistory.length > 0) {
            session.chatHistory.forEach((msg, index) => {
                const timestamp = msg.timestamp ? new Date(msg.timestamp).toLocaleString('ru-RU') : '';
                const isUser = msg.role === 'user';
                
                html += `
                <div class="message ${isUser ? 'user-message' : 'bot-message'}">
                    <div class="message-header">${isUser ? 'üë§ –ö–ª–∏–µ–Ω—Ç' : 'ü§ñ –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'}</div>
                    <div class="message-content">${this.escapeHtml(msg.content)}</div>
                    ${timestamp ? `<div class="timestamp">${timestamp}</div>` : ''}
                </div>`;
            });
        } else {
            html += `<p>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞</p>`;
        }
        
        html += `
    <div style="margin-top: 40px; padding: 15px; background: #f5f5f5; border-radius: 8px; font-size: 0.9em; color: #666;">
        <strong>üîó ID —Å–µ—Å—Å–∏–∏:</strong> ${sessionId}<br>
        <strong>üìÖ –≠–∫—Å–ø–æ—Ä—Ç:</strong> ${currentDate}
    </div>
</body>
</html>`;
        
        return html;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è —Å–º–µ—Ç—ã
    generateEstimateHtml(estimate, clientInfo, sessionId) {
        const currentDate = new Date().toLocaleString('ru-RU');
        
        let html = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–º–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ - ${clientInfo?.name || sessionId}</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 20px; line-height: 1.6; color: #333; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 12px; margin-bottom: 30px; }
        .summary { background: #fff3e0; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #ff9800; }
        .components { margin: 20px 0; }
        .component { background: white; border: 1px solid #e0e0e0; border-radius: 8px; margin: 10px 0; padding: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .component-header { display: flex; justify-content: space-between; align-items: start; margin-bottom: 10px; }
        .component-name { font-weight: 600; color: #1976d2; font-size: 1.1em; }
        .component-cost { background: #4caf50; color: white; padding: 5px 12px; border-radius: 20px; font-weight: 500; }
        .component-details { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 15px 0; }
        .component-description { color: #666; margin: 10px 0; }
        .total-box { background: linear-gradient(135deg, #4caf50 0%, #45a049 100%); color: white; padding: 25px; border-radius: 12px; text-align: center; margin: 30px 0; }
        .features-list { columns: 2; column-gap: 30px; }
        .features-list li { margin: 5px 0; break-inside: avoid; }
        h1 { margin: 0; font-size: 2em; }
        h2 { color: #1976d2; border-bottom: 2px solid #e3f2fd; padding-bottom: 10px; }
        .client-info { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin: 20px 0; }
        .badge { display: inline-block; padding: 4px 8px; border-radius: 12px; font-size: 0.8em; font-weight: 500; }
        .badge-low { background: #e8f5e8; color: #2e7d32; }
        .badge-medium { background: #fff3e0; color: #f57c00; }
        .badge-high { background: #fce4ec; color: #c2185b; }
        .badge-very-high { background: #f3e5f5; color: #7b1fa2; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üí∞ –°–º–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ Telegram-–±–æ—Ç–∞</h1>
        <div class="client-info">
            <div><strong>üë§ –ö–ª–∏–µ–Ω—Ç:</strong> ${clientInfo?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
            <div><strong>üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å:</strong> ${clientInfo?.position || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
            <div><strong>üè¢ –û—Ç—Ä–∞—Å–ª—å:</strong> ${clientInfo?.industry || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
            <div><strong>üìÖ –î–∞—Ç–∞:</strong> ${currentDate}</div>
        </div>
    </div>`;
        
        // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        html += `
    <div class="total-box">
        <h2 style="margin: 0 0 15px 0; color: white; border: none;">üìä –ò—Ç–æ–≥–æ –ø–æ –ø—Ä–æ–µ–∫—Ç—É</h2>
        <div style="font-size: 2.5em; margin: 10px 0;">${estimate?.totalCost ? estimate.totalCost.toLocaleString('ru-RU') : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'} ‚ÇΩ</div>
        <div style="font-size: 1.2em; opacity: 0.9;">
            ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ${estimate?.totalHours || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} —á–∞—Å–æ–≤<br>
            üìÖ –°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: ${estimate?.timeline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
        </div>
    </div>`;
        
        // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–º–µ—Ç—ã
        if (estimate?.components && estimate.components.length > 0) {
            html += `<h2>üìã –°–æ—Å—Ç–∞–≤ —Ä–∞–±–æ—Ç</h2><div class="components">`;
            
            estimate.components.forEach((component, index) => {
                const complexityBadge = this.getComplexityBadge(component.complexity);
                
                html += `
                <div class="component">
                    <div class="component-header">
                        <div class="component-name">${index + 1}. ${this.escapeHtml(component.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</div>
                        <div class="component-cost">${component.cost ? component.cost.toLocaleString('ru-RU') : 0} ‚ÇΩ</div>
                    </div>
                    <div class="component-description">${this.escapeHtml(component.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}</div>
                    <div class="component-details">
                        <div><strong>‚è±Ô∏è –í—Ä–µ–º—è:</strong> ${component.hours || 0} —á–∞—Å–æ–≤</div>
                        <div><strong>üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${component.category || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
                        <div><strong>üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å:</strong> ${complexityBadge}</div>
                    </div>
                </div>`;
            });
            
            html += `</div>`;
        }
        
        // –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if (estimate?.detectedFeatures && estimate.detectedFeatures.length > 0) {
            html += `
            <h2>‚úÖ –í—ã—è–≤–ª–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª</h2>
            <ul class="features-list">`;
            
            estimate.detectedFeatures.forEach(feature => {
                html += `<li>${this.escapeHtml(feature)}</li>`;
            });
            
            html += `</ul>`;
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (estimate?.recommendations && estimate.recommendations.length > 0) {
            html += `
            <h2>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
            <ul>`;
            
            estimate.recommendations.forEach(rec => {
                html += `<li>${this.escapeHtml(rec)}</li>`;
            });
            
            html += `</ul>`;
        }
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–∑–Ω–µ—Å–µ
        if (estimate?.businessType) {
            html += `
            <div class="summary">
                <h3>üè¢ –¢–∏–ø –±–∏–∑–Ω–µ—Å–∞</h3>
                <p>${this.escapeHtml(estimate.businessType)}</p>
            </div>`;
        }
        
        html += `
    <div style="margin-top: 40px; padding: 20px; background: #f5f5f5; border-radius: 8px; font-size: 0.9em; color: #666;">
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
            <div><strong>üîó ID —Å–µ—Å—Å–∏–∏:</strong> ${sessionId}</div>
            <div><strong>üìÖ –°–æ–∑–¥–∞–Ω–æ:</strong> ${currentDate}</div>
            <div><strong>üíº –ö–æ–º–ø–∞–Ω–∏—è:</strong> –°–æ–∑–¥–∞–π–ë–æ—Ç–∞</div>
            <div><strong>üìß Email:</strong> info@sozdaibota.ru</div>
        </div>
    </div>
</body>
</html>`;
        
        return html;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –±–µ–π–¥–∂ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    getComplexityBadge(complexity) {
        const badges = {
            'low': '<span class="badge badge-low">–ù–∏–∑–∫–∞—è</span>',
            'medium': '<span class="badge badge-medium">–°—Ä–µ–¥–Ω—è—è</span>',
            'high': '<span class="badge badge-high">–í—ã—Å–æ–∫–∞—è</span>',
            'very_high': '<span class="badge badge-very-high">–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è</span>'
        };
        
        return badges[complexity] || '<span class="badge badge-medium">–ù–µ —É–∫–∞–∑–∞–Ω–∞</span>';
    }

    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
    escapeHtml(text) {
        if (!text) return '';
        return text
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#039;');
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç—É
    async sendApprovalNotification(sessionId, estimateId) {
        try {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
            // —á–µ—Ä–µ–∑ Telegram –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –µ–≥–æ chat_id
            
            logger.info('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–º–µ—Ç—ã', { sessionId, estimateId });
            
            return true;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            return false;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
    async sendMessageToManager(text) {
        if (!this.isInitialized || !this.bot) {
            logger.warn('Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }

        try {
            await this.bot.sendMessage(this.chatId, text);
            return true;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É:', error);
            return false;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
    async sendNewLeadNotification(formData, sessionId) {
        if (!this.isInitialized || !this.bot) {
            logger.warn('Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }

        try {
            let message = 'üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!\n\n';
            message += `üë§ –ò–º—è: ${formData.name}\n`;
            message += `üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${formData.position}\n`;
            message += `üè¢ –û—Ç—Ä–∞—Å–ª—å: ${formData.industry}\n`;
            message += `üí∞ –ë—é–¥–∂–µ—Ç: ${formData.budget}\n`;
            message += `‚è± –°—Ä–æ–∫–∏: ${formData.timeline}\n`;
            
            if (formData.contacts) {
                message += '\nüìû –ö–û–ù–¢–ê–ö–¢–´:\n';
                if (formData.contacts.phone) message += `üì± ${formData.contacts.phone}\n`;
                if (formData.contacts.email) message += `üìß ${formData.contacts.email}\n`;
                if (formData.contacts.telegram) message += `üí¨ ${formData.contacts.telegram}\n`;
            }
            
            message += `\nüîó ID —Å–µ—Å—Å–∏–∏: ${sessionId}`;

            await this.bot.sendMessage(this.chatId, message);
            
            logger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            return true;
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ:', error);
            return false;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–æ–∫)
    setupCallbackHandlers() {
        if (!this.bot) return;

        this.bot.on('callback_query', async (callbackQuery) => {
            const action = callbackQuery.data;
            const chatId = callbackQuery.message.chat.id;
            const messageId = callbackQuery.message.message_id;
            
            logger.info('üì± –ü–æ–ª—É—á–µ–Ω callback –æ—Ç –∫–Ω–æ–ø–∫–∏', {
                action: action,
                from: callbackQuery.from.username || callbackQuery.from.id,
                messageId: messageId
            });

            try {
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ sessionId
                // action format: approve_session_1749418553906_8cpbqtqbh_temp
                const parts = action.split('_');
                const command = parts[0]; // approve
                
                // –°–æ–±–∏—Ä–∞–µ–º sessionId –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ —á–∞—Å—Ç–µ–π
                let sessionId = '';
                let estimateId = '';
                
                if (parts[1] === 'session' && parts.length >= 4) {
                    // sessionId = session_1749418553906_8cpbqtqbh
                    sessionId = `${parts[1]}_${parts[2]}_${parts[3]}`;
                    estimateId = parts[4] || 'temp';
                } else {
                    // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    sessionId = parts[1];
                    estimateId = parts[2];
                }
                
                logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã', { command, sessionId, estimateId });

                switch (command) {
                    case 'approve':
                        await this.handleApproveEstimate(chatId, messageId, sessionId, estimateId);
                        break;
                    case 'edit':
                        await this.handleEditEstimate(chatId, messageId, sessionId, estimateId);
                        break;
                    case 'reject':
                        await this.handleRejectEstimate(chatId, messageId, sessionId, estimateId);
                        break;
                    default:
                        logger.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ callback:', command);
                }

                // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                await this.bot.answerCallbackQuery(callbackQuery.id, {
                    text: '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
                    show_alert: false
                });
                
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
                await this.bot.answerCallbackQuery(callbackQuery.id, {
                    text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
                    show_alert: true
                });
            }
        });
        
        logger.info('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç—ã
    async handleApproveEstimate(chatId, messageId, sessionId, estimateId) {
        try {
            logger.info('üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç—ã', { sessionId, estimateId });
            
            // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é
            const session = await PreChatForm.findOne({ sessionId });
            
            if (!session) {
                logger.error('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–º–µ—Ç—ã', { sessionId });
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }
            
            logger.info('‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å', {
                sessionId,
                currentStatus: {
                    estimateApproved: session.estimateApproved,
                    estimateSent: session.estimateSent
                }
            });
            
            // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            await this.bot.editMessageText(
                '‚úÖ –°–ú–ï–¢–ê –£–¢–í–ï–†–ñ–î–ï–ù–ê!\n\n–ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞...',
                {
                    chat_id: chatId,
                    message_id: messageId
                }
            );
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            const PDFService = require('./PDFService');
            
            try {
                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è PDF
                const clientInfo = {
                    name: session.name,
                    position: session.position,
                    industry: session.industry,
                    budget: session.budget,
                    timeline: session.timeline,
                    contacts: session.contacts
                };
                
                const estimate = {
                    totalCost: session.estimateData?.totalCost || 0,
                    totalHours: session.estimateData?.totalHours || 0,
                    timeline: session.estimateData?.timeline || session.timeline || '2-3 –Ω–µ–¥–µ–ª–∏',
                    components: session.estimateData?.components || [],
                    detectedFeatures: session.estimateData?.features || [],
                    businessType: session.estimateData?.businessType || session.industry,
                    recommendations: session.estimateData?.recommendations || []
                };
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞)
                const clientPdfPath = await PDFService.generateClientPDF(estimate, clientInfo, sessionId);
                
                logger.info('üìÑ PDF –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω', { clientPdfPath });
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                const totalCost = session.estimateData?.totalCost || '—É—Ç–æ—á–Ω—è–µ—Ç—Å—è —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞';
                const totalHours = session.estimateData?.totalHours || '—É—Ç–æ—á–Ω—è–µ—Ç—Å—è —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞';
                const timeline = session.estimateData?.timeline || '2-3 –Ω–µ–¥–µ–ª–∏';
                
                let approvedEstimateMessage = `‚úÖ **–í–∞—à–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!**\n\n`;
                approvedEstimateMessage += `üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞:** ${typeof totalCost === 'number' ? totalCost.toLocaleString('ru-RU') : totalCost} ‚ÇΩ\n`;
                approvedEstimateMessage += `‚è±Ô∏è **–í—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:** ${typeof totalHours === 'number' ? totalHours + ' —á–∞—Å–æ–≤' : totalHours}\n`;
                approvedEstimateMessage += `üìÖ **–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:** ${timeline}\n\n`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤ —Ä–∞–±–æ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
                if (session.estimateData?.features && session.estimateData.features.length > 0) {
                    approvedEstimateMessage += `üìã **–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç:**\n`;
                    session.estimateData.features.forEach(feature => {
                        approvedEstimateMessage += `‚Ä¢ ${feature}\n`;
                    });
                    approvedEstimateMessage += '\n';
                }
                
                approvedEstimateMessage += `üìÑ **PDF –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–ª–Ω—ã–º –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.**\n\n`;
                approvedEstimateMessage += `**–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**\n`;
                approvedEstimateMessage += `1. –°–∫–∞—á–∞–π—Ç–µ –∏ –∏–∑—É—á–∏—Ç–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n`;
                approvedEstimateMessage += `2. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π\n`;
                approvedEstimateMessage += `3. –ü–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—à–µ–º –¥–æ–≥–æ–≤–æ—Ä\n`;
                approvedEstimateMessage += `4. –ù–∞—á–Ω–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ –±–æ—Ç–∞\n\n`;
                approvedEstimateMessage += `üìû –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.\n\n`;
                approvedEstimateMessage += `–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –Ω–∞–ø–∏—à–∏—Ç–µ –∑–¥–µ—Å—å –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.`;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –ø—É—Ç—å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ chatHistory
                session.chatHistory.push({
                    role: 'assistant',
                    content: approvedEstimateMessage,
                    timestamp: new Date(),
                    metadata: {
                        messageType: 'approved_estimate',
                        approvedAt: new Date(),
                        estimateId: estimateId,
                        pdfPath: clientPdfPath
                    }
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
                session.estimateApproved = true;
                session.estimateApprovedAt = new Date();
                session.approvedEstimateId = estimateId;
                
                // –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ—Å—Ç–∞–≤–∫–∏ —á—Ç–æ–±—ã SSE –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É
                session.estimateDeliveredToClient = false;
                
                const savedSession = await session.save();
                
                logger.info('‚úÖ –°–º–µ—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î', { 
                    sessionId,
                    estimateApproved: savedSession.estimateApproved,
                    approvedAt: savedSession.estimateApprovedAt
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                await this.bot.editMessageText(
                    '‚úÖ –°–ú–ï–¢–ê –£–¢–í–ï–†–ñ–î–ï–ù–ê!\n\n' +
                    `PDF –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n` +
                    `ID —Å–µ—Å—Å–∏–∏: ${sessionId}\n\n` +
                    `‚ú® –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç PDF —Å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤ —á–∞—Ç–µ.`,
                    {
                        chat_id: chatId,
                        message_id: messageId
                    }
                );
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å PDF
                await this.bot.sendDocument(
                    chatId,
                    clientPdfPath,
                    {
                        caption: `‚úÖ PDF –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤\n` +
                                `üìß –ö–ª–∏–µ–Ω—Ç: ${clientInfo.name}\n` +
                                `üí∞ –°—É–º–º–∞: ${totalCost} ‚ÇΩ\n` +
                                `üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${this.formatContacts(clientInfo.contacts)}`
                    },
                    {
                        filename: `–ö–ü_–¥–ª—è_–∫–ª–∏–µ–Ω—Ç–∞_${clientInfo.name?.replace(/[^–∞-—è–ê-–Øa-zA-Z0-9]/g, '_') || sessionId}.pdf`,
                        contentType: 'application/pdf'
                    }
                );
                
                // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
                setTimeout(async () => {
                    await PDFService.cleanupTempFiles([clientPdfPath]);
                }, 60000);
                
            } catch (pdfError) {
                logger.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:', pdfError);
                
                // –í—Å–µ —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –Ω–æ –±–µ–∑ PDF
                session.estimateApproved = true;
                session.estimateApprovedAt = new Date();
                session.approvedEstimateId = estimateId;
                session.estimateDeliveredToClient = false;
                await session.save();

                await this.bot.sendMessage(
                    chatId,
                    '‚ö†Ô∏è –°–º–µ—Ç–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF.\n' +
                    '–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.'
                );
            }
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç—ã:', error);
            
            try {
                await this.bot.sendMessage(
                    chatId, 
                    `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–º–µ—Ç—ã:\n${error.message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.`
                );
            } catch (sendError) {
                logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', sendError);
            }
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    formatContacts(contacts) {
        if (!contacts) return '–ù–µ —É–∫–∞–∑–∞–Ω—ã';
        
        const formatted = [];
        if (contacts.Telegram || contacts.telegram) {
            formatted.push(`TG: ${contacts.Telegram || contacts.telegram}`);
        }
        if (contacts['–¢–µ–ª–µ—Ñ–æ–Ω'] || contacts.phone) {
            formatted.push(`Tel: ${contacts['–¢–µ–ª–µ—Ñ–æ–Ω'] || contacts.phone}`);
        }
        if (contacts.Email || contacts.email) {
            formatted.push(`Email: ${contacts.Email || contacts.email}`);
        }
        
        return formatted.length > 0 ? formatted.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã';
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ—Ç—ã  
    async handleEditEstimate(chatId, messageId, sessionId, estimateId) {
        try {
            await this.bot.sendMessage(
                chatId,
                `üìù –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n${config.adminPanelUrl}/estimates/${estimateId}`
            );
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã
    async handleRejectEstimate(chatId, messageId, sessionId, estimateId) {
        try {
            await this.bot.editMessageText(
                '‚ùå –°–ú–ï–¢–ê –û–¢–ö–õ–û–ù–ï–ù–ê',
                {
                    chat_id: chatId,
                    message_id: messageId
                }
            );

            logger.info('–°–º–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞', { sessionId, estimateId });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–º–µ—Ç—ã:', error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    getBotInfo() {
        return {
            ready: this.isInitialized,
            hasToken: !!config.telegram.token,
            hasChatId: !!this.chatId,
            status: this.isInitialized ? 'active' : 'inactive',
            message: this.isInitialized 
                ? 'Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' 
                : 'Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
        };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    isReady() {
        return this.isInitialized && this.bot !== null;
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
    async shutdown() {
        try {
            if (this.bot) {
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
                if (this.bot.isPolling && this.bot.isPolling()) {
                    await this.bot.stopPolling();
                }
                
                logger.info('Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
            
            this.isInitialized = false;
            this.bot = null;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –±–æ—Ç–∞:', error);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏ –æ–±—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
    async sendNotification(text) {
        if (!this.isInitialized || !this.bot) {
            logger.warn('Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return false;
        }

        try {
            await this.bot.sendMessage(this.chatId, text);
            return true;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            return false;
        }
    }

    // –ê–ª–∏–∞—Å –¥–ª—è sendNewLeadNotification –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async sendLeadNotification(formData, sessionId) {
        return this.sendNewLeadNotification(formData, sessionId);
    }

    // –ê–ª–∏–∞—Å –¥–ª—è sendMessageToManager
    async sendEstimateToManager(estimate, sessionId) {
        return this.sendEstimateToTelegram(estimate, sessionId);
    }
}

module.exports = new TelegramService();
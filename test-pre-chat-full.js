const axios = require('axios');

const BASE_URL = 'http://localhost:3001';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
const testFormData = {
    name: '–ê–ª–µ–∫—Å–µ–π –¢–µ—Å—Ç–æ–≤',
    contactInfo: 'test@example.com',
    position: '–î–∏—Ä–µ–∫—Ç–æ—Ä',
    industry: 'E-commerce / –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω',
    budget: '50 000 - 100 000‚ÇΩ',
    preferredChannels: ['Telegram', 'Email'],
    timeline: '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ (2-3 –Ω–µ–¥–µ–ª–∏)'
};

async function testFullWorkflow() {
    console.log('üöÄ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±—ã—Å—Ç—Ä–æ–π –∞–Ω–∫–µ—Ç—ã');
    console.log('==============================================\n');

    try {
        // 1. –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã
        console.log('1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã...');
        const formResponse = await axios.post(`${BASE_URL}/api/pre-chat-form`, testFormData);
        
        if (formResponse.data.success) {
            console.log('‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
            console.log('üìù Session ID:', formResponse.data.sessionId);
            console.log('üí¨ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ GPT:');
            console.log('   ', formResponse.data.welcomeMessage);
            
            const sessionId = formResponse.data.sessionId;
            
            // 2. –î–∏–∞–ª–æ–≥ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            const messages = [
                '–ú–Ω–µ –Ω—É–∂–µ–Ω –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ –º–æ–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ. –ö–ª–∏–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –æ–Ω–ª–∞–π–Ω.',
                '–£ –Ω–∞—Å –æ–∫–æ–ª–æ 500 —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ. –ù—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ω–∞—à–µ–π CRM —Å–∏—Å—Ç–µ–º–æ–π –∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.',
                '–¢–∞–∫–∂–µ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Å–∫–∏–¥–æ–∫ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.',
                '–ö–æ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å?'
            ];
            
            for (let i = 0; i < messages.length; i++) {
                console.log(`\n${i + 2}Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ${i + 1}...`);
                console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', messages[i]);
                
                const messageResponse = await axios.post(`${BASE_URL}/api/pre-chat-message`, {
                    sessionId: sessionId,
                    message: messages[i]
                });
                
                if (messageResponse.data.success) {
                    console.log('ü§ñ GPT –æ—Ç–≤–µ—Ç:');
                    console.log('   ', messageResponse.data.message);
                    console.log('üìä Lead Score:', messageResponse.data.leadScore);
                } else {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageResponse.data.error);
                }
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
            // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
            console.log('\n6Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞...');
            const historyResponse = await axios.get(`${BASE_URL}/api/pre-chat-history/${sessionId}`);
            
            if (historyResponse.data.success) {
                console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞');
                console.log('üìã –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:');
                console.log('   - –ò–º—è:', historyResponse.data.formData.name);
                console.log('   - –û—Ç—Ä–∞—Å–ª—å:', historyResponse.data.formData.industry);
                console.log('   - –ë—é–¥–∂–µ—Ç:', historyResponse.data.formData.budget);
                console.log('üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ:', historyResponse.data.chatHistory.length);
                console.log('üìä –§–∏–Ω–∞–ª—å–Ω—ã–π Lead Score:', historyResponse.data.leadScore);
                console.log('üîÑ –°—Ç–∞—Ç—É—Å:', historyResponse.data.status);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                console.log('\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:');
                const lastMessages = historyResponse.data.chatHistory.slice(-4);
                lastMessages.forEach((msg, index) => {
                    const role = msg.role === 'user' ? 'üë§' : 'ü§ñ';
                    const preview = msg.content.length > 100 ? msg.content.substring(0, 100) + '...' : msg.content;
                    console.log(`   ${role} ${msg.role}: ${preview}`);
                });
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', historyResponse.data.error);
            }
            
            // 4. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            console.log('\n7Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
            const analyticsResponse = await axios.get(`${BASE_URL}/api/pre-chat-analytics`);
            
            if (analyticsResponse.data.success) {
                console.log('‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞');
                console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
                console.log('   - –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π:', analyticsResponse.data.totalSessions);
                console.log('   - –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤:', analyticsResponse.data.activeChats);
                console.log('   - –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤:', analyticsResponse.data.qualifiedLeads);
                console.log('   - –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä:', analyticsResponse.data.avgScore.toFixed(2));
                console.log('   - –ö–æ–Ω–≤–µ—Ä—Å–∏—è:', analyticsResponse.data.conversionRate + '%');
                
                if (analyticsResponse.data.industryStats.length > 0) {
                    console.log('   - –¢–æ–ø –æ—Ç—Ä–∞—Å–ª–∏:');
                    analyticsResponse.data.industryStats.slice(0, 3).forEach(stat => {
                        console.log(`     ‚Ä¢ ${stat._id}: ${stat.count} —Å–µ—Å—Å–∏–π`);
                    });
                }
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', analyticsResponse.data.error);
            }
            
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã:', formResponse.data.error);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
        if (error.response) {
            console.error('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
        }
    }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
(async () => {
    console.log('üéØ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –±—ã—Å—Ç—Ä–æ–π –∞–Ω–∫–µ—Ç—ã\n');
    
    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    await testFullWorkflow();
    
    console.log('\nüéâ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüí° –°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä–æ–π –∞–Ω–∫–µ—Ç—ã –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:');
    console.log('   ‚Ä¢ –§–æ—Ä–º–∞ –∞–Ω–∫–µ—Ç—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π ‚úÖ');
    console.log('   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ GPT –æ—Ç–≤–µ—Ç—ã ‚úÖ');
    console.log('   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π Lead Scoring ‚úÖ');
    console.log('   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ ‚úÖ');
    console.log('   ‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã ‚úÖ');
})(); 
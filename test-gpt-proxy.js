// test-gpt-proxy.js - –¢–µ—Å—Ç GPT API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
require('dotenv').config();
const axios = require('axios');

async function testGPTWithProxy() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º GPT API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
        
        const testData = {
            message: "–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞",
            conversation: [],
            sessionId: "test-session-" + Date.now()
        };
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT...');
        const response = await axios.post('http://localhost:3001/api/gpt-assistant', testData);
        
        if (response.data.success) {
            console.log('‚úÖ GPT API —Ä–∞–±–æ—Ç–∞–µ—Ç!');
            console.log('ü§ñ –û—Ç–≤–µ—Ç:', response.data.message);
            console.log('‚ö° –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã:', response.data.quickReplies);
            
            if (response.data.usage) {
                console.log('üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:', response.data.usage);
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞:', response.data.error);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ GPT:', error.message);
        
        if (error.response) {
            console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
        }
    }
}

async function testHealthEndpoint() {
    try {
        console.log('\nüè• –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint...');
        const response = await axios.get('http://localhost:3001/api/health');
        
        console.log('‚úÖ Health check —É—Å–ø–µ—à–µ–Ω!');
        console.log('üìã –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:');
        console.log('  - –°–µ—Ä–≤–∏—Å:', response.data.service);
        console.log('  - MongoDB:', response.data.features.mongodb ? '‚úÖ' : '‚ùå');
        console.log('  - Telegram:', response.data.features.telegram ? '‚úÖ' : '‚ùå');
        console.log('  - –ü—Ä–æ–∫—Å–∏:', response.data.features.proxy);
        console.log('  - –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ:', response.data.features.encryption ? '‚úÖ' : '‚ùå');
        console.log('  - –ö—ç—à:', JSON.stringify(response.data.features.cache));
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ health check:', error.message);
    }
}

async function runTests() {
    await testHealthEndpoint();
    await testGPTWithProxy();
}

runTests(); 
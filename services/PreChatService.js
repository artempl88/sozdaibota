const PreChatForm = require('../models/PreChatForm');
const crypto = require('crypto');

class PreChatService {
    constructor() {
        this.initPrompts();
    }

    initPrompts() {
        this.systemPrompts = {
            base: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é Telegram-–±–æ—Ç–æ–≤ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞.

–ö–û–ù–¢–ï–ö–°–¢ –û–ë–©–ï–ù–ò–Ø:
- –ö–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–Ω–∫–µ—Ç—É
- –£ —Ç–µ–±—è –µ—Å—Ç—å –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –µ–≥–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö
- –¢–≤–æ—è —Ü–µ–ª—å: —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ –¥–µ—Ç–∞–ª–∏ –∏ –≤—ã—è–≤–∏—Ç—å –≤—Å–µ –Ω—é–∞–Ω—Å—ã –ø—Ä–æ–µ–∫—Ç–∞

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
- –ó–∞–¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏

–ó–ê–î–ê–ß–ò:
1. –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞
2. –í—ã—è–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—ä–µ–º –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
4. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏`,

            industrySpecific: {
                'e-commerce': `–°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: E-COMMERCE
–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞:
- –ö–∞—Ç–∞–ª–æ–≥–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
- –ö–æ—Ä–∑–∏–Ω–µ –∏ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑–∞
- –ü–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
- –°–∫–ª–∞–¥—Å–∫–æ–º —É—á–µ—Ç–µ
- –ü—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏`,

                'services': `–°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –£–°–õ–£–ì–ò
–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞:
- –°–∏—Å—Ç–µ–º–µ –∑–∞–ø–∏—Å–∏ –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –∫–ª–∏–µ–Ω—Ç–∞–º
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å CRM
- –û—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –ø–æ —É—Å–ª—É–≥–∞–º`,

                'education': `–°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –û–ë–†–ê–ó–û–í–ê–ù–ò–ï
–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞:
- –ö—É—Ä—Å–∞—Ö –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö
- –°–∏—Å—Ç–µ–º–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è
- –ú–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –∏ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö
- –ü—Ä–æ–≥—Ä–µ—Å—Å–µ —É—á–∞—â–∏—Ö—Å—è
- –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏`,

                'default': `–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–û–î–•–û–î
–ò–∑—É—á–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ`
            }
        };
    }

    generateSessionId() {
        return crypto.randomBytes(16).toString('hex');
    }

    async createSession(formData) {
        try {
            const sessionId = this.generateSessionId();
            
            const session = new PreChatForm({
                sessionId,
                formData,
                status: 'chat_active',
                chatHistory: [{
                    role: 'system',
                    content: '–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞',
                    metadata: {
                        messageType: 'form_submission',
                        formData: formData
                    }
                }]
            });

            await session.save();
            return { sessionId, success: true };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é');
        }
    }

    async getSession(sessionId) {
        try {
            return await PreChatForm.findOne({ sessionId });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
            return null;
        }
    }

    async addMessageToHistory(sessionId, role, content, metadata = {}) {
        try {
            const session = await PreChatForm.findOne({ sessionId });
            if (!session) {
                throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            session.chatHistory.push({
                role,
                content,
                metadata: {
                    messageType: metadata.messageType || 'text',
                    ...metadata
                }
            });

            await session.save();
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            return false;
        }
    }

    buildContextualPrompt(formData, chatHistory = []) {
        const { name, position, industry, budget, preferredChannels, timeline } = formData;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –æ—Ç—Ä–∞—Å–ª–∏
        let industryKey = 'default';
        const industryLower = industry.toLowerCase();
        
        if (industryLower.includes('–º–∞–≥–∞–∑–∏–Ω') || industryLower.includes('—Ç–æ—Ä–≥–æ–≤–ª—è') || industryLower.includes('–ø—Ä–æ–¥–∞–∂–∞')) {
            industryKey = 'e-commerce';
        } else if (industryLower.includes('—É—Å–ª—É–≥') || industryLower.includes('—Å–µ—Ä–≤–∏—Å') || industryLower.includes('—Å–∞–ª–æ–Ω')) {
            industryKey = 'services';
        } else if (industryLower.includes('–æ–±—Ä–∞–∑–æ–≤–∞–Ω') || industryLower.includes('–∫—É—Ä—Å') || industryLower.includes('—à–∫–æ–ª–∞')) {
            industryKey = 'education';
        }

        const systemPrompt = `${this.systemPrompts.base}

${this.systemPrompts.industrySpecific[industryKey]}

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–ò–ï–ù–¢–ï:
üë§ –ò–º—è: ${name}
üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${position}  
üè¢ –û—Ç—Ä–∞—Å–ª—å: ${industry}
üí∞ –ë—é–¥–∂–µ—Ç: ${budget}
üìû –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã: ${preferredChannels.join(', ')}
‚è∞ –°—Ä–æ–∫–∏: ${timeline}

–¢–ï–ö–£–©–ê–Ø –ó–ê–î–ê–ß–ê:
–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏, –ø–æ–∫–∞–∂–∏ —á—Ç–æ —Ç—ã –∏–∑—É—á–∏–ª –∞–Ω–∫–µ—Ç—É, –∏ –∑–∞–¥–∞–π –ø–µ—Ä–≤—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.`;

        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        let conversationContext = [
            { role: 'system', content: systemPrompt }
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ)
        const relevantHistory = chatHistory.filter(msg => 
            msg.metadata.messageType !== 'form_submission' && 
            msg.metadata.messageType !== 'system'
        );

        conversationContext = conversationContext.concat(relevantHistory);

        return conversationContext;
    }

    async updateLeadScore(sessionId) {
        try {
            const session = await PreChatForm.findOne({ sessionId });
            if (!session) return;

            let score = 0;
            const { budget, timeline, position, industry } = session.formData;

            // –û—Ü–µ–Ω–∫–∞ –±—é–¥–∂–µ—Ç–∞ (0-3 –±–∞–ª–ª–∞)
            const budgetScores = {
                '–¥–æ 20 000‚ÇΩ': 1,
                '20 000 - 50 000‚ÇΩ': 2,
                '50 000 - 100 000‚ÇΩ': 2.5,
                '100 000 - 200 000‚ÇΩ': 3,
                '—Å–≤—ã—à–µ 200 000‚ÇΩ': 3
            };
            score += budgetScores[budget] || 1;

            // –û—Ü–µ–Ω–∫–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (0-2 –±–∞–ª–ª–∞)
            const timelineScores = {
                '—Å—Ä–æ—á–Ω–æ (1-3 –¥–Ω—è)': 2,
                '–±—ã—Å—Ç—Ä–æ (–Ω–µ–¥–µ–ª—è)': 1.5,
                '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ (2-3 –Ω–µ–¥–µ–ª–∏)': 1,
                '–Ω–µ —Å–ø–µ—à–∏–º (–º–µ—Å—è—Ü+)': 0.5
            };
            score += timelineScores[timeline] || 1;

            // –û—Ü–µ–Ω–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ (0-2 –±–∞–ª–ª–∞)
            const positionLower = position.toLowerCase();
            if (positionLower.includes('–¥–∏—Ä–µ–∫—Ç–æ—Ä') || positionLower.includes('—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å') || positionLower.includes('–≤–ª–∞–¥–µ–ª–µ—Ü')) {
                score += 2;
            } else if (positionLower.includes('–º–µ–Ω–µ–¥–∂–µ—Ä') || positionLower.includes('—É–ø—Ä–∞–≤–ª—è—é—â–∏–π')) {
                score += 1.5;
            } else {
                score += 1;
            }

            // –û—Ü–µ–Ω–∫–∞ –æ—Ç—Ä–∞—Å–ª–∏ (0-1 –±–∞–ª–ª)
            const highValueIndustries = ['—Ñ–∏–Ω–∞–Ω—Å—ã', '–º–µ–¥–∏—Ü–∏–Ω–∞', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', 'e-commerce'];
            if (highValueIndustries.some(ind => industry.toLowerCase().includes(ind))) {
                score += 1;
            } else {
                score += 0.5;
            }

            // –û—Ü–µ–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–µ (0-2 –±–∞–ª–ª–∞)
            const messageCount = session.chatHistory.filter(msg => msg.role === 'user').length;
            if (messageCount >= 5) {
                score += 2;
            } else if (messageCount >= 3) {
                score += 1.5;
            } else if (messageCount >= 1) {
                score += 1;
            }

            session.leadScore = Math.min(10, Math.round(score * 10) / 10);
            await session.save();

            return session.leadScore;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–¥-—Å–∫–æ—Ä–∞:', error);
            return 0;
        }
    }

    validateFormData(formData) {
        const required = ['name', 'contactInfo', 'position', 'industry', 'budget', 'preferredChannels', 'timeline'];
        const missing = required.filter(field => !formData[field]);
        
        if (missing.length > 0) {
            return { valid: false, missing };
        }

        if (!Array.isArray(formData.preferredChannels) || formData.preferredChannels.length === 0) {
            return { valid: false, error: '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏' };
        }

        const validBudgets = ['–¥–æ 20 000‚ÇΩ', '20 000 - 50 000‚ÇΩ', '50 000 - 100 000‚ÇΩ', '100 000 - 200 000‚ÇΩ', '—Å–≤—ã—à–µ 200 000‚ÇΩ'];
        if (!validBudgets.includes(formData.budget)) {
            return { valid: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±—é–¥–∂–µ—Ç' };
        }

        const validTimelines = ['—Å—Ä–æ—á–Ω–æ (1-3 –¥–Ω—è)', '–±—ã—Å—Ç—Ä–æ (–Ω–µ–¥–µ–ª—è)', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ (2-3 –Ω–µ–¥–µ–ª–∏)', '–Ω–µ —Å–ø–µ—à–∏–º (–º–µ—Å—è—Ü+)'];
        if (!validTimelines.includes(formData.timeline)) {
            return { valid: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏' };
        }

        return { valid: true };
    }

    async getAnalytics() {
        try {
            const totalSessions = await PreChatForm.countDocuments();
            const activeChats = await PreChatForm.countDocuments({ status: 'chat_active' });
            const qualifiedLeads = await PreChatForm.countDocuments({ leadScore: { $gte: 6 } });
            
            const avgScore = await PreChatForm.aggregate([
                { $group: { _id: null, avgScore: { $avg: "$leadScore" } } }
            ]);

            const industryStats = await PreChatForm.aggregate([
                { $group: { _id: "$formData.industry", count: { $sum: 1 } } },
                { $sort: { count: -1 } }
            ]);

            return {
                totalSessions,
                activeChats,
                qualifiedLeads,
                avgScore: avgScore[0]?.avgScore || 0,
                industryStats,
                conversionRate: totalSessions > 0 ? (qualifiedLeads / totalSessions * 100).toFixed(1) : 0
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
            return null;
        }
    }
}

module.exports = PreChatService; 
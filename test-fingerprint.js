// –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã Fingerprint –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
const axios = require('axios');

const API_BASE = 'http://localhost:3001/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testFingerprint = 'test_fingerprint_' + Date.now();
const testFormData = {
    name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    contactInfo: '+7-999-123-45-67',
    position: '–î–∏—Ä–µ–∫—Ç–æ—Ä',
    industry: 'E-commerce / –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω',
    budget: '50 000 - 100 000‚ÇΩ',
    preferredChannels: ['Telegram', 'Email'],
    timeline: '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ (2-3 –Ω–µ–¥–µ–ª–∏)',
    fingerprint: testFingerprint
};

async function runFingerprintTest() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã Fingerprint...\n');

    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π fingerprint (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–∞—è)
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π fingerprint...');
        const checkResponse1 = await axios.post(`${API_BASE}/check-session`, {
            fingerprint: testFingerprint
        });
        
        console.log('–û—Ç–≤–µ—Ç:', checkResponse1.data);
        
        if (!checkResponse1.data.sessionFound) {
            console.log('‚úÖ –ù–æ–≤—ã–π fingerprint –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–∞–∫ –Ω–æ–≤—ã–π');
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞: –Ω–æ–≤—ã–π fingerprint —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º');
            return;
        }

        // 2. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ –∞–Ω–∫–µ—Ç—É...');
        const formResponse = await axios.post(`${API_BASE}/pre-chat-form`, testFormData);
        
        console.log('–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', {
            sessionId: formResponse.data.sessionId,
            success: formResponse.data.success
        });

        if (!formResponse.data.success) {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏');
            return;
        }

        const sessionId = formResponse.data.sessionId;

        // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç
        console.log('\n3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç...');
        
        const messages = [
            '–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –±–æ—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –æ–±—É–≤–∏',
            '–ù—É–∂–Ω—ã –∫–∞—Ç–∞–ª–æ–≥, –∫–æ—Ä–∑–∏–Ω–∞ –∏ –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞–º–∏',
            '–ï—Å—Ç—å –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM?'
        ];

        for (let i = 0; i < messages.length; i++) {
            const messageResponse = await axios.post(`${API_BASE}/pre-chat-message`, {
                sessionId: sessionId,
                message: messages[i]
            });
            
            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ ${i + 1}: ${messageResponse.data.success ? '‚úÖ' : '‚ùå'}`);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await new Promise(resolve => setTimeout(resolve, 500));
        }

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—Ç –∂–µ fingerprint (–¥–æ–ª–∂–Ω–∞ –Ω–∞–π—Ç–∏—Å—å —Å–µ—Å—Å–∏—è)
        console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π fingerprint...');
        const checkResponse2 = await axios.post(`${API_BASE}/check-session`, {
            fingerprint: testFingerprint
        });
        
        console.log('–û—Ç–≤–µ—Ç:', {
            sessionFound: checkResponse2.data.sessionFound,
            sessionId: checkResponse2.data.sessionId,
            formData: checkResponse2.data.formData?.name
        });

        if (checkResponse2.data.sessionFound && checkResponse2.data.sessionId === sessionId) {
            console.log('‚úÖ –°–µ—Å—Å–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ fingerprint');
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ sessionId –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
            return;
        }

        // 5. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        console.log('\n5Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞...');
        const historyResponse = await axios.get(`${API_BASE}/pre-chat-history/${sessionId}`);
        
        const chatHistory = historyResponse.data.chatHistory || [];
        console.log(`–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞: ${chatHistory.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
        
        const userMessages = chatHistory.filter(msg => msg.role === 'user');
        console.log(`–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userMessages.length}`);
        
        if (userMessages.length >= messages.length) {
            console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏');
        }

        // 6. –ò–º–∏—Ç–∏—Ä—É–µ–º "–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ fingerprint)
        console.log('\n6Ô∏è‚É£ –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const checkResponse3 = await axios.post(`${API_BASE}/check-session`, {
            fingerprint: testFingerprint
        });

        if (checkResponse3.data.sessionFound) {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å —Ç–æ–≥–æ –∂–µ –º–µ—Å—Ç–∞');
            console.log('–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', {
                name: checkResponse3.data.formData.name,
                industry: checkResponse3.data.formData.industry,
                leadScore: checkResponse3.data.leadScore
            });
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞');
        }

        console.log('\nüéâ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã Fingerprint –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!');
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
        console.log('‚úÖ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è');
        console.log('‚úÖ –°–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∏ —Å–≤—è–∑—ã–≤–∞—é—Ç—Å—è —Å fingerprint');
        console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è');
        console.log('‚úÖ –í–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç —Å–µ—Å—Å–∏—é');
        console.log('‚úÖ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
        if (error.response) {
            console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
    runFingerprintTest();
}

module.exports = { runFingerprintTest }; 
const axios = require('axios');

const BASE_URL = 'http://localhost:3001';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
const testFormData = {
    name: '–ê–ª–µ–∫—Å–µ–π –¢–µ—Å—Ç–æ–≤',
    contactInfo: 'test@example.com',
    position: '–î–∏—Ä–µ–∫—Ç–æ—Ä',
    industry: 'E-commerce / –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω',
    budget: '50 000 - 100 000‚ÇΩ',
    preferredChannels: ['Telegram', 'Email'],
    timeline: '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ (2-3 –Ω–µ–¥–µ–ª–∏)'
};

async function testPreChatSystem() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±—ã—Å—Ç—Ä–æ–π –∞–Ω–∫–µ—Ç—ã');
    console.log('=====================================\n');

    try {
        // 1. –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã
        console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã...');
        const formResponse = await axios.post(`${BASE_URL}/api/pre-chat-form`, testFormData);
        
        if (formResponse.data.success) {
            console.log('‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
            console.log('üìù Session ID:', formResponse.data.sessionId);
            console.log('üí¨ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:', formResponse.data.welcomeMessage);
            
            const sessionId = formResponse.data.sessionId;
            
            // 2. –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...');
            const messageResponse = await axios.post(`${BASE_URL}/api/pre-chat-message`, {
                sessionId: sessionId,
                message: '–ú–Ω–µ –Ω—É–∂–µ–Ω –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ –º–æ–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ. –ö–ª–∏–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –æ–Ω–ª–∞–π–Ω.'
            });
            
            if (messageResponse.data.success) {
                console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                console.log('ü§ñ –û—Ç–≤–µ—Ç GPT:', messageResponse.data.message);
                console.log('üìä Lead Score:', messageResponse.data.leadScore);
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageResponse.data.error);
            }
            
            // 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
            console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞...');
            const historyResponse = await axios.get(`${BASE_URL}/api/pre-chat-history/${sessionId}`);
            
            if (historyResponse.data.success) {
                console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞');
                console.log('üìã –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', historyResponse.data.formData);
                console.log('üí¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', historyResponse.data.chatHistory.length);
                console.log('üìä Lead Score:', historyResponse.data.leadScore);
                console.log('üîÑ –°—Ç–∞—Ç—É—Å:', historyResponse.data.status);
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', historyResponse.data.error);
            }
            
            // 4. –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
            const analyticsResponse = await axios.get(`${BASE_URL}/api/pre-chat-analytics`);
            
            if (analyticsResponse.data.success) {
                console.log('‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞');
                console.log('üìä –û–±—â–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
                console.log('   - –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π:', analyticsResponse.data.totalSessions);
                console.log('   - –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤:', analyticsResponse.data.activeChats);
                console.log('   - –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤:', analyticsResponse.data.qualifiedLeads);
                console.log('   - –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä:', analyticsResponse.data.avgScore);
                console.log('   - –ö–æ–Ω–≤–µ—Ä—Å–∏—è:', analyticsResponse.data.conversionRate + '%');
                console.log('   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç—Ä–∞—Å–ª—è–º:', analyticsResponse.data.industryStats);
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', analyticsResponse.data.error);
            }
            
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã:', formResponse.data.error);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
        if (error.response) {
            console.error('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
        }
    }
}

// –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
async function testFormValidation() {
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã');
    console.log('===================================\n');

    // –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    try {
        console.log('‚ùå –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
        const response = await axios.post(`${BASE_URL}/api/pre-chat-form`, {});
        console.log('–û—Ç–≤–µ—Ç:', response.data);
    } catch (error) {
        if (error.response && error.response.status === 400) {
            console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.response.data.error);
        } else {
            console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
        }
    }

    // –¢–µ—Å—Ç –±–µ–∑ –∫–∞–Ω–∞–ª–æ–≤ —Å–≤—è–∑–∏
    try {
        console.log('\n‚ùå –¢–µ—Å—Ç –±–µ–∑ –∫–∞–Ω–∞–ª–æ–≤ —Å–≤—è–∑–∏...');
        const incompleteData = { ...testFormData };
        incompleteData.preferredChannels = [];
        
        const response = await axios.post(`${BASE_URL}/api/pre-chat-form`, incompleteData);
        console.log('–û—Ç–≤–µ—Ç:', response.data);
    } catch (error) {
        if (error.response && error.response.status === 400) {
            console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.response.data.error);
        } else {
            console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
(async () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –±—ã—Å—Ç—Ä–æ–π –∞–Ω–∫–µ—Ç—ã\n');
    
    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    await testPreChatSystem();
    await testFormValidation();
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
})(); 
// test-mongodb.js - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
const mongoose = require('mongoose');
const config = require('./src/config');

console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB...\n');

async function testMongoDB() {
    console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MongoDB:');
    console.log(`URI: ${config.mongodb.uri ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    
    if (config.mongodb.uri) {
        // –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const maskedUri = config.mongodb.uri.replace(/:([^:@]+)@/, ':***@');
        console.log(`Masked URI: ${maskedUri}`);
    }
    
    console.log('\nüîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    
    try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const options = {
            serverSelectionTimeoutMS: 10000, // 10 —Å–µ–∫—É–Ω–¥
            connectTimeoutMS: 10000,
            socketTimeoutMS: 10000,
            maxPoolSize: 5,
            retryWrites: true,
            w: 'majority'
        };
        
        console.log('‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 10 —Å–µ–∫...');
        
        await mongoose.connect(config.mongodb.uri, options);
        
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ!');
        console.log(`üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${mongoose.connection.readyState}`);
        console.log(`üè∑Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${mongoose.connection.name}`);
        console.log(`üåê –•–æ—Å—Ç: ${mongoose.connection.host}`);
        console.log(`üîå –ü–æ—Ä—Ç: ${mongoose.connection.port}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
        console.log('\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏...');
        
        const TestSchema = new mongoose.Schema({
            message: String,
            timestamp: { type: Date, default: Date.now }
        });
        
        const TestModel = mongoose.model('Test', TestSchema);
        
        const testDoc = new TestModel({
            message: '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MongoDB'
        });
        
        await testDoc.save();
        console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        await TestModel.deleteOne({ _id: testDoc._id });
        console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω');
        
        console.log('\nüéØ MongoDB –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:');
        console.error(`   –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code}`);
        console.error(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
        
        if (error.code === 'ENOTFOUND') {
            console.error('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            console.error('   1. –ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ—Å—Ç –≤ URI');
            console.error('   2. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
            console.error('   3. DNS –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∞–¥—Ä–µ—Å');
        } else if (error.code === 'ECONNREFUSED') {
            console.error('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            console.error('   1. MongoDB —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
            console.error('   2. –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç');
            console.error('   3. –ë—Ä–∞–Ω–¥–º–∞—É—ç—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
        } else if (error.message.includes('Authentication failed')) {
            console.error('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            console.error('   1. –ù–µ–≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å');
            console.error('   2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤');
            console.error('   3. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        } else if (error.message.includes('timeout')) {
            console.error('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            console.error('   1. –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
            console.error('   2. –°–µ—Ä–≤–µ—Ä MongoDB –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω');
            console.error('   3. –°–µ—Ç–µ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è');
        }
        
        console.error('\nüîß –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
        console.error('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URI –≤ environment.env');
        console.error('   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.error('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å MongoDB Atlas');
        console.error('   4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ MongoDB Compass');
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try {
        await mongoose.connection.close();
        console.log('\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    } catch (closeError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', closeError.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testMongoDB().catch(console.error); 